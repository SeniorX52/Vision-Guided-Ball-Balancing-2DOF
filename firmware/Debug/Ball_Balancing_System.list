
Ball_Balancing_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e5c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  08009f70  08009f70  0000af70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  0000c2a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a89c  0800a89c  0000b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a4  0800a8a4  0000c2a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a4  0800a8a4  0000b8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8a8  0800a8a8  0000b8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a4  20000000  0800a8ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200002a4  0800ab50  0000c2a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800ab50  0000c914  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c2a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011948  00000000  00000000  0000c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc0  00000000  00000000  0001dc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  000208d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd0  00000000  00000000  00021a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b9f  00000000  00000000  00022868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ba5  00000000  00000000  00026407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956e0  00000000  00000000  00039fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf68c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000611c  00000000  00000000  000cf6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d57ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a4 	.word	0x200002a4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f54 	.word	0x08009f54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a8 	.word	0x200002a8
 800014c:	08009f54 	.word	0x08009f54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <Control_init>:
    {0.0, 0.0},
    {0.0, 1.0}
};


void Control_init(DataHandler*	dataHandler){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(dataHandler!=NULL){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <Control_init+0x14>
		handler=dataHandler;
 800116a:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <Control_init+0x5c>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
	}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <Control_init+0x60>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <Control_init+0x60>)
 8001176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800117a:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 800117c:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <Control_init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <Control_init+0x64>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <Control_init+0x64>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6013      	str	r3, [r2, #0]
	//Flash_Read_Control_Parameters();
	Control_PID_Init(&PID_X);
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <Control_init+0x68>)
 8001190:	f000 f820 	bl	80011d4 <Control_PID_Init>
	Control_PID_Init(&PID_Y);
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <Control_init+0x6c>)
 8001196:	f000 f81d 	bl	80011d4 <Control_PID_Init>
	Control_PV_Init();
 800119a:	f000 f843 	bl	8001224 <Control_PV_Init>
	LQR_Init(&ctrl);
 800119e:	480b      	ldr	r0, [pc, #44]	@ (80011cc <Control_init+0x70>)
 80011a0:	f000 f886 	bl	80012b0 <LQR_Init>
	currentTime=DWT->CYCCNT;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <Control_init+0x64>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <Control_init+0x74>)
 80011aa:	6013      	str	r3, [r2, #0]
	UpdateTime();
 80011ac:	f000 f86c 	bl	8001288 <UpdateTime>

}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000380 	.word	0x20000380
 80011bc:	e000edf0 	.word	0xe000edf0
 80011c0:	e0001000 	.word	0xe0001000
 80011c4:	200002c0 	.word	0x200002c0
 80011c8:	20000320 	.word	0x20000320
 80011cc:	200004cc 	.word	0x200004cc
 80011d0:	200003a0 	.word	0x200003a0

080011d4 <Control_PID_Init>:
void Control_PID_Init(PIDController* pid) {
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b09b      	sub	sp, #108	@ 0x6c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    *pid = (PIDController){
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <Control_PID_Init+0x44>)
 80011de:	681e      	ldr	r6, [r3, #0]
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <Control_PID_Init+0x48>)
 80011e2:	681d      	ldr	r5, [r3, #0]
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <Control_PID_Init+0x4c>)
 80011e6:	681c      	ldr	r4, [r3, #0]
        .desired_V = 0.0f,
        .current_V = 0.0f,
        .prev_output = 0.0f,
	    .prev_measurement = 0,
	    .prev_output = 0,
	    .prev_time = HAL_GetTick(),
 80011e8:	f002 fae6 	bl	80037b8 <HAL_GetTick>
 80011ec:	6038      	str	r0, [r7, #0]
    *pid = (PIDController){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	2360      	movs	r3, #96	@ 0x60
 80011f4:	461a      	mov	r2, r3
 80011f6:	2100      	movs	r1, #0
 80011f8:	f005 fe4d 	bl	8006e96 <memset>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601e      	str	r6, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	605d      	str	r5, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609c      	str	r4, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	65da      	str	r2, [r3, #92]	@ 0x5c
		.delta_pos={0,0,0,0,0,0,0,0},
		.filtered_delta_pos= 0.0f
    };

}
 800120e:	bf00      	nop
 8001210:	376c      	adds	r7, #108	@ 0x6c
 8001212:	46bd      	mov	sp, r7
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001216:	bf00      	nop
 8001218:	20000000 	.word	0x20000000
 800121c:	20000004 	.word	0x20000004
 8001220:	20000008 	.word	0x20000008

08001224 <Control_PV_Init>:

PV_ControllerStates ctrl_x;
PV_ControllerStates ctrl_y;

void Control_PV_Init(void) {
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    ctrl_x.prev_pos_filtered = 0.0f;
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <Control_PV_Init+0x5c>)
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    ctrl_x.prev_vel_filtered = 0.0f;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <Control_PV_Init+0x5c>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
    ctrl_x.prev_vel_input = 0.0f;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <Control_PV_Init+0x5c>)
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
    ctrl_x.prev_pos = 0.0f;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <Control_PV_Init+0x5c>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
    ctrl_x.prev_output = 0.0f;
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <Control_PV_Init+0x5c>)
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	619a      	str	r2, [r3, #24]

    ctrl_y.prev_pos_filtered = 0.0f;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <Control_PV_Init+0x60>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    ctrl_y.prev_vel_filtered = 0.0f;
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <Control_PV_Init+0x60>)
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
    ctrl_y.prev_vel_input = 0.0f;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <Control_PV_Init+0x60>)
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
    ctrl_y.prev_pos = 0.0f;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <Control_PV_Init+0x60>)
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    ctrl_y.prev_output = 0.0f;
 8001270:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <Control_PV_Init+0x60>)
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000504 	.word	0x20000504
 8001284:	20000520 	.word	0x20000520

08001288 <UpdateTime>:
void UpdateTime() {
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	previousTime = currentTime;
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <UpdateTime+0x1c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <UpdateTime+0x20>)
 8001292:	6013      	str	r3, [r2, #0]
	currentTime = DWT->CYCCNT;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <UpdateTime+0x24>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a02      	ldr	r2, [pc, #8]	@ (80012a4 <UpdateTime+0x1c>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	200003a0 	.word	0x200003a0
 80012a8:	2000039c 	.word	0x2000039c
 80012ac:	e0001000 	.word	0xe0001000

080012b0 <LQR_Init>:
float GetDeltaTime() {
    return (currentTime - previousTime) / SystemCoreClock;
}
void LQR_Init(LQR_Controller* ctrl) {
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    // Initialize with your gains
    const float K_init[2][4] = {
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <LQR_Init+0x5c>)
 80012ba:	f107 0418 	add.w	r4, r7, #24
 80012be:	461d      	mov	r5, r3
 80012c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {5.6747f, 0.7304f, 0.0f, 0.0f},
        {0.0f, 0.0f, 5.6747f, 0.7304f}
    };
    const float Ki_init[2][2] = {
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <LQR_Init+0x60>)
 80012ce:	f107 0408 	add.w	r4, r7, #8
 80012d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {5.0f, 0.0f},
        {0.0f, 5.0f}
    };

    memcpy(ctrl->K, K_init, sizeof(K_init));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3308      	adds	r3, #8
 80012dc:	f107 0118 	add.w	r1, r7, #24
 80012e0:	2220      	movs	r2, #32
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 fe65 	bl	8006fb2 <memcpy>
    memcpy(ctrl->Ki, Ki_init, sizeof(Ki_init));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3328      	adds	r3, #40	@ 0x28
 80012ec:	f107 0108 	add.w	r1, r7, #8
 80012f0:	2210      	movs	r2, #16
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 fe5d 	bl	8006fb2 <memcpy>
    memset(ctrl->xi, 0, sizeof(ctrl->xi));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2208      	movs	r2, #8
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 fdc9 	bl	8006e96 <memset>
}
 8001304:	bf00      	nop
 8001306:	3738      	adds	r7, #56	@ 0x38
 8001308:	46bd      	mov	sp, r7
 800130a:	bdb0      	pop	{r4, r5, r7, pc}
 800130c:	08009f70 	.word	0x08009f70
 8001310:	08009f90 	.word	0x08009f90

08001314 <Control_LQR_UpdateState>:

    u[1] = -(ctrl->K[1][0]*x[0] + ctrl->K[1][1]*x[1] +
            ctrl->K[1][2]*x[2] + ctrl->K[1][3]*x[3] +
            ctrl->Ki[1][0]*ctrl->xi[0] + ctrl->Ki[1][1]*ctrl->xi[1]);
}
void Control_LQR_UpdateState(float x[4], const float u[2], float dt) {
 8001314:	b5b0      	push	{r4, r5, r7, lr}
 8001316:	b08c      	sub	sp, #48	@ 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
    float x_dot[4] = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < 4; i++) {
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001332:	e058      	b.n	80013e6 <Control_LQR_UpdateState+0xd2>
        for (int j = 0; j < 4; j++) {
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001338:	e024      	b.n	8001384 <Control_LQR_UpdateState+0x70>
            x_dot[i] += A[i][j] * x[j];
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	3330      	adds	r3, #48	@ 0x30
 8001340:	443b      	add	r3, r7
 8001342:	f853 4c20 	ldr.w	r4, [r3, #-32]
 8001346:	493d      	ldr	r1, [pc, #244]	@ (800143c <Control_LQR_UpdateState+0x128>)
 8001348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134a:	009a      	lsls	r2, r3, #2
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	4413      	add	r3, r2
 8001350:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fd10 	bl	8000d84 <__aeabi_fmul>
 8001364:	4603      	mov	r3, r0
 8001366:	4619      	mov	r1, r3
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff fc03 	bl	8000b74 <__addsf3>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	3330      	adds	r3, #48	@ 0x30
 8001378:	443b      	add	r3, r7
 800137a:	f843 2c20 	str.w	r2, [r3, #-32]
        for (int j = 0; j < 4; j++) {
 800137e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001380:	3301      	adds	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001386:	2b03      	cmp	r3, #3
 8001388:	ddd7      	ble.n	800133a <Control_LQR_UpdateState+0x26>
        }
        for (int j = 0; j < 2; j++) {
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	e024      	b.n	80013da <Control_LQR_UpdateState+0xc6>
            x_dot[i] += B[i][j] * u[j];
 8001390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	3330      	adds	r3, #48	@ 0x30
 8001396:	443b      	add	r3, r7
 8001398:	f853 4c20 	ldr.w	r4, [r3, #-32]
 800139c:	4928      	ldr	r1, [pc, #160]	@ (8001440 <Control_LQR_UpdateState+0x12c>)
 800139e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a0:	005a      	lsls	r2, r3, #1
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	4413      	add	r3, r2
 80013a6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	4413      	add	r3, r2
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fce5 	bl	8000d84 <__aeabi_fmul>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4619      	mov	r1, r3
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fbd8 	bl	8000b74 <__addsf3>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	3330      	adds	r3, #48	@ 0x30
 80013ce:	443b      	add	r3, r7
 80013d0:	f843 2c20 	str.w	r2, [r3, #-32]
        for (int j = 0; j < 2; j++) {
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	3301      	adds	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	2b01      	cmp	r3, #1
 80013de:	ddd7      	ble.n	8001390 <Control_LQR_UpdateState+0x7c>
    for (int i = 0; i < 4; i++) {
 80013e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e2:	3301      	adds	r3, #1
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	dda3      	ble.n	8001334 <Control_LQR_UpdateState+0x20>
        }
    }

    for (int i = 0; i < 4; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	e01c      	b.n	800142c <Control_LQR_UpdateState+0x118>
        x[i] += x_dot[i] * dt;
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	681d      	ldr	r5, [r3, #0]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	3330      	adds	r3, #48	@ 0x30
 8001402:	443b      	add	r3, r7
 8001404:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fcba 	bl	8000d84 <__aeabi_fmul>
 8001410:	4603      	mov	r3, r0
 8001412:	4619      	mov	r1, r3
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	18d4      	adds	r4, r2, r3
 800141c:	4628      	mov	r0, r5
 800141e:	f7ff fba9 	bl	8000b74 <__addsf3>
 8001422:	4603      	mov	r3, r0
 8001424:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 4; i++) {
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	3301      	adds	r3, #1
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	2b03      	cmp	r3, #3
 8001430:	dddf      	ble.n	80013f2 <Control_LQR_UpdateState+0xde>
    }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3730      	adds	r7, #48	@ 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	2000003c 	.word	0x2000003c
 8001440:	2000007c 	.word	0x2000007c

08001444 <Control_LQR>:

void Control_LQR(const float current_state[4], const float desired_state[4], float control_output[2]) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b08b      	sub	sp, #44	@ 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
    float error[4];

    for (int i = 0; i < 4; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
 8001454:	e017      	b.n	8001486 <Control_LQR+0x42>
        error[i] = current_state[i] - desired_state[i];
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4413      	add	r3, r2
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	4413      	add	r3, r2
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fb80 	bl	8000b70 <__aeabi_fsub>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	3328      	adds	r3, #40	@ 0x28
 800147a:	443b      	add	r3, r7
 800147c:	f843 2c14 	str.w	r2, [r3, #-20]
    for (int i = 0; i < 4; i++) {
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	3301      	adds	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	2b03      	cmp	r3, #3
 800148a:	dde4      	ble.n	8001456 <Control_LQR+0x12>
    }

    control_output[0] = -(K[0][0]*error[0] + K[0][1]*error[1] +
 800148c:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <Control_LQR+0x12c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc75 	bl	8000d84 <__aeabi_fmul>
 800149a:	4603      	mov	r3, r0
 800149c:	461c      	mov	r4, r3
 800149e:	4b34      	ldr	r3, [pc, #208]	@ (8001570 <Control_LQR+0x12c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fc6c 	bl	8000d84 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fb5f 	bl	8000b74 <__addsf3>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461c      	mov	r4, r3
                        K[0][2]*error[2] + K[0][3]*error[3]);
 80014ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <Control_LQR+0x12c>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fc5e 	bl	8000d84 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
    control_output[0] = -(K[0][0]*error[0] + K[0][1]*error[1] +
 80014ca:	4619      	mov	r1, r3
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fb51 	bl	8000b74 <__addsf3>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461c      	mov	r4, r3
                        K[0][2]*error[2] + K[0][3]*error[3]);
 80014d6:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <Control_LQR+0x12c>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	6a3a      	ldr	r2, [r7, #32]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fc50 	bl	8000d84 <__aeabi_fmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff fb43 	bl	8000b74 <__addsf3>
 80014ee:	4603      	mov	r3, r0
    control_output[0] = -(K[0][0]*error[0] + K[0][1]*error[1] +
 80014f0:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]

    control_output[1] = -(K[1][0]*error[0] + K[1][1]*error[1] +
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <Control_LQR+0x12c>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fc3f 	bl	8000d84 <__aeabi_fmul>
 8001506:	4603      	mov	r3, r0
 8001508:	461c      	mov	r4, r3
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <Control_LQR+0x12c>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fc36 	bl	8000d84 <__aeabi_fmul>
 8001518:	4603      	mov	r3, r0
 800151a:	4619      	mov	r1, r3
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff fb29 	bl	8000b74 <__addsf3>
 8001522:	4603      	mov	r3, r0
 8001524:	461c      	mov	r4, r3
                        K[1][2]*error[2] + K[1][3]*error[3]);
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <Control_LQR+0x12c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fc28 	bl	8000d84 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
    control_output[1] = -(K[1][0]*error[0] + K[1][1]*error[1] +
 8001536:	4619      	mov	r1, r3
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fb1b 	bl	8000b74 <__addsf3>
 800153e:	4603      	mov	r3, r0
 8001540:	461c      	mov	r4, r3
                        K[1][2]*error[2] + K[1][3]*error[3]);
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <Control_LQR+0x12c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	6a3a      	ldr	r2, [r7, #32]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fc1a 	bl	8000d84 <__aeabi_fmul>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fb0d 	bl	8000b74 <__addsf3>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
    control_output[1] = -(K[1][0]*error[0] + K[1][1]*error[1] +
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3304      	adds	r3, #4
 8001562:	f082 4200 	eor.w	r2, r2, #2147483648	@ 0x80000000
 8001566:	601a      	str	r2, [r3, #0]
}
 8001568:	bf00      	nop
 800156a:	372c      	adds	r7, #44	@ 0x2c
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	2000001c 	.word	0x2000001c
 8001574:	00000000 	.word	0x00000000

08001578 <Control_PID2>:

bool newsetpoint=false;
#include <math.h>
void Control_PID2(PIDController* pid, float setpoint, float measurement, float* output) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b097      	sub	sp, #92	@ 0x5c
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
    float dt = 0.01f; // to be measured later after FTDI
 8001586:	4b69      	ldr	r3, [pc, #420]	@ (800172c <Control_PID2+0x1b4>)
 8001588:	653b      	str	r3, [r7, #80]	@ 0x50
    // === position prediction ===
//    float theta = (pid->prev_output / 180.0f) * 3.14f;
//    float accel = 2.047 * sin(theta);
//    pid->current_V = pid->current_V + accel * dt;
//    float predicted_position = measurement + pid->current_V * dt + 0.5f * accel * dt * dt;
    float error = setpoint - measurement;
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	68b8      	ldr	r0, [r7, #8]
 800158e:	f7ff faef 	bl	8000b70 <__aeabi_fsub>
 8001592:	4603      	mov	r3, r0
 8001594:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float abs_error = fabsf(error);
 8001596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800159c:	64bb      	str	r3, [r7, #72]	@ 0x48
    // === adaptive gain ===
    float error_normalized = fminf(abs_error / 13.5f, 1.0f);
 800159e:	4964      	ldr	r1, [pc, #400]	@ (8001730 <Control_PID2+0x1b8>)
 80015a0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80015a2:	f7ff fca3 	bl	8000eec <__aeabi_fdiv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015ac:	4618      	mov	r0, r3
 80015ae:	f007 fe02 	bl	80091b6 <fminf>
 80015b2:	6478      	str	r0, [r7, #68]	@ 0x44
    float velocity_normalized = fminf(fabsf(pid->current_V) / 40.0f, 1.0f);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015bc:	495d      	ldr	r1, [pc, #372]	@ (8001734 <Control_PID2+0x1bc>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc94 	bl	8000eec <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fdf3 	bl	80091b6 <fminf>
 80015d0:	6438      	str	r0, [r7, #64]	@ 0x40

    float adaptive_kp = pid->kp * (0.3f + 0.7f * error_normalized);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	4958      	ldr	r1, [pc, #352]	@ (8001738 <Control_PID2+0x1c0>)
 80015d8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80015da:	f7ff fbd3 	bl	8000d84 <__aeabi_fmul>
 80015de:	4603      	mov	r3, r0
 80015e0:	4956      	ldr	r1, [pc, #344]	@ (800173c <Control_PID2+0x1c4>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fac6 	bl	8000b74 <__addsf3>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff fbc9 	bl	8000d84 <__aeabi_fmul>
 80015f2:	4603      	mov	r3, r0
 80015f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float adaptive_kd = pid->kd * (0.5f + 0.5f * velocity_normalized);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	689c      	ldr	r4, [r3, #8]
 80015fa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80015fe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001600:	f7ff fbc0 	bl	8000d84 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fab2 	bl	8000b74 <__addsf3>
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff fbb5 	bl	8000d84 <__aeabi_fmul>
 800161a:	4603      	mov	r3, r0
 800161c:	657b      	str	r3, [r7, #84]	@ 0x54
    float adaptive_ki = pid->ki * (0.3f + 0.7f * error_normalized);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	685c      	ldr	r4, [r3, #4]
 8001622:	4945      	ldr	r1, [pc, #276]	@ (8001738 <Control_PID2+0x1c0>)
 8001624:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001626:	f7ff fbad 	bl	8000d84 <__aeabi_fmul>
 800162a:	4603      	mov	r3, r0
 800162c:	4943      	ldr	r1, [pc, #268]	@ (800173c <Control_PID2+0x1c4>)
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff faa0 	bl	8000b74 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	4619      	mov	r1, r3
 8001638:	4620      	mov	r0, r4
 800163a:	f7ff fba3 	bl	8000d84 <__aeabi_fmul>
 800163e:	4603      	mov	r3, r0
 8001640:	63bb      	str	r3, [r7, #56]	@ 0x38
    bool within_tolerance = (abs_error <= pid->tolerance);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2201      	movs	r2, #1
 8001648:	4614      	mov	r4, r2
 800164a:	4619      	mov	r1, r3
 800164c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800164e:	f7ff fd41 	bl	80010d4 <__aeabi_fcmple>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <Control_PID2+0xe4>
 8001658:	2300      	movs	r3, #0
 800165a:	461c      	mov	r4, r3
 800165c:	f887 4037 	strb.w	r4, [r7, #55]	@ 0x37
    if (within_tolerance) {
 8001660:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001664:	2b00      	cmp	r3, #0
 8001666:	d06f      	beq.n	8001748 <Control_PID2+0x1d0>
        adaptive_kp *= 0.1f;
 8001668:	4935      	ldr	r1, [pc, #212]	@ (8001740 <Control_PID2+0x1c8>)
 800166a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800166c:	f7ff fb8a 	bl	8000d84 <__aeabi_fmul>
 8001670:	4603      	mov	r3, r0
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        adaptive_kd *= 0.5f;
 8001674:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001678:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800167a:	f7ff fb83 	bl	8000d84 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	657b      	str	r3, [r7, #84]	@ 0x54
        adaptive_ki = 0.0f;
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
        float prop = adaptive_kp * error;
 8001688:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800168a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800168c:	f7ff fb7a 	bl	8000d84 <__aeabi_fmul>
 8001690:	4603      	mov	r3, r0
 8001692:	61fb      	str	r3, [r7, #28]
        float derivative = -adaptive_kd * pid->current_V;
 8001694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001696:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7ff fb6f 	bl	8000d84 <__aeabi_fmul>
 80016a6:	4603      	mov	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
        pid->derivative=derivative;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	611a      	str	r2, [r3, #16]
        pid->prop=prop;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	619a      	str	r2, [r3, #24]
        pid->integral *= 0.99f;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4922      	ldr	r1, [pc, #136]	@ (8001744 <Control_PID2+0x1cc>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb61 	bl	8000d84 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	60da      	str	r2, [r3, #12]
        float output_raw = prop + pid->integral + derivative;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	69f9      	ldr	r1, [r7, #28]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa4f 	bl	8000b74 <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4619      	mov	r1, r3
 80016da:	69b8      	ldr	r0, [r7, #24]
 80016dc:	f7ff fa4a 	bl	8000b74 <__addsf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	617b      	str	r3, [r7, #20]
        float filter_alpha = 0.5f;
 80016e4:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80016e8:	613b      	str	r3, [r7, #16]
        *output = filter_alpha * pid->prev_output + (1.0f - filter_alpha) * output_raw;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ee:	6939      	ldr	r1, [r7, #16]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb47 	bl	8000d84 <__aeabi_fmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461c      	mov	r4, r3
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001700:	f7ff fa36 	bl	8000b70 <__aeabi_fsub>
 8001704:	4603      	mov	r3, r0
 8001706:	6979      	ldr	r1, [r7, #20]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb3b 	bl	8000d84 <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
 8001710:	4619      	mov	r1, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff fa2e 	bl	8000b74 <__addsf3>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]
        pid->prev_output = *output;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	629a      	str	r2, [r3, #40]	@ 0x28
        return;
 8001728:	e117      	b.n	800195a <Control_PID2+0x3e2>
 800172a:	bf00      	nop
 800172c:	3c23d70a 	.word	0x3c23d70a
 8001730:	41580000 	.word	0x41580000
 8001734:	42200000 	.word	0x42200000
 8001738:	3f333333 	.word	0x3f333333
 800173c:	3e99999a 	.word	0x3e99999a
 8001740:	3dcccccd 	.word	0x3dcccccd
 8001744:	3f7d70a4 	.word	0x3f7d70a4
    }

    // === increase damping ===
    if (copysignf(1.0f, pid->current_V) != copysignf(1.0f, error)) {
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001752:	f005 fc3c 	bl	8006fce <copysignf>
 8001756:	4604      	mov	r4, r0
 8001758:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800175a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800175e:	f005 fc36 	bl	8006fce <copysignf>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fca0 	bl	80010ac <__aeabi_fcmpeq>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d129      	bne.n	80017c6 <Control_PID2+0x24e>
        float damping_boost = 2.5f + 4.0f * expf(-fabsf(error) /0.03);
 8001772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001778:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fe53 	bl	8000428 <__aeabi_f2d>
 8001782:	a377      	add	r3, pc, #476	@ (adr r3, 8001960 <Control_PID2+0x3e8>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ffd0 	bl	800072c <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f998 	bl	8000ac8 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	4618      	mov	r0, r3
 800179c:	f007 fc56 	bl	800904c <expf>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff faec 	bl	8000d84 <__aeabi_fmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	496e      	ldr	r1, [pc, #440]	@ (8001968 <Control_PID2+0x3f0>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f9df 	bl	8000b74 <__addsf3>
 80017b6:	4603      	mov	r3, r0
 80017b8:	633b      	str	r3, [r7, #48]	@ 0x30
        adaptive_kd *= damping_boost;
 80017ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017bc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80017be:	f7ff fae1 	bl	8000d84 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    // === braking Zone ===
    float brake_zone = 2.0f + 3.0f * (1.0f - expf(-fabsf(pid->current_V)/5.0f));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017ce:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017d2:	4966      	ldr	r1, [pc, #408]	@ (800196c <Control_PID2+0x3f4>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fb89 	bl	8000eec <__aeabi_fdiv>
 80017da:	4603      	mov	r3, r0
 80017dc:	4618      	mov	r0, r3
 80017de:	f007 fc35 	bl	800904c <expf>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017ea:	f7ff f9c1 	bl	8000b70 <__aeabi_fsub>
 80017ee:	4603      	mov	r3, r0
 80017f0:	495f      	ldr	r1, [pc, #380]	@ (8001970 <Control_PID2+0x3f8>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fac6 	bl	8000d84 <__aeabi_fmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f9b8 	bl	8000b74 <__addsf3>
 8001804:	4603      	mov	r3, r0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (fabsf(measurement - setpoint) < brake_zone &&
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff f9b0 	bl	8000b70 <__aeabi_fsub>
 8001810:	4603      	mov	r3, r0
 8001812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001816:	4619      	mov	r1, r3
 8001818:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800181a:	f7ff fc6f 	bl	80010fc <__aeabi_fcmpgt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01e      	beq.n	8001862 <Control_PID2+0x2ea>
       fabsf(pid->current_V) > (5.0f*handler->trajectroy_speed)) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800182c:	4b51      	ldr	r3, [pc, #324]	@ (8001974 <Control_PID2+0x3fc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001832:	494e      	ldr	r1, [pc, #312]	@ (800196c <Control_PID2+0x3f4>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff faa5 	bl	8000d84 <__aeabi_fmul>
 800183a:	4603      	mov	r3, r0
    if (fabsf(measurement - setpoint) < brake_zone &&
 800183c:	4619      	mov	r1, r3
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff fc5c 	bl	80010fc <__aeabi_fcmpgt>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <Control_PID2+0x2ea>
        adaptive_kd *= 1.5f + velocity_normalized;
 800184a:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800184e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001850:	f7ff f990 	bl	8000b74 <__addsf3>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800185a:	f7ff fa93 	bl	8000d84 <__aeabi_fmul>
 800185e:	4603      	mov	r3, r0
 8001860:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    // === intergral I ===
    if((pid->current_V>1.0f) || abs_error>(10.0f*handler->trajectroy_scale)){
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc46 	bl	80010fc <__aeabi_fcmpgt>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10e      	bne.n	8001894 <Control_PID2+0x31c>
 8001876:	4b3f      	ldr	r3, [pc, #252]	@ (8001974 <Control_PID2+0x3fc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800187c:	493e      	ldr	r1, [pc, #248]	@ (8001978 <Control_PID2+0x400>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fa80 	bl	8000d84 <__aeabi_fmul>
 8001884:	4603      	mov	r3, r0
 8001886:	4619      	mov	r1, r3
 8001888:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800188a:	f7ff fc37 	bl	80010fc <__aeabi_fcmpgt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <Control_PID2+0x344>
    	pid->integral += adaptive_ki * error * dt;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	68dc      	ldr	r4, [r3, #12]
 8001898:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800189a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800189c:	f7ff fa72 	bl	8000d84 <__aeabi_fmul>
 80018a0:	4603      	mov	r3, r0
 80018a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa6d 	bl	8000d84 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff f960 	bl	8000b74 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	60da      	str	r2, [r3, #12]
    }
    pid->integral = fmaxf(fminf(pid->integral, 20.0f), -20.0f);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	492e      	ldr	r1, [pc, #184]	@ (800197c <Control_PID2+0x404>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f007 fc77 	bl	80091b6 <fminf>
 80018c8:	4603      	mov	r3, r0
 80018ca:	492d      	ldr	r1, [pc, #180]	@ (8001980 <Control_PID2+0x408>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fc5d 	bl	800918c <fmaxf>
 80018d2:	4602      	mov	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	60da      	str	r2, [r3, #12]

    // === pid output ===
    float prop = adaptive_kp * error;
 80018d8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80018da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80018dc:	f7ff fa52 	bl	8000d84 <__aeabi_fmul>
 80018e0:	4603      	mov	r3, r0
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float derivative = -adaptive_kd * pid->current_V;
 80018e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e6:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff fa47 	bl	8000d84 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    float output_raw = prop + pid->integral + derivative;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f937 	bl	8000b74 <__addsf3>
 8001906:	4603      	mov	r3, r0
 8001908:	4619      	mov	r1, r3
 800190a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800190c:	f7ff f932 	bl	8000b74 <__addsf3>
 8001910:	4603      	mov	r3, r0
 8001912:	623b      	str	r3, [r7, #32]

    *output = ALPHA * pid->prev_output + (1.0f - ALPHA) * output_raw;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	4a1a      	ldr	r2, [pc, #104]	@ (8001984 <Control_PID2+0x40c>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fa30 	bl	8000d84 <__aeabi_fmul>
 8001924:	4603      	mov	r3, r0
 8001926:	461c      	mov	r4, r3
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <Control_PID2+0x40c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001932:	f7ff f91d 	bl	8000b70 <__aeabi_fsub>
 8001936:	4603      	mov	r3, r0
 8001938:	6a39      	ldr	r1, [r7, #32]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa22 	bl	8000d84 <__aeabi_fmul>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff f915 	bl	8000b74 <__addsf3>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	601a      	str	r2, [r3, #0]
    pid->prev_output = *output;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800195a:	375c      	adds	r7, #92	@ 0x5c
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	eb851eb8 	.word	0xeb851eb8
 8001964:	3f9eb851 	.word	0x3f9eb851
 8001968:	40200000 	.word	0x40200000
 800196c:	40a00000 	.word	0x40a00000
 8001970:	40400000 	.word	0x40400000
 8001974:	20000380 	.word	0x20000380
 8001978:	41200000 	.word	0x41200000
 800197c:	41a00000 	.word	0x41a00000
 8001980:	c1a00000 	.word	0xc1a00000
 8001984:	20000014 	.word	0x20000014

08001988 <Control_PID>:
void Control_PID(PIDController* pid,float setpoint, float measurement, float* output){
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b08b      	sub	sp, #44	@ 0x2c
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
	//UpdateTime();
	//dt = GetDeltaTime();
	if(handler->ball_detected ==0){
 8001996:	4b77      	ldr	r3, [pc, #476]	@ (8001b74 <Control_PID+0x1ec>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800199e:	f083 0301 	eor.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <Control_PID+0x42>
		pid->derivative=0;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
		pid->integral=0;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
		pid->prop=0;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
		*output=0;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
		return;
 80019c8:	e0d1      	b.n	8001b6e <Control_PID+0x1e6>
	}
	dt=handler->dt;
 80019ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001b74 <Control_PID+0x1ec>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	4a69      	ldr	r2, [pc, #420]	@ (8001b78 <Control_PID+0x1f0>)
 80019d2:	6013      	str	r3, [r2, #0]
	float error= setpoint-measurement;
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f7ff f8ca 	bl	8000b70 <__aeabi_fsub>
 80019dc:	4603      	mov	r3, r0
 80019de:	623b      	str	r3, [r7, #32]

	float prop=pid->kp*error;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	6a38      	ldr	r0, [r7, #32]
 80019e8:	f7ff f9cc 	bl	8000d84 <__aeabi_fmul>
 80019ec:	4603      	mov	r3, r0
 80019ee:	61fb      	str	r3, [r7, #28]
	pid->prop=prop;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	619a      	str	r2, [r3, #24]
	float derivative=(pid->kd) * (-(pid->current_V));
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f7ff f9bd 	bl	8000d84 <__aeabi_fmul>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
	if((newsetpoint && trajectoryMode==MODE_POINT) ){
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001b7c <Control_PID+0x1f4>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <Control_PID+0x9e>
 8001a16:	4b5a      	ldr	r3, [pc, #360]	@ (8001b80 <Control_PID+0x1f8>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <Control_PID+0x9e>
		pid->integral=0;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]

	}
	if ((fabs(error) < tolerance)) {
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a2c:	4a55      	ldr	r2, [pc, #340]	@ (8001b84 <Control_PID+0x1fc>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fb44 	bl	80010c0 <__aeabi_fcmplt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <Control_PID+0xc6>
//			pid->integral = 0.0f;
			derivative*=0.5;
 8001a3e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001a42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a44:	f7ff f99e 	bl	8000d84 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4c:	e018      	b.n	8001a80 <Control_PID+0xf8>
//			pid->prop=0;
//			*output=0;
//			return;
		}
		else{
			pid->integral+=(pid->ki)*(error)*dt;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68dc      	ldr	r4, [r3, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f993 	bl	8000d84 <__aeabi_fmul>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b45      	ldr	r3, [pc, #276]	@ (8001b78 <Control_PID+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f7ff f98b 	bl	8000d84 <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff f87e 	bl	8000b74 <__addsf3>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	60da      	str	r2, [r3, #12]
		}
    float integral_limit = 23.5f;
 8001a80:	4b41      	ldr	r3, [pc, #260]	@ (8001b88 <Control_PID+0x200>)
 8001a82:	61bb      	str	r3, [r7, #24]
    if (pid->integral > integral_limit) pid->integral = integral_limit;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	69b8      	ldr	r0, [r7, #24]
 8001a8c:	f7ff fb18 	bl	80010c0 <__aeabi_fcmplt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <Control_PID+0x114>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]
    if (pid->integral < -integral_limit) pid->integral = -integral_limit;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f7ff fb09 	bl	80010c0 <__aeabi_fcmplt>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <Control_PID+0x136>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	60da      	str	r2, [r3, #12]
	pid->derivative=derivative;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac2:	611a      	str	r2, [r3, #16]


	pid->prev_error=error;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a3a      	ldr	r2, [r7, #32]
 8001ac8:	631a      	str	r2, [r3, #48]	@ 0x30

	float output_raw=prop+pid->integral+derivative;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	69f9      	ldr	r1, [r7, #28]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f84f 	bl	8000b74 <__addsf3>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001adc:	f7ff f84a 	bl	8000b74 <__addsf3>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	617b      	str	r3, [r7, #20]
	// EMA
	*output = ALPHA * pid->prev_output + (1 - ALPHA) * output_raw;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	4a28      	ldr	r2, [pc, #160]	@ (8001b8c <Control_PID+0x204>)
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f948 	bl	8000d84 <__aeabi_fmul>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461c      	mov	r4, r3
 8001af8:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <Control_PID+0x204>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001b02:	f7ff f835 	bl	8000b70 <__aeabi_fsub>
 8001b06:	4603      	mov	r3, r0
 8001b08:	6979      	ldr	r1, [r7, #20]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f93a 	bl	8000d84 <__aeabi_fmul>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4619      	mov	r1, r3
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff f82d 	bl	8000b74 <__addsf3>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
	pid->prev_output=*output;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->derivative=ALPHA * pid->prev_derivative + (1 - ALPHA) * pid->derivative;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a17      	ldr	r2, [pc, #92]	@ (8001b8c <Control_PID+0x204>)
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff f925 	bl	8000d84 <__aeabi_fmul>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461c      	mov	r4, r3
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <Control_PID+0x204>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001b48:	f7ff f812 	bl	8000b70 <__aeabi_fsub>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f7ff f914 	bl	8000d84 <__aeabi_fmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff f807 	bl	8000b74 <__addsf3>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
}
 8001b6e:	372c      	adds	r7, #44	@ 0x2c
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	20000380 	.word	0x20000380
 8001b78:	2000038c 	.word	0x2000038c
 8001b7c:	2000053c 	.word	0x2000053c
 8001b80:	20000390 	.word	0x20000390
 8001b84:	20000018 	.word	0x20000018
 8001b88:	41bc0000 	.word	0x41bc0000
 8001b8c:	20000014 	.word	0x20000014

08001b90 <Control_Loop>:
    .b1 = -41.8f,
    .a1 = 0.6f,
    .x_prev = 0,
    .y_prev = 0
};
void Control_Loop(){
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	b0a4      	sub	sp, #144	@ 0x90
 8001b96:	af14      	add	r7, sp, #80	@ 0x50
	ControlMode controlMode=handler->controlMode;
 8001b98:	4b78      	ldr	r3, [pc, #480]	@ (8001d7c <Control_Loop+0x1ec>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001ba0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	UpdateTime();
 8001ba4:	f7ff fb70 	bl	8001288 <UpdateTime>
	float servo_X_output=0;
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	@ 0x34
	float servo_Y_output=0;
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30
	Control_update_parameters();
 8001bb4:	f000 f964 	bl	8001e80 <Control_update_parameters>
	switch(controlMode){
 8001bb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d859      	bhi.n	8001c74 <Control_Loop+0xe4>
 8001bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <Control_Loop+0x38>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001bff 	.word	0x08001bff
 8001bd0:	08001c25 	.word	0x08001c25
 8001bd4:	08001c4f 	.word	0x08001c4f
		case MODE_PID:
		{
			Control_PID(&PID_X, desired_X, current_X,&servo_X_output);
 8001bd8:	4b69      	ldr	r3, [pc, #420]	@ (8001d80 <Control_Loop+0x1f0>)
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	4b69      	ldr	r3, [pc, #420]	@ (8001d84 <Control_Loop+0x1f4>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001be4:	4868      	ldr	r0, [pc, #416]	@ (8001d88 <Control_Loop+0x1f8>)
 8001be6:	f7ff fecf 	bl	8001988 <Control_PID>
			Control_PID(&PID_Y, desired_Y, current_Y,&servo_Y_output);
 8001bea:	4b68      	ldr	r3, [pc, #416]	@ (8001d8c <Control_Loop+0x1fc>)
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	4b68      	ldr	r3, [pc, #416]	@ (8001d90 <Control_Loop+0x200>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bf6:	4867      	ldr	r0, [pc, #412]	@ (8001d94 <Control_Loop+0x204>)
 8001bf8:	f7ff fec6 	bl	8001988 <Control_PID>

			break;
 8001bfc:	e03b      	b.n	8001c76 <Control_Loop+0xe6>
		}
		case MODE_PV:
		{
			Control_PID2(&PID_X, desired_X, current_X,&servo_X_output);
 8001bfe:	4b60      	ldr	r3, [pc, #384]	@ (8001d80 <Control_Loop+0x1f0>)
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	4b60      	ldr	r3, [pc, #384]	@ (8001d84 <Control_Loop+0x1f4>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c0a:	485f      	ldr	r0, [pc, #380]	@ (8001d88 <Control_Loop+0x1f8>)
 8001c0c:	f7ff fcb4 	bl	8001578 <Control_PID2>
			Control_PID2(&PID_Y, desired_Y, current_Y,&servo_Y_output);
 8001c10:	4b5e      	ldr	r3, [pc, #376]	@ (8001d8c <Control_Loop+0x1fc>)
 8001c12:	6819      	ldr	r1, [r3, #0]
 8001c14:	4b5e      	ldr	r3, [pc, #376]	@ (8001d90 <Control_Loop+0x200>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c1c:	485d      	ldr	r0, [pc, #372]	@ (8001d94 <Control_Loop+0x204>)
 8001c1e:	f7ff fcab 	bl	8001578 <Control_PID2>

			break;
 8001c22:	e028      	b.n	8001c76 <Control_Loop+0xe6>
		}
		case LQR:
		{
            const float dt = handler->dt;
 8001c24:	4b55      	ldr	r3, [pc, #340]	@ (8001d7c <Control_Loop+0x1ec>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2a:	63bb      	str	r3, [r7, #56]	@ 0x38

            Control_LQR(current_state, desired_state, u);
 8001c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8001d98 <Control_Loop+0x208>)
 8001c2e:	495b      	ldr	r1, [pc, #364]	@ (8001d9c <Control_Loop+0x20c>)
 8001c30:	485b      	ldr	r0, [pc, #364]	@ (8001da0 <Control_Loop+0x210>)
 8001c32:	f7ff fc07 	bl	8001444 <Control_LQR>

            Control_LQR_UpdateState(current_state, u, dt);
 8001c36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c38:	4957      	ldr	r1, [pc, #348]	@ (8001d98 <Control_Loop+0x208>)
 8001c3a:	4859      	ldr	r0, [pc, #356]	@ (8001da0 <Control_Loop+0x210>)
 8001c3c:	f7ff fb6a 	bl	8001314 <Control_LQR_UpdateState>

            servo_X_output = u[0];
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <Control_Loop+0x208>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	637b      	str	r3, [r7, #52]	@ 0x34
            servo_Y_output = u[1];
 8001c46:	4b54      	ldr	r3, [pc, #336]	@ (8001d98 <Control_Loop+0x208>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8001c4c:	e013      	b.n	8001c76 <Control_Loop+0xe6>
		}
		case MODE_CUSTOM2:
		{

			LeadCompensator_Update(&myLead_X,desired_X, current_X,&servo_X_output);
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d80 <Control_Loop+0x1f0>)
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	4b4c      	ldr	r3, [pc, #304]	@ (8001d84 <Control_Loop+0x1f4>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c5a:	4852      	ldr	r0, [pc, #328]	@ (8001da4 <Control_Loop+0x214>)
 8001c5c:	f000 f8ac 	bl	8001db8 <LeadCompensator_Update>
			LeadCompensator_Update(&myLead_Y,desired_Y, current_Y,&servo_Y_output);
 8001c60:	4b4a      	ldr	r3, [pc, #296]	@ (8001d8c <Control_Loop+0x1fc>)
 8001c62:	6819      	ldr	r1, [r3, #0]
 8001c64:	4b4a      	ldr	r3, [pc, #296]	@ (8001d90 <Control_Loop+0x200>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c6c:	484e      	ldr	r0, [pc, #312]	@ (8001da8 <Control_Loop+0x218>)
 8001c6e:	f000 f8a3 	bl	8001db8 <LeadCompensator_Update>
			break;
 8001c72:	e000      	b.n	8001c76 <Control_Loop+0xe6>
		}
		default:
		     break;
 8001c74:	bf00      	nop
	}
	Servo_X_SetAngle(servo_X_output);
 8001c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 f967 	bl	8002f4c <Servo_X_SetAngle>
	Servo_Y_SetAngle(servo_Y_output);
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 f9cb 	bl	800301c <Servo_Y_SetAngle>
	snprintf(debug_buf2, sizeof(debug_buf2),
 8001c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fbcd 	bl	8000428 <__aeabi_f2d>
 8001c8e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fbc7 	bl	8000428 <__aeabi_f2d>
 8001c9a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <Control_Loop+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fbc0 	bl	8000428 <__aeabi_f2d>
 8001ca8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001cac:	4b37      	ldr	r3, [pc, #220]	@ (8001d8c <Control_Loop+0x1fc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fbb9 	bl	8000428 <__aeabi_f2d>
 8001cb6:	e9c7 0104 	strd	r0, r1, [r7, #16]
	    "{\"Servo_X\":%.2f,\"Servo_Y\":%.2f,\"desired_X\":%.2f,\"desired_Y\":%.2f,"
	    "\"kp_x\":%.2f,\"kd_x\":%.2f,\"ki_x\":%.2f,"
	    "\"kp_y\":%.2f,\"kd_y\":%.2f,\"ki_y\":%.2f}",
		servo_X_output, servo_X_output,
	    desired_X, desired_Y,
	    PID_X.prop, PID_X.derivative, PID_X.integral,
 8001cba:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <Control_Loop+0x1f8>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
	snprintf(debug_buf2, sizeof(debug_buf2),
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fbb2 	bl	8000428 <__aeabi_f2d>
 8001cc4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	    PID_X.prop, PID_X.derivative, PID_X.integral,
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d88 <Control_Loop+0x1f8>)
 8001cca:	691b      	ldr	r3, [r3, #16]
	snprintf(debug_buf2, sizeof(debug_buf2),
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fbab 	bl	8000428 <__aeabi_f2d>
 8001cd2:	e9c7 0100 	strd	r0, r1, [r7]
	    PID_X.prop, PID_X.derivative, PID_X.integral,
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d88 <Control_Loop+0x1f8>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
	snprintf(debug_buf2, sizeof(debug_buf2),
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fba4 	bl	8000428 <__aeabi_f2d>
 8001ce0:	4682      	mov	sl, r0
 8001ce2:	468b      	mov	fp, r1
	    PID_Y.prop, PID_Y.derivative, PID_Y.integral);
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <Control_Loop+0x204>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
	snprintf(debug_buf2, sizeof(debug_buf2),
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fb9d 	bl	8000428 <__aeabi_f2d>
 8001cee:	4680      	mov	r8, r0
 8001cf0:	4689      	mov	r9, r1
	    PID_Y.prop, PID_Y.derivative, PID_Y.integral);
 8001cf2:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <Control_Loop+0x204>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
	snprintf(debug_buf2, sizeof(debug_buf2),
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fb96 	bl	8000428 <__aeabi_f2d>
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	460d      	mov	r5, r1
	    PID_Y.prop, PID_Y.derivative, PID_Y.integral);
 8001d00:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <Control_Loop+0x204>)
 8001d02:	68db      	ldr	r3, [r3, #12]
	snprintf(debug_buf2, sizeof(debug_buf2),
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fb8f 	bl	8000428 <__aeabi_f2d>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8001d12:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001d16:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001d1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001d1e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d22:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 8001d26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8001d2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d32:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001d36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001d3e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d42:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001d46:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001d4a:	e9cd 3400 	strd	r3, r4, [sp]
 8001d4e:	4a17      	ldr	r2, [pc, #92]	@ (8001dac <Control_Loop+0x21c>)
 8001d50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d54:	4816      	ldr	r0, [pc, #88]	@ (8001db0 <Control_Loop+0x220>)
 8001d56:	f005 f825 	bl	8006da4 <sniprintf>

	UART_sendString(debug_buf2);
 8001d5a:	4815      	ldr	r0, [pc, #84]	@ (8001db0 <Control_Loop+0x220>)
 8001d5c:	f001 f870 	bl	8002e40 <UART_sendString>
	UART_sendString("\r\n");
 8001d60:	4814      	ldr	r0, [pc, #80]	@ (8001db4 <Control_Loop+0x224>)
 8001d62:	f001 f86d 	bl	8002e40 <UART_sendString>
	memset(debug_buf2, 0, sizeof(debug_buf2));
 8001d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4810      	ldr	r0, [pc, #64]	@ (8001db0 <Control_Loop+0x220>)
 8001d6e:	f005 f892 	bl	8006e96 <memset>
	//HAL_Delay(17);

}
 8001d72:	bf00      	nop
 8001d74:	3740      	adds	r7, #64	@ 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d7c:	20000380 	.word	0x20000380
 8001d80:	20000384 	.word	0x20000384
 8001d84:	20000394 	.word	0x20000394
 8001d88:	200002c0 	.word	0x200002c0
 8001d8c:	20000388 	.word	0x20000388
 8001d90:	20000398 	.word	0x20000398
 8001d94:	20000320 	.word	0x20000320
 8001d98:	200004c4 	.word	0x200004c4
 8001d9c:	200004b4 	.word	0x200004b4
 8001da0:	200004a4 	.word	0x200004a4
 8001da4:	2000009c 	.word	0x2000009c
 8001da8:	200000b0 	.word	0x200000b0
 8001dac:	08009fa0 	.word	0x08009fa0
 8001db0:	200003a4 	.word	0x200003a4
 8001db4:	0800a02c 	.word	0x0800a02c

08001db8 <LeadCompensator_Update>:
void LeadCompensator_Update(LeadFilter* comp, float setpoint, float measurement, float* output) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
	float input=setpoint - measurement;
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	68b8      	ldr	r0, [r7, #8]
 8001dca:	f7fe fed1 	bl	8000b70 <__aeabi_fsub>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	617b      	str	r3, [r7, #20]
    *output = comp->b0 * input + comp->b1 * comp->x_prev - comp->a1 * comp->y_prev;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6979      	ldr	r1, [r7, #20]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ffd3 	bl	8000d84 <__aeabi_fmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461c      	mov	r4, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f7fe ffc9 	bl	8000d84 <__aeabi_fmul>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4619      	mov	r1, r3
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7fe febc 	bl	8000b74 <__addsf3>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461c      	mov	r4, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f7fe ffba 	bl	8000d84 <__aeabi_fmul>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4619      	mov	r1, r3
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7fe feab 	bl	8000b70 <__aeabi_fsub>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	601a      	str	r2, [r3, #0]
    *output = ALPHA * comp->y_prev + (1.0f - ALPHA) * (*output);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	4a15      	ldr	r2, [pc, #84]	@ (8001e7c <LeadCompensator_Update+0xc4>)
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ffa9 	bl	8000d84 <__aeabi_fmul>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461c      	mov	r4, r3
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <LeadCompensator_Update+0xc4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001e40:	f7fe fe96 	bl	8000b70 <__aeabi_fsub>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f7fe ff98 	bl	8000d84 <__aeabi_fmul>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4619      	mov	r1, r3
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7fe fe8b 	bl	8000b74 <__addsf3>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
    comp->x_prev = input;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	60da      	str	r2, [r3, #12]
    comp->y_prev = *output;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	611a      	str	r2, [r3, #16]
}
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	20000014 	.word	0x20000014

08001e80 <Control_update_parameters>:
float prev_setpoint_x=0.0f;
float prev_setpoint_y=0.0f;

void Control_update_parameters(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	if(desired_X!=prev_setpoint_x || desired_Y!=prev_setpoint_y){
 8001e84:	4b85      	ldr	r3, [pc, #532]	@ (800209c <Control_update_parameters+0x21c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a85      	ldr	r2, [pc, #532]	@ (80020a0 <Control_update_parameters+0x220>)
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f90c 	bl	80010ac <__aeabi_fcmpeq>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <Control_update_parameters+0x30>
 8001e9a:	4b82      	ldr	r3, [pc, #520]	@ (80020a4 <Control_update_parameters+0x224>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a82      	ldr	r2, [pc, #520]	@ (80020a8 <Control_update_parameters+0x228>)
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f901 	bl	80010ac <__aeabi_fcmpeq>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <Control_update_parameters+0x38>
		newsetpoint=true;
 8001eb0:	4b7e      	ldr	r3, [pc, #504]	@ (80020ac <Control_update_parameters+0x22c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e002      	b.n	8001ebe <Control_update_parameters+0x3e>
	}
	else{
		newsetpoint=false;
 8001eb8:	4b7c      	ldr	r3, [pc, #496]	@ (80020ac <Control_update_parameters+0x22c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
	}
	prev_setpoint_x=desired_X;
 8001ebe:	4b77      	ldr	r3, [pc, #476]	@ (800209c <Control_update_parameters+0x21c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a77      	ldr	r2, [pc, #476]	@ (80020a0 <Control_update_parameters+0x220>)
 8001ec4:	6013      	str	r3, [r2, #0]
	prev_setpoint_y=desired_Y;
 8001ec6:	4b77      	ldr	r3, [pc, #476]	@ (80020a4 <Control_update_parameters+0x224>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a77      	ldr	r2, [pc, #476]	@ (80020a8 <Control_update_parameters+0x228>)
 8001ecc:	6013      	str	r3, [r2, #0]
	trajectoryMode = handler->trajectoryMode;
 8001ece:	4b78      	ldr	r3, [pc, #480]	@ (80020b0 <Control_update_parameters+0x230>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8001ed6:	4b77      	ldr	r3, [pc, #476]	@ (80020b4 <Control_update_parameters+0x234>)
 8001ed8:	701a      	strb	r2, [r3, #0]
	if (trajectoryMode == MODE_POINT || trajectoryMode == MODE_PATH) {
 8001eda:	4b76      	ldr	r3, [pc, #472]	@ (80020b4 <Control_update_parameters+0x234>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <Control_update_parameters+0x6a>
 8001ee2:	4b74      	ldr	r3, [pc, #464]	@ (80020b4 <Control_update_parameters+0x234>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d119      	bne.n	8001f1e <Control_update_parameters+0x9e>
		desired_X = handler->desiredX;
 8001eea:	4b71      	ldr	r3, [pc, #452]	@ (80020b0 <Control_update_parameters+0x230>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800209c <Control_update_parameters+0x21c>)
 8001ef2:	6013      	str	r3, [r2, #0]
		desired_Y = handler->desiredY;
 8001ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <Control_update_parameters+0x230>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4a6a      	ldr	r2, [pc, #424]	@ (80020a4 <Control_update_parameters+0x224>)
 8001efc:	6013      	str	r3, [r2, #0]
		PID_X.desired_V = 0;
 8001efe:	4b6e      	ldr	r3, [pc, #440]	@ (80020b8 <Control_update_parameters+0x238>)
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
		PID_Y.desired_V = 0;
 8001f06:	4b6d      	ldr	r3, [pc, #436]	@ (80020bc <Control_update_parameters+0x23c>)
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
		ctrl_x.desired_V = 0;
 8001f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80020c0 <Control_update_parameters+0x240>)
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
		ctrl_y.desired_V = 0;
 8001f16:	4b6b      	ldr	r3, [pc, #428]	@ (80020c4 <Control_update_parameters+0x244>)
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
	}

	tolerance = handler->tolerance;
 8001f1e:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <Control_update_parameters+0x230>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	@ (80020c8 <Control_update_parameters+0x248>)
 8001f26:	6013      	str	r3, [r2, #0]
	current_X = handler->currentX;
 8001f28:	4b61      	ldr	r3, [pc, #388]	@ (80020b0 <Control_update_parameters+0x230>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a67      	ldr	r2, [pc, #412]	@ (80020cc <Control_update_parameters+0x24c>)
 8001f30:	6013      	str	r3, [r2, #0]
	current_Y = handler->currentY;
 8001f32:	4b5f      	ldr	r3, [pc, #380]	@ (80020b0 <Control_update_parameters+0x230>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f38:	4a65      	ldr	r2, [pc, #404]	@ (80020d0 <Control_update_parameters+0x250>)
 8001f3a:	6013      	str	r3, [r2, #0]

	if(handler->controlMode==MODE_PID){
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80020b0 <Control_update_parameters+0x230>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 8081 	bne.w	800204c <Control_update_parameters+0x1cc>
		PID_X.kp = KP;
 8001f4a:	4b62      	ldr	r3, [pc, #392]	@ (80020d4 <Control_update_parameters+0x254>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5a      	ldr	r2, [pc, #360]	@ (80020b8 <Control_update_parameters+0x238>)
 8001f50:	6013      	str	r3, [r2, #0]
		PID_X.ki = KI;
 8001f52:	4b61      	ldr	r3, [pc, #388]	@ (80020d8 <Control_update_parameters+0x258>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a58      	ldr	r2, [pc, #352]	@ (80020b8 <Control_update_parameters+0x238>)
 8001f58:	6053      	str	r3, [r2, #4]
		PID_X.kd = KD;
 8001f5a:	4b60      	ldr	r3, [pc, #384]	@ (80020dc <Control_update_parameters+0x25c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a56      	ldr	r2, [pc, #344]	@ (80020b8 <Control_update_parameters+0x238>)
 8001f60:	6093      	str	r3, [r2, #8]
		PID_Y.kp = PV_KP;
 8001f62:	4b5f      	ldr	r3, [pc, #380]	@ (80020e0 <Control_update_parameters+0x260>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a55      	ldr	r2, [pc, #340]	@ (80020bc <Control_update_parameters+0x23c>)
 8001f68:	6013      	str	r3, [r2, #0]
		PID_Y.ki = KI;
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <Control_update_parameters+0x258>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a53      	ldr	r2, [pc, #332]	@ (80020bc <Control_update_parameters+0x23c>)
 8001f70:	6053      	str	r3, [r2, #4]
		PID_Y.kd = PV_KV;
 8001f72:	4b5c      	ldr	r3, [pc, #368]	@ (80020e4 <Control_update_parameters+0x264>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a51      	ldr	r2, [pc, #324]	@ (80020bc <Control_update_parameters+0x23c>)
 8001f78:	6093      	str	r3, [r2, #8]
		PV_KP = (handler->PV_KP < 0.0f) ? PV_KP : handler->PV_KP;
 8001f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80020b0 <Control_update_parameters+0x230>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	f04f 0100 	mov.w	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f89b 	bl	80010c0 <__aeabi_fcmplt>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <Control_update_parameters+0x116>
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <Control_update_parameters+0x260>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	e002      	b.n	8001f9c <Control_update_parameters+0x11c>
 8001f96:	4b46      	ldr	r3, [pc, #280]	@ (80020b0 <Control_update_parameters+0x230>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9c:	4a50      	ldr	r2, [pc, #320]	@ (80020e0 <Control_update_parameters+0x260>)
 8001f9e:	6013      	str	r3, [r2, #0]
		PV_KV = (handler->PV_KV < 0.0f) ? PV_KV : handler->PV_KV;
 8001fa0:	4b43      	ldr	r3, [pc, #268]	@ (80020b0 <Control_update_parameters+0x230>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f888 	bl	80010c0 <__aeabi_fcmplt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <Control_update_parameters+0x13c>
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <Control_update_parameters+0x264>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e002      	b.n	8001fc2 <Control_update_parameters+0x142>
 8001fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80020b0 <Control_update_parameters+0x230>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc2:	4a48      	ldr	r2, [pc, #288]	@ (80020e4 <Control_update_parameters+0x264>)
 8001fc4:	6013      	str	r3, [r2, #0]
		KP = (handler->PID_KP < 0.0f) ? KP : handler->PID_KP;
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <Control_update_parameters+0x230>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fcc:	f04f 0100 	mov.w	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f875 	bl	80010c0 <__aeabi_fcmplt>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <Control_update_parameters+0x162>
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <Control_update_parameters+0x254>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	e002      	b.n	8001fe8 <Control_update_parameters+0x168>
 8001fe2:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <Control_update_parameters+0x230>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe8:	4a3a      	ldr	r2, [pc, #232]	@ (80020d4 <Control_update_parameters+0x254>)
 8001fea:	6013      	str	r3, [r2, #0]
		KI = (handler->PID_KI < 0.0f) ? KI : handler->PID_KI;
 8001fec:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <Control_update_parameters+0x230>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f862 	bl	80010c0 <__aeabi_fcmplt>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <Control_update_parameters+0x188>
 8002002:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <Control_update_parameters+0x258>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e002      	b.n	800200e <Control_update_parameters+0x18e>
 8002008:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <Control_update_parameters+0x230>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200e:	4a32      	ldr	r2, [pc, #200]	@ (80020d8 <Control_update_parameters+0x258>)
 8002010:	6013      	str	r3, [r2, #0]
		KD = (handler->PID_KD < 0.0f) ? KD : handler->PID_KD;
 8002012:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <Control_update_parameters+0x230>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f84f 	bl	80010c0 <__aeabi_fcmplt>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <Control_update_parameters+0x1ae>
 8002028:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <Control_update_parameters+0x25c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e002      	b.n	8002034 <Control_update_parameters+0x1b4>
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <Control_update_parameters+0x230>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a29      	ldr	r2, [pc, #164]	@ (80020dc <Control_update_parameters+0x25c>)
 8002036:	6013      	str	r3, [r2, #0]
		PID_X.current_V = handler->current_velocity_X;
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <Control_update_parameters+0x230>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <Control_update_parameters+0x238>)
 8002040:	6253      	str	r3, [r2, #36]	@ 0x24
		PID_Y.current_V = handler->current_velocity_Y;
 8002042:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <Control_update_parameters+0x230>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <Control_update_parameters+0x23c>)
 800204a:	6253      	str	r3, [r2, #36]	@ 0x24
	}
	if(handler->controlMode==MODE_PV){
 800204c:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <Control_update_parameters+0x230>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002054:	2b01      	cmp	r3, #1
 8002056:	d160      	bne.n	800211a <Control_update_parameters+0x29a>
		PV_KP = (handler->PV_KP < 0.0f) ? PV_KP : handler->PV_KP;
 8002058:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <Control_update_parameters+0x230>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f82c 	bl	80010c0 <__aeabi_fcmplt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <Control_update_parameters+0x1f4>
 800206e:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <Control_update_parameters+0x260>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	e002      	b.n	800207a <Control_update_parameters+0x1fa>
 8002074:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <Control_update_parameters+0x230>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <Control_update_parameters+0x260>)
 800207c:	6013      	str	r3, [r2, #0]
		PV_KV = (handler->PV_KV < 0.0f) ? PV_KV : handler->PV_KV;
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <Control_update_parameters+0x230>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f819 	bl	80010c0 <__aeabi_fcmplt>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d029      	beq.n	80020e8 <Control_update_parameters+0x268>
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <Control_update_parameters+0x264>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	e029      	b.n	80020ee <Control_update_parameters+0x26e>
 800209a:	bf00      	nop
 800209c:	20000384 	.word	0x20000384
 80020a0:	20000540 	.word	0x20000540
 80020a4:	20000388 	.word	0x20000388
 80020a8:	20000544 	.word	0x20000544
 80020ac:	2000053c 	.word	0x2000053c
 80020b0:	20000380 	.word	0x20000380
 80020b4:	20000390 	.word	0x20000390
 80020b8:	200002c0 	.word	0x200002c0
 80020bc:	20000320 	.word	0x20000320
 80020c0:	20000504 	.word	0x20000504
 80020c4:	20000520 	.word	0x20000520
 80020c8:	20000018 	.word	0x20000018
 80020cc:	20000394 	.word	0x20000394
 80020d0:	20000398 	.word	0x20000398
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000004 	.word	0x20000004
 80020dc:	20000008 	.word	0x20000008
 80020e0:	2000000c 	.word	0x2000000c
 80020e4:	20000010 	.word	0x20000010
 80020e8:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <Control_update_parameters+0x2f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	4a23      	ldr	r2, [pc, #140]	@ (800217c <Control_update_parameters+0x2fc>)
 80020f0:	6013      	str	r3, [r2, #0]
		ctrl_x.current_V = handler->current_velocity_X;
 80020f2:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <Control_update_parameters+0x2f8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a21      	ldr	r2, [pc, #132]	@ (8002180 <Control_update_parameters+0x300>)
 80020fa:	6153      	str	r3, [r2, #20]
		ctrl_y.current_V = handler->current_velocity_Y;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <Control_update_parameters+0x2f8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a20      	ldr	r2, [pc, #128]	@ (8002184 <Control_update_parameters+0x304>)
 8002104:	6153      	str	r3, [r2, #20]
		ctrl_x.desired_V = handler->desired_velocity_X;
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <Control_update_parameters+0x2f8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <Control_update_parameters+0x300>)
 800210e:	6113      	str	r3, [r2, #16]
		ctrl_y.desired_V = handler->desired_velocity_Y;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <Control_update_parameters+0x2f8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4a1b      	ldr	r2, [pc, #108]	@ (8002184 <Control_update_parameters+0x304>)
 8002118:	6113      	str	r3, [r2, #16]
	}

	if(handler->controlMode==LQR){
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <Control_update_parameters+0x2f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002122:	2b02      	cmp	r3, #2
 8002124:	d121      	bne.n	800216a <Control_update_parameters+0x2ea>
		current_state[0] = current_X;
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <Control_update_parameters+0x308>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a18      	ldr	r2, [pc, #96]	@ (800218c <Control_update_parameters+0x30c>)
 800212c:	6013      	str	r3, [r2, #0]
		current_state[1] = handler->current_velocity_X;
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <Control_update_parameters+0x2f8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a15      	ldr	r2, [pc, #84]	@ (800218c <Control_update_parameters+0x30c>)
 8002136:	6053      	str	r3, [r2, #4]
		current_state[2] = current_Y;
 8002138:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <Control_update_parameters+0x310>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a13      	ldr	r2, [pc, #76]	@ (800218c <Control_update_parameters+0x30c>)
 800213e:	6093      	str	r3, [r2, #8]
		current_state[3] = handler->current_velocity_Y;
 8002140:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <Control_update_parameters+0x2f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	4a11      	ldr	r2, [pc, #68]	@ (800218c <Control_update_parameters+0x30c>)
 8002148:	60d3      	str	r3, [r2, #12]

		desired_state[0] = desired_X;
 800214a:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <Control_update_parameters+0x314>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <Control_update_parameters+0x318>)
 8002150:	6013      	str	r3, [r2, #0]
		desired_state[1] = 0;
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <Control_update_parameters+0x318>)
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
		desired_state[2] = desired_Y;
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <Control_update_parameters+0x31c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <Control_update_parameters+0x318>)
 8002160:	6093      	str	r3, [r2, #8]
		desired_state[3] = 0;
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <Control_update_parameters+0x318>)
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
	}
	ALPHA = handler->ALPHA;
 800216a:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <Control_update_parameters+0x2f8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002170:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <Control_update_parameters+0x320>)
 8002172:	6013      	str	r3, [r2, #0]
	// Flash_Write_Control_Parameters();
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000380 	.word	0x20000380
 800217c:	20000010 	.word	0x20000010
 8002180:	20000504 	.word	0x20000504
 8002184:	20000520 	.word	0x20000520
 8002188:	20000394 	.word	0x20000394
 800218c:	200004a4 	.word	0x200004a4
 8002190:	20000398 	.word	0x20000398
 8002194:	20000384 	.word	0x20000384
 8002198:	200004b4 	.word	0x200004b4
 800219c:	20000388 	.word	0x20000388
 80021a0:	20000014 	.word	0x20000014

080021a4 <generate_circle_points>:

static uint32_t last_update_time = 0;
static float angle_rad = 0.0f;

void generate_circle_points() {
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80021aa:	f001 fb05 	bl	80037b8 <HAL_GetTick>
 80021ae:	60f8      	str	r0, [r7, #12]
    uint32_t elapsed_time = current_time - last_update_time;
 80021b0:	4b42      	ldr	r3, [pc, #264]	@ (80022bc <generate_circle_points+0x118>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	60bb      	str	r3, [r7, #8]

    if (elapsed_time >= (10 * (1.0f - handler->trajectroy_speed))) {
 80021ba:	68b8      	ldr	r0, [r7, #8]
 80021bc:	f7fe fd8a 	bl	8000cd4 <__aeabi_ui2f>
 80021c0:	4604      	mov	r4, r0
 80021c2:	4b3f      	ldr	r3, [pc, #252]	@ (80022c0 <generate_circle_points+0x11c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80021ce:	f7fe fccf 	bl	8000b70 <__aeabi_fsub>
 80021d2:	4603      	mov	r3, r0
 80021d4:	493b      	ldr	r1, [pc, #236]	@ (80022c4 <generate_circle_points+0x120>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fdd4 	bl	8000d84 <__aeabi_fmul>
 80021dc:	4603      	mov	r3, r0
 80021de:	4619      	mov	r1, r3
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7fe ff81 	bl	80010e8 <__aeabi_fcmpge>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d100      	bne.n	80021ee <generate_circle_points+0x4a>

        desired_X = radius * cosf(angle_rad);
        desired_Y = radius * sinf(angle_rad);
        Control_Loop();
    }
}
 80021ec:	e061      	b.n	80022b2 <generate_circle_points+0x10e>
        last_update_time = current_time;
 80021ee:	4a33      	ldr	r2, [pc, #204]	@ (80022bc <generate_circle_points+0x118>)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6013      	str	r3, [r2, #0]
        float radius = handler->trajectroy_scale * 12;
 80021f4:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <generate_circle_points+0x11c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fa:	4933      	ldr	r1, [pc, #204]	@ (80022c8 <generate_circle_points+0x124>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fdc1 	bl	8000d84 <__aeabi_fmul>
 8002202:	4603      	mov	r3, r0
 8002204:	607b      	str	r3, [r7, #4]
        float angular_speed = handler->trajectroy_base_speed * handler->trajectroy_speed;
 8002206:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <generate_circle_points+0x11c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800220c:	4b2c      	ldr	r3, [pc, #176]	@ (80022c0 <generate_circle_points+0x11c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7fe fdb5 	bl	8000d84 <__aeabi_fmul>
 800221a:	4603      	mov	r3, r0
 800221c:	603b      	str	r3, [r7, #0]
        angle_rad += angular_speed * (elapsed_time / 1000.0f);
 800221e:	68b8      	ldr	r0, [r7, #8]
 8002220:	f7fe fd58 	bl	8000cd4 <__aeabi_ui2f>
 8002224:	4603      	mov	r3, r0
 8002226:	4929      	ldr	r1, [pc, #164]	@ (80022cc <generate_circle_points+0x128>)
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fe5f 	bl	8000eec <__aeabi_fdiv>
 800222e:	4603      	mov	r3, r0
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fda6 	bl	8000d84 <__aeabi_fmul>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <generate_circle_points+0x12c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7fe fc96 	bl	8000b74 <__addsf3>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <generate_circle_points+0x12c>)
 800224e:	601a      	str	r2, [r3, #0]
        if (angle_rad > 2 * 3.14f) {
 8002250:	4b1f      	ldr	r3, [pc, #124]	@ (80022d0 <generate_circle_points+0x12c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	491f      	ldr	r1, [pc, #124]	@ (80022d4 <generate_circle_points+0x130>)
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe ff50 	bl	80010fc <__aeabi_fcmpgt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <generate_circle_points+0xd2>
            angle_rad -= 2 * 3.14f;
 8002262:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <generate_circle_points+0x12c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	491b      	ldr	r1, [pc, #108]	@ (80022d4 <generate_circle_points+0x130>)
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fc81 	bl	8000b70 <__aeabi_fsub>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <generate_circle_points+0x12c>)
 8002274:	601a      	str	r2, [r3, #0]
        desired_X = radius * cosf(angle_rad);
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <generate_circle_points+0x12c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f006 ff0c 	bl	8009098 <cosf>
 8002280:	4603      	mov	r3, r0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fd7d 	bl	8000d84 <__aeabi_fmul>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <generate_circle_points+0x134>)
 8002290:	601a      	str	r2, [r3, #0]
        desired_Y = radius * sinf(angle_rad);
 8002292:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <generate_circle_points+0x12c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f006 ff36 	bl	8009108 <sinf>
 800229c:	4603      	mov	r3, r0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fd6f 	bl	8000d84 <__aeabi_fmul>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <generate_circle_points+0x138>)
 80022ac:	601a      	str	r2, [r3, #0]
        Control_Loop();
 80022ae:	f7ff fc6f 	bl	8001b90 <Control_Loop>
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000548 	.word	0x20000548
 80022c0:	20000380 	.word	0x20000380
 80022c4:	41200000 	.word	0x41200000
 80022c8:	41400000 	.word	0x41400000
 80022cc:	447a0000 	.word	0x447a0000
 80022d0:	2000054c 	.word	0x2000054c
 80022d4:	40c8f5c3 	.word	0x40c8f5c3
 80022d8:	20000384 	.word	0x20000384
 80022dc:	20000388 	.word	0x20000388

080022e0 <generate_infinity_points>:

void generate_infinity_points() {
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80022e6:	f001 fa67 	bl	80037b8 <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]
    uint32_t elapsed_time = current_time - last_update_time;
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <generate_infinity_points+0x130>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	60bb      	str	r3, [r7, #8]

    if (elapsed_time >= (10 * (1.0f - handler->trajectroy_speed))) {
 80022f6:	68b8      	ldr	r0, [r7, #8]
 80022f8:	f7fe fcec 	bl	8000cd4 <__aeabi_ui2f>
 80022fc:	4604      	mov	r4, r0
 80022fe:	4b45      	ldr	r3, [pc, #276]	@ (8002414 <generate_infinity_points+0x134>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800230a:	f7fe fc31 	bl	8000b70 <__aeabi_fsub>
 800230e:	4603      	mov	r3, r0
 8002310:	4941      	ldr	r1, [pc, #260]	@ (8002418 <generate_infinity_points+0x138>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fd36 	bl	8000d84 <__aeabi_fmul>
 8002318:	4603      	mov	r3, r0
 800231a:	4619      	mov	r1, r3
 800231c:	4620      	mov	r0, r4
 800231e:	f7fe fee3 	bl	80010e8 <__aeabi_fcmpge>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d100      	bne.n	800232a <generate_infinity_points+0x4a>

        desired_X = radius * sinf(angle_rad);
        desired_Y = radius * sinf(angle_rad) * cosf(angle_rad);
        Control_Loop();
    }
}
 8002328:	e06d      	b.n	8002406 <generate_infinity_points+0x126>
        last_update_time = current_time;
 800232a:	4a39      	ldr	r2, [pc, #228]	@ (8002410 <generate_infinity_points+0x130>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6013      	str	r3, [r2, #0]
        float radius = handler->trajectroy_scale * 12;
 8002330:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <generate_infinity_points+0x134>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002336:	4939      	ldr	r1, [pc, #228]	@ (800241c <generate_infinity_points+0x13c>)
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fd23 	bl	8000d84 <__aeabi_fmul>
 800233e:	4603      	mov	r3, r0
 8002340:	607b      	str	r3, [r7, #4]
        float angular_speed = handler->trajectroy_base_speed * handler->trajectroy_speed;
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <generate_infinity_points+0x134>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002348:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <generate_infinity_points+0x134>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7fe fd17 	bl	8000d84 <__aeabi_fmul>
 8002356:	4603      	mov	r3, r0
 8002358:	603b      	str	r3, [r7, #0]
        angle_rad += angular_speed * (elapsed_time / 1000.0f);
 800235a:	68b8      	ldr	r0, [r7, #8]
 800235c:	f7fe fcba 	bl	8000cd4 <__aeabi_ui2f>
 8002360:	4603      	mov	r3, r0
 8002362:	492f      	ldr	r1, [pc, #188]	@ (8002420 <generate_infinity_points+0x140>)
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fdc1 	bl	8000eec <__aeabi_fdiv>
 800236a:	4603      	mov	r3, r0
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fd08 	bl	8000d84 <__aeabi_fmul>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <generate_infinity_points+0x144>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f7fe fbf8 	bl	8000b74 <__addsf3>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <generate_infinity_points+0x144>)
 800238a:	601a      	str	r2, [r3, #0]
        if (angle_rad > 2 * 3.14f) {
 800238c:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <generate_infinity_points+0x144>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4925      	ldr	r1, [pc, #148]	@ (8002428 <generate_infinity_points+0x148>)
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe feb2 	bl	80010fc <__aeabi_fcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <generate_infinity_points+0xd2>
            angle_rad -= 2 * 3.14f;
 800239e:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <generate_infinity_points+0x144>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4921      	ldr	r1, [pc, #132]	@ (8002428 <generate_infinity_points+0x148>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fbe3 	bl	8000b70 <__aeabi_fsub>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <generate_infinity_points+0x144>)
 80023b0:	601a      	str	r2, [r3, #0]
        desired_X = radius * sinf(angle_rad);
 80023b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <generate_infinity_points+0x144>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f006 fea6 	bl	8009108 <sinf>
 80023bc:	4603      	mov	r3, r0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fcdf 	bl	8000d84 <__aeabi_fmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b18      	ldr	r3, [pc, #96]	@ (800242c <generate_infinity_points+0x14c>)
 80023cc:	601a      	str	r2, [r3, #0]
        desired_Y = radius * sinf(angle_rad) * cosf(angle_rad);
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <generate_infinity_points+0x144>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f006 fe98 	bl	8009108 <sinf>
 80023d8:	4603      	mov	r3, r0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fcd1 	bl	8000d84 <__aeabi_fmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461c      	mov	r4, r3
 80023e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <generate_infinity_points+0x144>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f006 fe54 	bl	8009098 <cosf>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4619      	mov	r1, r3
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7fe fcc5 	bl	8000d84 <__aeabi_fmul>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <generate_infinity_points+0x150>)
 8002400:	601a      	str	r2, [r3, #0]
        Control_Loop();
 8002402:	f7ff fbc5 	bl	8001b90 <Control_Loop>
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	20000548 	.word	0x20000548
 8002414:	20000380 	.word	0x20000380
 8002418:	41200000 	.word	0x41200000
 800241c:	41400000 	.word	0x41400000
 8002420:	447a0000 	.word	0x447a0000
 8002424:	2000054c 	.word	0x2000054c
 8002428:	40c8f5c3 	.word	0x40c8f5c3
 800242c:	20000384 	.word	0x20000384
 8002430:	20000388 	.word	0x20000388

08002434 <Control_Reset>:

void Control_Reset(){
 8002434:	b580      	push	{r7, lr}
 8002436:	b0b4      	sub	sp, #208	@ 0xd0
 8002438:	af00      	add	r7, sp, #0
    float kp = PID_X.kp;
 800243a:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <Control_Reset+0x7c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    float ki = PID_X.ki;
 8002442:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <Control_Reset+0x7c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    float kd = PID_X.kd;
 800244a:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <Control_Reset+0x7c>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    PID_X = (PIDController){
 8002452:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <Control_Reset+0x7c>)
 8002454:	4618      	mov	r0, r3
 8002456:	2360      	movs	r3, #96	@ 0x60
 8002458:	461a      	mov	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	f004 fd1b 	bl	8006e96 <memset>
 8002460:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <Control_Reset+0x7c>)
 8002462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <Control_Reset+0x7c>)
 800246a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800246e:	6053      	str	r3, [r2, #4]
 8002470:	4a0f      	ldr	r2, [pc, #60]	@ (80024b0 <Control_Reset+0x7c>)
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002476:	6093      	str	r3, [r2, #8]
        .desired_V = 0.0f,
        .current_V = 0.0f,
        .prev_output = 0.0f
    };

    PID_Y = (PIDController){
 8002478:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <Control_Reset+0x80>)
 800247a:	4618      	mov	r0, r3
 800247c:	2360      	movs	r3, #96	@ 0x60
 800247e:	461a      	mov	r2, r3
 8002480:	2100      	movs	r1, #0
 8002482:	f004 fd08 	bl	8006e96 <memset>
 8002486:	4a0b      	ldr	r2, [pc, #44]	@ (80024b4 <Control_Reset+0x80>)
 8002488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4a09      	ldr	r2, [pc, #36]	@ (80024b4 <Control_Reset+0x80>)
 8002490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002494:	6053      	str	r3, [r2, #4]
 8002496:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <Control_Reset+0x80>)
 8002498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800249c:	6093      	str	r3, [r2, #8]
            .tolerance = 0.0f,
            .desired_V = 0.0f,
            .current_V = 0.0f,
            .prev_output = 0.0f
        };
    Control_PV_Init();
 800249e:	f7fe fec1 	bl	8001224 <Control_PV_Init>
    LQR_Init(&ctrl);
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <Control_Reset+0x84>)
 80024a4:	f7fe ff04 	bl	80012b0 <LQR_Init>
}
 80024a8:	bf00      	nop
 80024aa:	37d0      	adds	r7, #208	@ 0xd0
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200002c0 	.word	0x200002c0
 80024b4:	20000320 	.word	0x20000320
 80024b8:	200004cc 	.word	0x200004cc

080024bc <DataHandler_Init>:


static void parseDataPacket(DataHandler* handler, uint8_t* data);
static void handleError(DataHandler* handler, ErrorCode error);

void DataHandler_Init(DataHandler* handler) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    if (handler == NULL) return;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <DataHandler_Init+0x3a>
    memset(handler, 0, sizeof(DataHandler));
 80024ca:	2264      	movs	r2, #100	@ 0x64
 80024cc:	2100      	movs	r1, #0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f004 fce1 	bl	8006e96 <memset>
    handler->operationMode = MODE_IDLE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    handler->calibrationMode = MODE_IDLE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    handler->controlMode = MODE_PID;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    handler->lastError = ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80024f4:	e000      	b.n	80024f8 <DataHandler_Init+0x3c>
    if (handler == NULL) return;
 80024f6:	bf00      	nop
}
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <DataHandler_ProcessUARTData>:

void DataHandler_ProcessUARTData(DataHandler* handler, uint8_t* data, uint16_t size) {
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	4613      	mov	r3, r2
 800250a:	80fb      	strh	r3, [r7, #6]
    if (handler == NULL || data == NULL || size != PACKET_SIZE) {
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <DataHandler_ProcessUARTData+0x20>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <DataHandler_ProcessUARTData+0x20>
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	2b61      	cmp	r3, #97	@ 0x61
 800251c:	d004      	beq.n	8002528 <DataHandler_ProcessUARTData+0x2a>
        handleError(handler, ERROR_PACKET_SIZE);
 800251e:	2103      	movs	r1, #3
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f972 	bl	800280a <handleError>
        return;
 8002526:	e007      	b.n	8002538 <DataHandler_ProcessUARTData+0x3a>
    }
    parseDataPacket(handler, data);
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f807 	bl	800253e <parseDataPacket>
    handler->newDataAvailable = true;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
}
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <parseDataPacket>:

static void parseDataPacket(DataHandler* handler, uint8_t* data) {
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
    uint8_t* ptr = data;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	60fb      	str	r3, [r7, #12]

    // control Parameters
    memcpy(&handler->tolerance, ptr, sizeof(float)); ptr += sizeof(float);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3304      	adds	r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->desiredX, ptr, sizeof(float)); ptr += sizeof(float);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3304      	adds	r3, #4
 8002568:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->desiredY, ptr, sizeof(float)); ptr += sizeof(float);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3308      	adds	r3, #8
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3304      	adds	r3, #4
 8002578:	60fb      	str	r3, [r7, #12]

    //velocity
    memcpy(&handler->current_velocity_X, ptr, sizeof(float)); ptr += sizeof(float);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	330c      	adds	r3, #12
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3304      	adds	r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->current_velocity_Y, ptr, sizeof(float)); ptr += sizeof(float);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3310      	adds	r3, #16
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3304      	adds	r3, #4
 8002598:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->desired_velocity_X, ptr, sizeof(float)); ptr += sizeof(float);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3314      	adds	r3, #20
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3304      	adds	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->desired_velocity_Y, ptr, sizeof(float)); ptr += sizeof(float);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3318      	adds	r3, #24
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3304      	adds	r3, #4
 80025b8:	60fb      	str	r3, [r7, #12]
    // calibration Data
    memcpy(&handler->calibAngleX, ptr, sizeof(float)); ptr += sizeof(float);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	331c      	adds	r3, #28
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3304      	adds	r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->calibAngleY, ptr, sizeof(float)); ptr += sizeof(float);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3320      	adds	r3, #32
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3304      	adds	r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]

    // operation Modes
    uint8_t opMode = *ptr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	60fa      	str	r2, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	72fb      	strb	r3, [r7, #11]
    uint8_t calMode = *ptr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60fa      	str	r2, [r7, #12]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	72bb      	strb	r3, [r7, #10]
    uint8_t ctrlMode = *ptr++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	60fa      	str	r2, [r7, #12]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	727b      	strb	r3, [r7, #9]
    uint8_t trajMode = *ptr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	60fa      	str	r2, [r7, #12]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	723b      	strb	r3, [r7, #8]

    // validate modes
    handler->operationMode = opMode;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7afa      	ldrb	r2, [r7, #11]
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    handler->calibrationMode =calMode;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7aba      	ldrb	r2, [r7, #10]
 800260e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    handler->controlMode =ctrlMode;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7a7a      	ldrb	r2, [r7, #9]
 8002616:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    handler->trajectoryMode =trajMode;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7a3a      	ldrb	r2, [r7, #8]
 800261e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27


    // manual Control
    memcpy(&handler->manualAngleX, ptr, sizeof(float)); ptr += sizeof(float);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3328      	adds	r3, #40	@ 0x28
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3304      	adds	r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->manualAngleY, ptr, sizeof(float)); ptr += sizeof(float);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	332c      	adds	r3, #44	@ 0x2c
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3304      	adds	r3, #4
 8002640:	60fb      	str	r3, [r7, #12]

    // system State
    memcpy(&handler->currentX, ptr, sizeof(float)); ptr += sizeof(float);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3330      	adds	r3, #48	@ 0x30
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->currentY, ptr, sizeof(float)); ptr += sizeof(float);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3334      	adds	r3, #52	@ 0x34
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3304      	adds	r3, #4
 8002660:	60fb      	str	r3, [r7, #12]

    // pid parameters
    memcpy(&handler->PID_KP, ptr, sizeof(float)); ptr += sizeof(float);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3338      	adds	r3, #56	@ 0x38
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3304      	adds	r3, #4
 8002670:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->PID_KI, ptr, sizeof(float)); ptr += sizeof(float);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	333c      	adds	r3, #60	@ 0x3c
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3304      	adds	r3, #4
 8002680:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->PID_KD, ptr, sizeof(float)); ptr += sizeof(float);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3340      	adds	r3, #64	@ 0x40
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3304      	adds	r3, #4
 8002690:	60fb      	str	r3, [r7, #12]

    // pv parameters
    memcpy(&handler->PV_KP, ptr, sizeof(float)); ptr += sizeof(float);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3344      	adds	r3, #68	@ 0x44
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3304      	adds	r3, #4
 80026a0:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->PV_KV, ptr, sizeof(float)); ptr += sizeof(float);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3348      	adds	r3, #72	@ 0x48
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3304      	adds	r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->ALPHA, ptr, sizeof(float)); ptr += sizeof(float);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	334c      	adds	r3, #76	@ 0x4c
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3304      	adds	r3, #4
 80026c0:	60fb      	str	r3, [r7, #12]

    memcpy(&handler->trajectroy_scale, ptr, sizeof(float)); ptr += sizeof(float);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3350      	adds	r3, #80	@ 0x50
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3304      	adds	r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->trajectroy_speed, ptr, sizeof(float)); ptr += sizeof(float);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3354      	adds	r3, #84	@ 0x54
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3304      	adds	r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->trajectroy_base_speed, ptr, sizeof(float));ptr += sizeof(float);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3358      	adds	r3, #88	@ 0x58
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3304      	adds	r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]
    memcpy(&handler->dt, ptr, sizeof(float));ptr += sizeof(float);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	335c      	adds	r3, #92	@ 0x5c
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3304      	adds	r3, #4
 8002700:	60fb      	str	r3, [r7, #12]
    handler->ball_detected = *ptr;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2da      	uxtb	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <DataHandler_Reset>:

void DataHandler_Reset(DataHandler* handler) {
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    if (handler == NULL) return;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d068      	beq.n	8002800 <DataHandler_Reset+0xe0>

    handler->tolerance = 0.0f;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    handler->desiredX = 0.0f;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
    handler->desiredY = 0.0f;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	609a      	str	r2, [r3, #8]

    handler->current_velocity_X= 0.0f;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
    handler->current_velocity_Y = 0.0f;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	611a      	str	r2, [r3, #16]

    handler->desired_velocity_X= 0.0f;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
    handler->desired_velocity_Y = 0.0f;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	619a      	str	r2, [r3, #24]

    handler->calibAngleX = 0.0f;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
    handler->calibAngleY = 0.0f;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	621a      	str	r2, [r3, #32]


    handler->operationMode = MODE_IDLE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    handler->calibrationMode = MODE_IDLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    handler->controlMode = MODE_PID;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    handler->trajectoryMode = MODE_POINT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27


    handler->manualAngleX = 0.0f;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	629a      	str	r2, [r3, #40]	@ 0x28
    handler->manualAngleY = 0.0f;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	62da      	str	r2, [r3, #44]	@ 0x2c


    handler->currentX = 0.0f;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
    handler->currentY = 0.0f;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34

    handler->PID_KP = 0.0f;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38
    handler->PID_KI = 0.0f;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handler->PID_KD = 0.0f;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
    handler->PV_KP = 0.0f;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	645a      	str	r2, [r3, #68]	@ 0x44
    handler->PV_KV = 0.0f;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	649a      	str	r2, [r3, #72]	@ 0x48
    handler->ALPHA = 0.0f;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    handler->dt = 0.0f;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    // Status
    handler->lastError = ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    handler->newDataAvailable = false;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 80027fe:	e000      	b.n	8002802 <DataHandler_Reset+0xe2>
    if (handler == NULL) return;
 8002800:	bf00      	nop
}
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <handleError>:
    } else {
        UART_sendString("[ERROR] Data overflow\n");
    }
}

static void handleError(DataHandler* handler, ErrorCode error) {
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
    if (handler == NULL) return;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <handleError+0x1c>
    handler->lastError = error;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002824:	e000      	b.n	8002828 <handleError+0x1e>
    if (handler == NULL) return;
 8002826:	bf00      	nop
}
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <DataHandler_GetCalibrationMode>:

float DataHandler_GetPV_KV(const DataHandler* handler) {
    return handler != NULL ? handler->PV_KV : 0.0f;
}

CalibrationMode DataHandler_GetCalibrationMode(const DataHandler* handler) {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    return handler != NULL ? handler->calibrationMode : MODE_IDLE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <DataHandler_GetCalibrationMode+0x16>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002844:	e000      	b.n	8002848 <DataHandler_GetCalibrationMode+0x18>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <DataHandler_GetCalibAngleX>:

float DataHandler_GetCurrentVelocityY(const DataHandler* handler) {
    return handler != NULL ? handler->current_velocity_Y : 0.0f;
}

float DataHandler_GetCalibAngleX(const DataHandler* handler) {
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
    return handler != NULL ? handler->calibAngleX : 0.0f;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <DataHandler_GetCalibAngleX+0x14>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	e001      	b.n	800286a <DataHandler_GetCalibAngleX+0x18>
 8002866:	f04f 0300 	mov.w	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <DataHandler_GetCalibAngleY>:

float DataHandler_GetCalibAngleY(const DataHandler* handler) {
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    return handler != NULL ? handler->calibAngleY : 0.0f;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <DataHandler_GetCalibAngleY+0x14>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	e001      	b.n	800288c <DataHandler_GetCalibAngleY+0x18>
 8002888:	f04f 0300 	mov.w	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <DataHandler_GetOperationMode>:

OperationMode DataHandler_GetOperationMode(const DataHandler* handler) {
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
    return handler != NULL ? handler->operationMode : MODE_IDLE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <DataHandler_GetOperationMode+0x16>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028aa:	e000      	b.n	80028ae <DataHandler_GetOperationMode+0x18>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <DataHandler_GetManualAngleX>:

float DataHandler_GetManualAngleX(const DataHandler* handler) {
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    return handler != NULL ? handler->manualAngleX : 0.0f;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <DataHandler_GetManualAngleX+0x14>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ca:	e001      	b.n	80028d0 <DataHandler_GetManualAngleX+0x18>
 80028cc:	f04f 0300 	mov.w	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <DataHandler_GetManualAngleY>:

float DataHandler_GetManualAngleY(const DataHandler* handler) {
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    return handler != NULL ? handler->manualAngleY : 0.0f;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <DataHandler_GetManualAngleY+0x14>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	e001      	b.n	80028f2 <DataHandler_GetManualAngleY+0x18>
 80028ee:	f04f 0300 	mov.w	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002900:	f000 ff02 	bl	8003708 <HAL_Init>
  /* USER CODE BEGIN Init */
   // PA1
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002904:	f000 f830 	bl	8002968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
   // PA0
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002908:	f000 f8ec 	bl	8002ae4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800290c:	f000 f86e 	bl	80029ec <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002910:	f000 f8be 	bl	8002a90 <MX_USART2_UART_Init>
//  	          UART_sendString("Unable to initialize IMU Sensor: MPU6050, retrying...\n");
//  	          status = MPU6050_Init(&mpu);
//  	          HAL_Delay(2000);
//  	      }
//    }
  status = HAL_UART_Receive_IT(&huart2, &rx_buffer[rx_index], 1);
 8002914:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <main+0x58>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <main+0x5c>)
 800291c:	4413      	add	r3, r2
 800291e:	2201      	movs	r2, #1
 8002920:	4619      	mov	r1, r3
 8002922:	480e      	ldr	r0, [pc, #56]	@ (800295c <main+0x60>)
 8002924:	f002 fd91 	bl	800544a <HAL_UART_Receive_IT>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <main+0x64>)
 800292e:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(2000);
//
//		}
//    }
  //MPU6050_Calibrate();
  Servo_Init();
 8002930:	f000 faa2 	bl	8002e78 <Servo_Init>
  HAL_Delay(1000);
 8002934:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002938:	f000 ff48 	bl	80037cc <HAL_Delay>
  DataHandler_Init(&dataHandler);
 800293c:	4809      	ldr	r0, [pc, #36]	@ (8002964 <main+0x68>)
 800293e:	f7ff fdbd 	bl	80024bc <DataHandler_Init>
  DataHandler_Reset(&dataHandler);
 8002942:	4808      	ldr	r0, [pc, #32]	@ (8002964 <main+0x68>)
 8002944:	f7ff feec 	bl	8002720 <DataHandler_Reset>
  Control_init(&dataHandler);
 8002948:	4806      	ldr	r0, [pc, #24]	@ (8002964 <main+0x68>)
 800294a:	f7fe fc07 	bl	800115c <Control_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  updateController_noUpdate();
 800294e:	f000 f915 	bl	8002b7c <updateController_noUpdate>
 8002952:	e7fc      	b.n	800294e <main+0x52>
 8002954:	20000644 	.word	0x20000644
 8002958:	200005e0 	.word	0x200005e0
 800295c:	20000598 	.word	0x20000598
 8002960:	20000648 	.word	0x20000648
 8002964:	2000064c 	.word	0x2000064c

08002968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b090      	sub	sp, #64	@ 0x40
 800296c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296e:	f107 0318 	add.w	r3, r7, #24
 8002972:	2228      	movs	r2, #40	@ 0x28
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f004 fa8d 	bl	8006e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800298e:	2301      	movs	r3, #1
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002992:	2310      	movs	r3, #16
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002996:	2302      	movs	r3, #2
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800299a:	2300      	movs	r3, #0
 800299c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800299e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80029a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 fa8f 	bl	8003ecc <HAL_RCC_OscConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80029b4:	f000 fa5a 	bl	8002e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b8:	230f      	movs	r3, #15
 80029ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029bc:	2302      	movs	r3, #2
 80029be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2102      	movs	r1, #2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fcfc 	bl	80043d0 <HAL_RCC_ClockConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80029de:	f000 fa45 	bl	8002e6c <Error_Handler>
  }
}
 80029e2:	bf00      	nop
 80029e4:	3740      	adds	r7, #64	@ 0x40
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a8c <MX_TIM1_Init+0xa0>)
 8002a0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a16:	4b1c      	ldr	r3, [pc, #112]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a24:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a2a:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a36:	4814      	ldr	r0, [pc, #80]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a38:	f001 fe58 	bl	80046ec <HAL_TIM_Base_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002a42:	f000 fa13 	bl	8002e6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	4619      	mov	r1, r3
 8002a54:	480c      	ldr	r0, [pc, #48]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a56:	f002 f855 	bl	8004b04 <HAL_TIM_SlaveConfigSynchro>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002a60:	f000 fa04 	bl	8002e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	@ (8002a88 <MX_TIM1_Init+0x9c>)
 8002a72:	f002 fbb1 	bl	80051d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002a7c:	f000 f9f6 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000550 	.word	0x20000550
 8002a8c:	40012c00 	.word	0x40012c00

08002a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <MX_USART2_UART_Init+0x50>)
 8002a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate =921600;
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002a9c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	@ (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ac8:	f002 fbe4 	bl	8005294 <HAL_UART_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ad2:	f000 f9cb 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000598 	.word	0x20000598
 8002ae0:	40004400 	.word	0x40004400

08002ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <MX_GPIO_Init+0x8c>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <MX_GPIO_Init+0x8c>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	6193      	str	r3, [r2, #24]
 8002b04:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <MX_GPIO_Init+0x8c>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <MX_GPIO_Init+0x8c>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a16      	ldr	r2, [pc, #88]	@ (8002b70 <MX_GPIO_Init+0x8c>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <MX_GPIO_Init+0x8c>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4811      	ldr	r0, [pc, #68]	@ (8002b74 <MX_GPIO_Init+0x90>)
 8002b2e:	f001 f9b5 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b32:	2303      	movs	r3, #3
 8002b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	f107 0308 	add.w	r3, r7, #8
 8002b42:	4619      	mov	r1, r3
 8002b44:	480c      	ldr	r0, [pc, #48]	@ (8002b78 <MX_GPIO_Init+0x94>)
 8002b46:	f001 f825 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2302      	movs	r3, #2
 8002b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4804      	ldr	r0, [pc, #16]	@ (8002b74 <MX_GPIO_Init+0x90>)
 8002b62:	f001 f817 	bl	8003b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40010c00 	.word	0x40010c00
 8002b78:	40010800 	.word	0x40010800

08002b7c <updateController_noUpdate>:
    if (DataHandler_IsNewDataAvailable(handler)) {
        DataHandler_ClearNewDataFlag(handler);
        updateController_noUpdate();
    }
}
void updateController_noUpdate(void){
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b0c9      	sub	sp, #292	@ 0x124
 8002b80:	af08      	add	r7, sp, #32
			static DataHandler* handler = &dataHandler;
	        switch(DataHandler_GetOperationMode(handler)) {
 8002b82:	4b62      	ldr	r3, [pc, #392]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fe85 	bl	8002896 <DataHandler_GetOperationMode>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	f200 80b3 	bhi.w	8002cfa <updateController_noUpdate+0x17e>
 8002b94:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <updateController_noUpdate+0x20>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bb1 	.word	0x08002bb1
 8002ba0:	08002c61 	.word	0x08002c61
 8002ba4:	08002bc7 	.word	0x08002bc7
 8002ba8:	08002c23 	.word	0x08002c23
 8002bac:	08002cf1 	.word	0x08002cf1
	            case MODE_IDLE:
	            	Servo_X_SetAngle(0);
 8002bb0:	f04f 0000 	mov.w	r0, #0
 8002bb4:	f000 f9ca 	bl	8002f4c <Servo_X_SetAngle>
	            	Servo_Y_SetAngle(0);
 8002bb8:	f04f 0000 	mov.w	r0, #0
 8002bbc:	f000 fa2e 	bl	800301c <Servo_Y_SetAngle>
	            	Control_Reset();
 8002bc0:	f7ff fc38 	bl	8002434 <Control_Reset>

	            	break;
 8002bc4:	e09c      	b.n	8002d00 <updateController_noUpdate+0x184>
	            case MODE_CALIBRATION:
	            	Control_Reset();
 8002bc6:	f7ff fc35 	bl	8002434 <Control_Reset>
	            	switch(DataHandler_GetCalibrationMode(handler)){
 8002bca:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fe2e 	bl	8002830 <DataHandler_GetCalibrationMode>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d01a      	beq.n	8002c10 <updateController_noUpdate+0x94>
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	f300 808f 	bgt.w	8002cfe <updateController_noUpdate+0x182>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <updateController_noUpdate+0x6e>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d018      	beq.n	8002c1a <updateController_noUpdate+0x9e>
	            			break;
	            		case MODE_RESET:
	            			Servo_Reset_Calib();
	            			break;
	            	}
	                break;
 8002be8:	e089      	b.n	8002cfe <updateController_noUpdate+0x182>
	            			Servo_X_Calib(DataHandler_GetCalibAngleX(handler));
 8002bea:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fe2f 	bl	8002852 <DataHandler_GetCalibAngleX>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa78 	bl	80030ec <Servo_X_Calib>
	            			Servo_Y_Calib(DataHandler_GetCalibAngleY(handler));
 8002bfc:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fe37 	bl	8002874 <DataHandler_GetCalibAngleY>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fad1 	bl	80031b0 <Servo_Y_Calib>
	            			break;
 8002c0e:	e007      	b.n	8002c20 <updateController_noUpdate+0xa4>
	            			Servo_X_Save_Calib();
 8002c10:	f000 fb30 	bl	8003274 <Servo_X_Save_Calib>
	            			Servo_Y_Save_Calib();
 8002c14:	f000 fb3c 	bl	8003290 <Servo_Y_Save_Calib>
	            			break;
 8002c18:	e002      	b.n	8002c20 <updateController_noUpdate+0xa4>
	            			Servo_Reset_Calib();
 8002c1a:	f000 fb47 	bl	80032ac <Servo_Reset_Calib>
	            			break;
 8002c1e:	bf00      	nop
	                break;
 8002c20:	e06d      	b.n	8002cfe <updateController_noUpdate+0x182>

	            case MODE_AUTOMATIC: {
	            	switch (handler->trajectoryMode) {
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d816      	bhi.n	8002c5c <updateController_noUpdate+0xe0>
 8002c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c34 <updateController_noUpdate+0xb8>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c4b 	.word	0x08002c4b
 8002c3c:	08002c51 	.word	0x08002c51
 8002c40:	08002c57 	.word	0x08002c57
	            	        case MODE_POINT:
	            	            Control_Loop();
 8002c44:	f7fe ffa4 	bl	8001b90 <Control_Loop>
	            	            break;
 8002c48:	e009      	b.n	8002c5e <updateController_noUpdate+0xe2>

	            	        case MODE_CIRCLE:
	            	            generate_circle_points();
 8002c4a:	f7ff faab 	bl	80021a4 <generate_circle_points>
	            	            break;
 8002c4e:	e006      	b.n	8002c5e <updateController_noUpdate+0xe2>

	            	        case MODE_INFINITY:
	            	            generate_infinity_points();
 8002c50:	f7ff fb46 	bl	80022e0 <generate_infinity_points>
	            	            break;
 8002c54:	e003      	b.n	8002c5e <updateController_noUpdate+0xe2>
	            	        case MODE_PATH:
	            	        	Control_Loop();
 8002c56:	f7fe ff9b 	bl	8001b90 <Control_Loop>
	            	        	break;
 8002c5a:	e000      	b.n	8002c5e <updateController_noUpdate+0xe2>
	            	        default:
	            	        	//Control_Loop();
	            	            break;
 8002c5c:	bf00      	nop
	            	    }
	                break;
 8002c5e:	e04f      	b.n	8002d00 <updateController_noUpdate+0x184>
	            }

	            case MODE_MANUAL:
	            	Control_Reset();
 8002c60:	f7ff fbe8 	bl	8002434 <Control_Reset>
	            	Servo_X_SetAngle(DataHandler_GetManualAngleX(handler));
 8002c64:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fe25 	bl	80028b8 <DataHandler_GetManualAngleX>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f96b 	bl	8002f4c <Servo_X_SetAngle>
	            	Servo_Y_SetAngle(DataHandler_GetManualAngleY(handler));
 8002c76:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fe2d 	bl	80028da <DataHandler_GetManualAngleY>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f9ca 	bl	800301c <Servo_Y_SetAngle>
	            	char debug_buf2[255];
	            	snprintf(debug_buf2, sizeof(debug_buf2),
	            	         "{\"Servo_X\":%.2f,\"Servo_Y\":%.2f,\"desired_X\":%.2f,\"desired_Y\":%.2f}",
	            	         handler->manualAngleX, handler->manualAngleY,0.0f,0.0f);
 8002c88:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	            	snprintf(debug_buf2, sizeof(debug_buf2),
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fbca 	bl	8000428 <__aeabi_f2d>
 8002c94:	4604      	mov	r4, r0
 8002c96:	460d      	mov	r5, r1
	            	         handler->manualAngleX, handler->manualAngleY,0.0f,0.0f);
 8002c98:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <updateController_noUpdate+0x190>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	            	snprintf(debug_buf2, sizeof(debug_buf2),
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fbc2 	bl	8000428 <__aeabi_f2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	463e      	mov	r6, r7
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002cc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cc6:	e9cd 4500 	strd	r4, r5, [sp]
 8002cca:	4a11      	ldr	r2, [pc, #68]	@ (8002d10 <updateController_noUpdate+0x194>)
 8002ccc:	21ff      	movs	r1, #255	@ 0xff
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f004 f868 	bl	8006da4 <sniprintf>
	            	UART_sendString(debug_buf2);
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f8b2 	bl	8002e40 <UART_sendString>
	            	UART_sendString("\r\n");
 8002cdc:	480d      	ldr	r0, [pc, #52]	@ (8002d14 <updateController_noUpdate+0x198>)
 8002cde:	f000 f8af 	bl	8002e40 <UART_sendString>
	            	memset(debug_buf2, 0, sizeof(debug_buf2));
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	22ff      	movs	r2, #255	@ 0xff
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 f8d4 	bl	8006e96 <memset>
	                break;
 8002cee:	e007      	b.n	8002d00 <updateController_noUpdate+0x184>

	            case MODE_SAFE:
	            	Control_Reset();
 8002cf0:	f7ff fba0 	bl	8002434 <Control_Reset>

	                safeShutdownProcedure();
 8002cf4:	f000 f810 	bl	8002d18 <safeShutdownProcedure>
	                break;
 8002cf8:	e002      	b.n	8002d00 <updateController_noUpdate+0x184>

	            default:
	                break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <updateController_noUpdate+0x184>
	                break;
 8002cfe:	bf00      	nop
	        }
}
 8002d00:	bf00      	nop
 8002d02:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200000c4 	.word	0x200000c4
 8002d10:	0800a09c 	.word	0x0800a09c
 8002d14:	0800a0e0 	.word	0x0800a0e0

08002d18 <safeShutdownProcedure>:
void safeShutdownProcedure(void){
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3c      	ldr	r2, [pc, #240]	@ (8002e24 <HAL_UART_RxCpltCallback+0x100>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d171      	bne.n	8002e1a <HAL_UART_RxCpltCallback+0xf6>
        uint8_t current_byte = rx_buffer[rx_index];
 8002d36:	4b3c      	ldr	r3, [pc, #240]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e2c <HAL_UART_RxCpltCallback+0x108>)
 8002d3e:	5c9b      	ldrb	r3, [r3, r2]
 8002d40:	72fb      	strb	r3, [r7, #11]
        if (!sync_found) {
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_UART_RxCpltCallback+0x10c>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	f083 0301 	eor.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d025      	beq.n	8002d9c <HAL_UART_RxCpltCallback+0x78>
            if (prev_byte == START_BYTE_1 && current_byte == START_BYTE_2) {
 8002d50:	4b38      	ldr	r3, [pc, #224]	@ (8002e34 <HAL_UART_RxCpltCallback+0x110>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2baa      	cmp	r3, #170	@ 0xaa
 8002d56:	d11d      	bne.n	8002d94 <HAL_UART_RxCpltCallback+0x70>
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	2b55      	cmp	r3, #85	@ 0x55
 8002d5c:	d11a      	bne.n	8002d94 <HAL_UART_RxCpltCallback+0x70>
                sync_found = true;
 8002d5e:	4b34      	ldr	r3, [pc, #208]	@ (8002e30 <HAL_UART_RxCpltCallback+0x10c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
                rx_index = 0;
 8002d64:	4b30      	ldr	r3, [pc, #192]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	801a      	strh	r2, [r3, #0]
                rx_buffer[rx_index++] = prev_byte;
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	b291      	uxth	r1, r2
 8002d72:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002d74:	8011      	strh	r1, [r2, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b2e      	ldr	r3, [pc, #184]	@ (8002e34 <HAL_UART_RxCpltCallback+0x110>)
 8002d7a:	7819      	ldrb	r1, [r3, #0]
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <HAL_UART_RxCpltCallback+0x108>)
 8002d7e:	5499      	strb	r1, [r3, r2]
                rx_buffer[rx_index++] = current_byte;
 8002d80:	4b29      	ldr	r3, [pc, #164]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	b291      	uxth	r1, r2
 8002d88:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002d8a:	8011      	strh	r1, [r2, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4a27      	ldr	r2, [pc, #156]	@ (8002e2c <HAL_UART_RxCpltCallback+0x108>)
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	5453      	strb	r3, [r2, r1]
            }
            prev_byte = current_byte;
 8002d94:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <HAL_UART_RxCpltCallback+0x110>)
 8002d96:	7afb      	ldrb	r3, [r7, #11]
 8002d98:	7013      	strb	r3, [r2, #0]
 8002d9a:	e034      	b.n	8002e06 <HAL_UART_RxCpltCallback+0xe2>
        }
        else {
            if (rx_index < sizeof(rx_buffer)) {
 8002d9c:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	2b63      	cmp	r3, #99	@ 0x63
 8002da2:	d809      	bhi.n	8002db8 <HAL_UART_RxCpltCallback+0x94>
                rx_buffer[rx_index++] = current_byte;
 8002da4:	4b20      	ldr	r3, [pc, #128]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	b291      	uxth	r1, r2
 8002dac:	4a1e      	ldr	r2, [pc, #120]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002dae:	8011      	strh	r1, [r2, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e2c <HAL_UART_RxCpltCallback+0x108>)
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	5453      	strb	r3, [r2, r1]
            }

            if (rx_index == sizeof(rx_buffer)) {
 8002db8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	2b64      	cmp	r3, #100	@ 0x64
 8002dbe:	d122      	bne.n	8002e06 <HAL_UART_RxCpltCallback+0xe2>
                uint8_t checksum = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
                for (uint16_t i = 2; i < PACKET_SIZE + 2; i++) {
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	81bb      	strh	r3, [r7, #12]
 8002dc8:	e008      	b.n	8002ddc <HAL_UART_RxCpltCallback+0xb8>
                    checksum ^= rx_buffer[i];
 8002dca:	89bb      	ldrh	r3, [r7, #12]
 8002dcc:	4a17      	ldr	r2, [pc, #92]	@ (8002e2c <HAL_UART_RxCpltCallback+0x108>)
 8002dce:	5cd2      	ldrb	r2, [r2, r3]
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	4053      	eors	r3, r2
 8002dd4:	73fb      	strb	r3, [r7, #15]
                for (uint16_t i = 2; i < PACKET_SIZE + 2; i++) {
 8002dd6:	89bb      	ldrh	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	81bb      	strh	r3, [r7, #12]
 8002ddc:	89bb      	ldrh	r3, [r7, #12]
 8002dde:	2b62      	cmp	r3, #98	@ 0x62
 8002de0:	d9f3      	bls.n	8002dca <HAL_UART_RxCpltCallback+0xa6>
                }

                if (checksum == rx_buffer[PACKET_SIZE + 2]) {
 8002de2:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_UART_RxCpltCallback+0x108>)
 8002de4:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d105      	bne.n	8002dfa <HAL_UART_RxCpltCallback+0xd6>
                    DataHandler_ProcessUARTData(&dataHandler, rx_buffer + 2, PACKET_SIZE);
 8002dee:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_UART_RxCpltCallback+0x114>)
 8002df0:	2261      	movs	r2, #97	@ 0x61
 8002df2:	4619      	mov	r1, r3
 8002df4:	4811      	ldr	r0, [pc, #68]	@ (8002e3c <HAL_UART_RxCpltCallback+0x118>)
 8002df6:	f7ff fb82 	bl	80024fe <DataHandler_ProcessUARTData>
                }
                sync_found = false;
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <HAL_UART_RxCpltCallback+0x10c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
                rx_index = 0;
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	801a      	strh	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(huart, &rx_buffer[rx_index], 1);
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <HAL_UART_RxCpltCallback+0x104>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <HAL_UART_RxCpltCallback+0x108>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	2201      	movs	r2, #1
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f002 fb18 	bl	800544a <HAL_UART_Receive_IT>
    }
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40004400 	.word	0x40004400
 8002e28:	20000644 	.word	0x20000644
 8002e2c:	200005e0 	.word	0x200005e0
 8002e30:	20000646 	.word	0x20000646
 8002e34:	20000647 	.word	0x20000647
 8002e38:	200005e2 	.word	0x200005e2
 8002e3c:	2000064c 	.word	0x2000064c

08002e40 <UART_sendString>:


void UART_sendString(char *str) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7fd f981 	bl	8000150 <strlen>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <UART_sendString+0x28>)
 8002e5a:	f002 fa6b 	bl	8005334 <HAL_UART_Transmit>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000598 	.word	0x20000598

08002e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e70:	b672      	cpsid	i
}
 8002e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <Error_Handler+0x8>

08002e78 <Servo_Init>:
static float Y_REF=-21.4f;
static float current_x=0;
static float current_y=0;
static float pitch=0;
static float roll=0;
void Servo_Init(void) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
 8002e8c:	615a      	str	r2, [r3, #20]
 8002e8e:	619a      	str	r2, [r3, #24]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e90:	4b28      	ldr	r3, [pc, #160]	@ (8002f34 <Servo_Init+0xbc>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	4a27      	ldr	r2, [pc, #156]	@ (8002f34 <Servo_Init+0xbc>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	61d3      	str	r3, [r2, #28]
 8002e9c:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <Servo_Init+0xbc>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
    htim2.Instance = TIM2;
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <Servo_Init+0xc0>)
 8002eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002eae:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 63;
 8002eb0:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <Servo_Init+0xc0>)
 8002eb2:	223f      	movs	r2, #63	@ 0x3f
 8002eb4:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <Servo_Init+0xc0>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 19999;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <Servo_Init+0xc0>)
 8002ebe:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002ec2:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <Servo_Init+0xc0>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eca:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <Servo_Init+0xc0>)
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	619a      	str	r2, [r3, #24]
    HAL_TIM_PWM_Init(&htim2);
 8002ed0:	4819      	ldr	r0, [pc, #100]	@ (8002f38 <Servo_Init+0xc0>)
 8002ed2:	f001 fc5a 	bl	800478a <HAL_TIM_PWM_Init>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed6:	2360      	movs	r3, #96	@ 0x60
 8002ed8:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 1500;
 8002eda:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002ede:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2200      	movs	r2, #0
 8002eec:	4619      	mov	r1, r3
 8002eee:	4812      	ldr	r0, [pc, #72]	@ (8002f38 <Servo_Init+0xc0>)
 8002ef0:	f001 fd46 	bl	8004980 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480f      	ldr	r0, [pc, #60]	@ (8002f38 <Servo_Init+0xc0>)
 8002efc:	f001 fd40 	bl	8004980 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002f00:	2100      	movs	r1, #0
 8002f02:	480d      	ldr	r0, [pc, #52]	@ (8002f38 <Servo_Init+0xc0>)
 8002f04:	f001 fc9a 	bl	800483c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002f08:	2104      	movs	r1, #4
 8002f0a:	480b      	ldr	r0, [pc, #44]	@ (8002f38 <Servo_Init+0xc0>)
 8002f0c:	f001 fc96 	bl	800483c <HAL_TIM_PWM_Start>
    X_REF=5.4f;
 8002f10:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <Servo_Init+0xc4>)
 8002f12:	4a0b      	ldr	r2, [pc, #44]	@ (8002f40 <Servo_Init+0xc8>)
 8002f14:	601a      	str	r2, [r3, #0]
    Y_REF=-5.4f;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <Servo_Init+0xcc>)
 8002f18:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <Servo_Init+0xd0>)
 8002f1a:	601a      	str	r2, [r3, #0]
    //Flash_Read_Calibration();
    Servo_X_SetAngle(0);
 8002f1c:	f04f 0000 	mov.w	r0, #0
 8002f20:	f000 f814 	bl	8002f4c <Servo_X_SetAngle>
    Servo_Y_SetAngle(0);
 8002f24:	f04f 0000 	mov.w	r0, #0
 8002f28:	f000 f878 	bl	800301c <Servo_Y_SetAngle>

}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	200006b0 	.word	0x200006b0
 8002f3c:	200000c8 	.word	0x200000c8
 8002f40:	40accccd 	.word	0x40accccd
 8002f44:	200000cc 	.word	0x200000cc
 8002f48:	c0accccd 	.word	0xc0accccd

08002f4c <Servo_X_SetAngle>:



void Servo_X_SetAngle(float angle) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	if (angle < SERVO_MIN_ANGLE) angle =SERVO_MIN_ANGLE ;
 8002f54:	4928      	ldr	r1, [pc, #160]	@ (8002ff8 <Servo_X_SetAngle+0xac>)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe f8b2 	bl	80010c0 <__aeabi_fcmplt>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <Servo_X_SetAngle+0x1a>
 8002f62:	4b25      	ldr	r3, [pc, #148]	@ (8002ff8 <Servo_X_SetAngle+0xac>)
 8002f64:	607b      	str	r3, [r7, #4]
	if (angle > SERVO_MAX_ANGLE ) angle = SERVO_MAX_ANGLE ;
 8002f66:	4925      	ldr	r1, [pc, #148]	@ (8002ffc <Servo_X_SetAngle+0xb0>)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fe f8c7 	bl	80010fc <__aeabi_fcmpgt>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <Servo_X_SetAngle+0x2c>
 8002f74:	4b21      	ldr	r3, [pc, #132]	@ (8002ffc <Servo_X_SetAngle+0xb0>)
 8002f76:	607b      	str	r3, [r7, #4]
	//MPU6050_CalculatePitchRoll(&pitch, &roll);
    angle+=X_REF+90+pitch;
 8002f78:	4b21      	ldr	r3, [pc, #132]	@ (8003000 <Servo_X_SetAngle+0xb4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4921      	ldr	r1, [pc, #132]	@ (8003004 <Servo_X_SetAngle+0xb8>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fdf8 	bl	8000b74 <__addsf3>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b1f      	ldr	r3, [pc, #124]	@ (8003008 <Servo_X_SetAngle+0xbc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7fd fdf0 	bl	8000b74 <__addsf3>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd fdeb 	bl	8000b74 <__addsf3>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	607b      	str	r3, [r7, #4]
    uint32_t pulse = 500 + (angle / 180.0) * 2000;
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fa40 	bl	8000428 <__aeabi_f2d>
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	4b17      	ldr	r3, [pc, #92]	@ (800300c <Servo_X_SetAngle+0xc0>)
 8002fae:	f7fd fbbd 	bl	800072c <__aeabi_ddiv>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <Servo_X_SetAngle+0xc4>)
 8002fc0:	f7fd fa8a 	bl	80004d8 <__aeabi_dmul>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <Servo_X_SetAngle+0xc8>)
 8002fd2:	f7fd f8cb 	bl	800016c <__adddf3>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd fd53 	bl	8000a88 <__aeabi_d2uiz>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <Servo_X_SetAngle+0xcc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	c20c0000 	.word	0xc20c0000
 8002ffc:	420c0000 	.word	0x420c0000
 8003000:	200000c8 	.word	0x200000c8
 8003004:	42b40000 	.word	0x42b40000
 8003008:	20000700 	.word	0x20000700
 800300c:	40668000 	.word	0x40668000
 8003010:	409f4000 	.word	0x409f4000
 8003014:	407f4000 	.word	0x407f4000
 8003018:	200006b0 	.word	0x200006b0

0800301c <Servo_Y_SetAngle>:

void Servo_Y_SetAngle(float angle) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	if (angle < SERVO_MIN_ANGLE) angle =SERVO_MIN_ANGLE ;
 8003024:	4928      	ldr	r1, [pc, #160]	@ (80030c8 <Servo_Y_SetAngle+0xac>)
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe f84a 	bl	80010c0 <__aeabi_fcmplt>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <Servo_Y_SetAngle+0x1a>
 8003032:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <Servo_Y_SetAngle+0xac>)
 8003034:	607b      	str	r3, [r7, #4]
	if (angle > SERVO_MAX_ANGLE ) angle = SERVO_MAX_ANGLE ;
 8003036:	4925      	ldr	r1, [pc, #148]	@ (80030cc <Servo_Y_SetAngle+0xb0>)
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fe f85f 	bl	80010fc <__aeabi_fcmpgt>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <Servo_Y_SetAngle+0x2c>
 8003044:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <Servo_Y_SetAngle+0xb0>)
 8003046:	607b      	str	r3, [r7, #4]
	//MPU6050_CalculatePitchRoll(&pitch, &roll);
    angle+=Y_REF+90+roll;
 8003048:	4b21      	ldr	r3, [pc, #132]	@ (80030d0 <Servo_Y_SetAngle+0xb4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4921      	ldr	r1, [pc, #132]	@ (80030d4 <Servo_Y_SetAngle+0xb8>)
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fd90 	bl	8000b74 <__addsf3>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	4b1f      	ldr	r3, [pc, #124]	@ (80030d8 <Servo_Y_SetAngle+0xbc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7fd fd88 	bl	8000b74 <__addsf3>
 8003064:	4603      	mov	r3, r0
 8003066:	4619      	mov	r1, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd fd83 	bl	8000b74 <__addsf3>
 800306e:	4603      	mov	r3, r0
 8003070:	607b      	str	r3, [r7, #4]
    uint32_t pulse = 500 + (angle / 180.0) * 2000;
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd f9d8 	bl	8000428 <__aeabi_f2d>
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <Servo_Y_SetAngle+0xc0>)
 800307e:	f7fd fb55 	bl	800072c <__aeabi_ddiv>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <Servo_Y_SetAngle+0xc4>)
 8003090:	f7fd fa22 	bl	80004d8 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <Servo_Y_SetAngle+0xc8>)
 80030a2:	f7fd f863 	bl	800016c <__adddf3>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fd fceb 	bl	8000a88 <__aeabi_d2uiz>
 80030b2:	4603      	mov	r3, r0
 80030b4:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <Servo_Y_SetAngle+0xcc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	c20c0000 	.word	0xc20c0000
 80030cc:	420c0000 	.word	0x420c0000
 80030d0:	200000cc 	.word	0x200000cc
 80030d4:	42b40000 	.word	0x42b40000
 80030d8:	20000704 	.word	0x20000704
 80030dc:	40668000 	.word	0x40668000
 80030e0:	409f4000 	.word	0x409f4000
 80030e4:	407f4000 	.word	0x407f4000
 80030e8:	200006b0 	.word	0x200006b0

080030ec <Servo_X_Calib>:

void Servo_X_Calib(float angle) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    if (angle < SERVO_MIN_CALIB_ANGLE) angle =SERVO_MIN_CALIB_ANGLE ;
 80030f4:	4926      	ldr	r1, [pc, #152]	@ (8003190 <Servo_X_Calib+0xa4>)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd ffe2 	bl	80010c0 <__aeabi_fcmplt>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <Servo_X_Calib+0x1a>
 8003102:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <Servo_X_Calib+0xa4>)
 8003104:	607b      	str	r3, [r7, #4]
    if (angle > SERVO_MAX_CALIB_ANGLE ) angle = SERVO_MAX_CALIB_ANGLE ;
 8003106:	4923      	ldr	r1, [pc, #140]	@ (8003194 <Servo_X_Calib+0xa8>)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd fff7 	bl	80010fc <__aeabi_fcmpgt>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <Servo_X_Calib+0x2c>
 8003114:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <Servo_X_Calib+0xa8>)
 8003116:	607b      	str	r3, [r7, #4]
    current_x=angle+X_REF;
 8003118:	4b1f      	ldr	r3, [pc, #124]	@ (8003198 <Servo_X_Calib+0xac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fd28 	bl	8000b74 <__addsf3>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b1c      	ldr	r3, [pc, #112]	@ (800319c <Servo_X_Calib+0xb0>)
 800312a:	601a      	str	r2, [r3, #0]
    angle=current_x+90;
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <Servo_X_Calib+0xb0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4918      	ldr	r1, [pc, #96]	@ (8003194 <Servo_X_Calib+0xa8>)
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fd1e 	bl	8000b74 <__addsf3>
 8003138:	4603      	mov	r3, r0
 800313a:	607b      	str	r3, [r7, #4]
    uint32_t pulse = 500 + (angle / 180.0) * 2000;
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fd f973 	bl	8000428 <__aeabi_f2d>
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <Servo_X_Calib+0xb4>)
 8003148:	f7fd faf0 	bl	800072c <__aeabi_ddiv>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <Servo_X_Calib+0xb8>)
 800315a:	f7fd f9bd 	bl	80004d8 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <Servo_X_Calib+0xbc>)
 800316c:	f7fc fffe 	bl	800016c <__adddf3>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	f7fd fc86 	bl	8000a88 <__aeabi_d2uiz>
 800317c:	4603      	mov	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8003180:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <Servo_X_Calib+0xc0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	635a      	str	r2, [r3, #52]	@ 0x34
//    sprintf(debug_buf, "XC:%.2f,P:%lu\r\n", angle-90, pulse);
//    UART_sendString(debug_buf);
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	c2b40000 	.word	0xc2b40000
 8003194:	42b40000 	.word	0x42b40000
 8003198:	200000c8 	.word	0x200000c8
 800319c:	200006f8 	.word	0x200006f8
 80031a0:	40668000 	.word	0x40668000
 80031a4:	409f4000 	.word	0x409f4000
 80031a8:	407f4000 	.word	0x407f4000
 80031ac:	200006b0 	.word	0x200006b0

080031b0 <Servo_Y_Calib>:

void Servo_Y_Calib(float angle) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	if (angle < SERVO_MIN_CALIB_ANGLE) angle =SERVO_MIN_CALIB_ANGLE ;
 80031b8:	4926      	ldr	r1, [pc, #152]	@ (8003254 <Servo_Y_Calib+0xa4>)
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd ff80 	bl	80010c0 <__aeabi_fcmplt>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <Servo_Y_Calib+0x1a>
 80031c6:	4b23      	ldr	r3, [pc, #140]	@ (8003254 <Servo_Y_Calib+0xa4>)
 80031c8:	607b      	str	r3, [r7, #4]
	if (angle > SERVO_MAX_CALIB_ANGLE ) angle = SERVO_MAX_CALIB_ANGLE ;
 80031ca:	4923      	ldr	r1, [pc, #140]	@ (8003258 <Servo_Y_Calib+0xa8>)
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fd ff95 	bl	80010fc <__aeabi_fcmpgt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <Servo_Y_Calib+0x2c>
 80031d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003258 <Servo_Y_Calib+0xa8>)
 80031da:	607b      	str	r3, [r7, #4]
    current_y=angle+Y_REF;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <Servo_Y_Calib+0xac>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fcc6 	bl	8000b74 <__addsf3>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003260 <Servo_Y_Calib+0xb0>)
 80031ee:	601a      	str	r2, [r3, #0]
    angle=current_y+90;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <Servo_Y_Calib+0xb0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4918      	ldr	r1, [pc, #96]	@ (8003258 <Servo_Y_Calib+0xa8>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd fcbc 	bl	8000b74 <__addsf3>
 80031fc:	4603      	mov	r3, r0
 80031fe:	607b      	str	r3, [r7, #4]
    uint32_t pulse = 500 + (angle / 180.0) * 2000;
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd f911 	bl	8000428 <__aeabi_f2d>
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	4b16      	ldr	r3, [pc, #88]	@ (8003264 <Servo_Y_Calib+0xb4>)
 800320c:	f7fd fa8e 	bl	800072c <__aeabi_ddiv>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <Servo_Y_Calib+0xb8>)
 800321e:	f7fd f95b 	bl	80004d8 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <Servo_Y_Calib+0xbc>)
 8003230:	f7fc ff9c 	bl	800016c <__adddf3>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fc24 	bl	8000a88 <__aeabi_d2uiz>
 8003240:	4603      	mov	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 8003244:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <Servo_Y_Calib+0xc0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
//    sprintf(debug_buf, "YC:%.2f,P:%lu\r\n", angle-90, pulse);
//    UART_sendString(debug_buf);
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	c2b40000 	.word	0xc2b40000
 8003258:	42b40000 	.word	0x42b40000
 800325c:	200000cc 	.word	0x200000cc
 8003260:	200006fc 	.word	0x200006fc
 8003264:	40668000 	.word	0x40668000
 8003268:	409f4000 	.word	0x409f4000
 800326c:	407f4000 	.word	0x407f4000
 8003270:	200006b0 	.word	0x200006b0

08003274 <Servo_X_Save_Calib>:


void Servo_X_Save_Calib(void){
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
    X_REF=current_x;
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <Servo_X_Save_Calib+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a03      	ldr	r2, [pc, #12]	@ (800328c <Servo_X_Save_Calib+0x18>)
 800327e:	6013      	str	r3, [r2, #0]
    //Flash_Write_Calibration();
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	200006f8 	.word	0x200006f8
 800328c:	200000c8 	.word	0x200000c8

08003290 <Servo_Y_Save_Calib>:

void Servo_Y_Save_Calib(void){
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
    Y_REF=current_y;
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <Servo_Y_Save_Calib+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a03      	ldr	r2, [pc, #12]	@ (80032a8 <Servo_Y_Save_Calib+0x18>)
 800329a:	6013      	str	r3, [r2, #0]
    //Flash_Write_Calibration();

}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	200006fc 	.word	0x200006fc
 80032a8:	200000cc 	.word	0x200000cc

080032ac <Servo_Reset_Calib>:

void Servo_Reset_Calib(void){
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
    X_REF=0;
 80032b0:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <Servo_Reset_Calib+0x2c>)
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
    Y_REF=0;
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <Servo_Reset_Calib+0x30>)
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    current_x=0;
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <Servo_Reset_Calib+0x34>)
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    current_y=0;
 80032c8:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <Servo_Reset_Calib+0x38>)
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
    //Flash_Write_Calibration();
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	200000c8 	.word	0x200000c8
 80032dc:	200000cc 	.word	0x200000cc
 80032e0:	200006f8 	.word	0x200006f8
 80032e4:	200006fc 	.word	0x200006fc

080032e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003360 <HAL_MspInit+0x78>)
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <HAL_MspInit+0x78>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6193      	str	r3, [r2, #24]
 80032fa:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <HAL_MspInit+0x78>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b16      	ldr	r3, [pc, #88]	@ (8003360 <HAL_MspInit+0x78>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <HAL_MspInit+0x78>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003310:	61d3      	str	r3, [r2, #28]
 8003312:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <HAL_MspInit+0x78>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	210f      	movs	r1, #15
 8003322:	f06f 0001 	mvn.w	r0, #1
 8003326:	f000 fb4c 	bl	80039c2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2105      	movs	r1, #5
 800332e:	2005      	movs	r0, #5
 8003330:	f000 fb47 	bl	80039c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003334:	2005      	movs	r0, #5
 8003336:	f000 fb60 	bl	80039fa <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800333a:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <HAL_MspInit+0x7c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_MspInit+0x7c>)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40010000 	.word	0x40010000

08003368 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_TIM_Base_MspInit+0x34>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10b      	bne.n	8003392 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_TIM_Base_MspInit+0x38>)
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	4a08      	ldr	r2, [pc, #32]	@ (80033a0 <HAL_TIM_Base_MspInit+0x38>)
 8003380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003384:	6193      	str	r3, [r2, #24]
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_TIM_Base_MspInit+0x38>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3b      	ldr	r2, [pc, #236]	@ (80034ac <HAL_UART_MspInit+0x108>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d132      	bne.n	800342a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c4:	4b3a      	ldr	r3, [pc, #232]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	4a39      	ldr	r2, [pc, #228]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 80033ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ce:	6193      	str	r3, [r2, #24]
 80033d0:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033dc:	4b34      	ldr	r3, [pc, #208]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	4a33      	ldr	r2, [pc, #204]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 80033e2:	f043 0304 	orr.w	r3, r3, #4
 80033e6:	6193      	str	r3, [r2, #24]
 80033e8:	4b31      	ldr	r3, [pc, #196]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	f107 0318 	add.w	r3, r7, #24
 8003406:	4619      	mov	r1, r3
 8003408:	482a      	ldr	r0, [pc, #168]	@ (80034b4 <HAL_UART_MspInit+0x110>)
 800340a:	f000 fbc3 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800340e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341c:	f107 0318 	add.w	r3, r7, #24
 8003420:	4619      	mov	r1, r3
 8003422:	4824      	ldr	r0, [pc, #144]	@ (80034b4 <HAL_UART_MspInit+0x110>)
 8003424:	f000 fbb6 	bl	8003b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003428:	e03c      	b.n	80034a4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <HAL_UART_MspInit+0x114>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d137      	bne.n	80034a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003434:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4a1d      	ldr	r2, [pc, #116]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 800343a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343e:	61d3      	str	r3, [r2, #28]
 8003440:	4b1b      	ldr	r3, [pc, #108]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344c:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6193      	str	r3, [r2, #24]
 8003458:	4b15      	ldr	r3, [pc, #84]	@ (80034b0 <HAL_UART_MspInit+0x10c>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003464:	2304      	movs	r3, #4
 8003466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800346c:	2303      	movs	r3, #3
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003470:	f107 0318 	add.w	r3, r7, #24
 8003474:	4619      	mov	r1, r3
 8003476:	480f      	ldr	r0, [pc, #60]	@ (80034b4 <HAL_UART_MspInit+0x110>)
 8003478:	f000 fb8c 	bl	8003b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800347c:	2308      	movs	r3, #8
 800347e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003488:	f107 0318 	add.w	r3, r7, #24
 800348c:	4619      	mov	r1, r3
 800348e:	4809      	ldr	r0, [pc, #36]	@ (80034b4 <HAL_UART_MspInit+0x110>)
 8003490:	f000 fb80 	bl	8003b94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2105      	movs	r1, #5
 8003498:	2026      	movs	r0, #38	@ 0x26
 800349a:	f000 fa92 	bl	80039c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800349e:	2026      	movs	r0, #38	@ 0x26
 80034a0:	f000 faab 	bl	80039fa <HAL_NVIC_EnableIRQ>
}
 80034a4:	bf00      	nop
 80034a6:	3728      	adds	r7, #40	@ 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40013800 	.word	0x40013800
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40010800 	.word	0x40010800
 80034b8:	40004400 	.word	0x40004400

080034bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <NMI_Handler+0x4>

080034c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <HardFault_Handler+0x4>

080034cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <MemManage_Handler+0x4>

080034d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <BusFault_Handler+0x4>

080034dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <UsageFault_Handler+0x4>

080034e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f4:	f000 f94e 	bl	8003794 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80034f8:	f002 feb8 	bl	800626c <xTaskGetSchedulerState>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003502:	f002 ff11 	bl	8006328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}

0800350a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
	...

08003518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800351c:	4802      	ldr	r0, [pc, #8]	@ (8003528 <USART2_IRQHandler+0x10>)
 800351e:	f001 ffb9 	bl	8005494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000598 	.word	0x20000598

0800352c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return 1;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <_kill>:

int _kill(int pid, int sig)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003544:	f003 fcfa 	bl	8006f3c <__errno>
 8003548:	4603      	mov	r3, r0
 800354a:	2216      	movs	r2, #22
 800354c:	601a      	str	r2, [r3, #0]
  return -1;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_exit>:

void _exit (int status)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003562:	f04f 31ff 	mov.w	r1, #4294967295
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ffe7 	bl	800353a <_kill>
  while (1) {}    /* Make sure we hang here */
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <_exit+0x12>

08003570 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e00a      	b.n	8003598 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003582:	f3af 8000 	nop.w
 8003586:	4601      	mov	r1, r0
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	60ba      	str	r2, [r7, #8]
 800358e:	b2ca      	uxtb	r2, r1
 8003590:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3301      	adds	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	dbf0      	blt.n	8003582 <_read+0x12>
  }

  return len;
 80035a0:	687b      	ldr	r3, [r7, #4]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e009      	b.n	80035d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	60ba      	str	r2, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3301      	adds	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	dbf1      	blt.n	80035bc <_write+0x12>
  }
  return len;
 80035d8:	687b      	ldr	r3, [r7, #4]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_close>:

int _close(int file)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003608:	605a      	str	r2, [r3, #4]
  return 0;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <_isatty>:

int _isatty(int file)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
	...

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f003 fc62 	bl	8006f3c <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20005000 	.word	0x20005000
 80036a4:	00000400 	.word	0x00000400
 80036a8:	20000708 	.word	0x20000708
 80036ac:	20000918 	.word	0x20000918

080036b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036bc:	f7ff fff8 	bl	80036b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036c0:	480b      	ldr	r0, [pc, #44]	@ (80036f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036c2:	490c      	ldr	r1, [pc, #48]	@ (80036f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036c4:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80036c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c8:	e002      	b.n	80036d0 <LoopCopyDataInit>

080036ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ce:	3304      	adds	r3, #4

080036d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d4:	d3f9      	bcc.n	80036ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036d8:	4c09      	ldr	r4, [pc, #36]	@ (8003700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036dc:	e001      	b.n	80036e2 <LoopFillZerobss>

080036de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e0:	3204      	adds	r2, #4

080036e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e4:	d3fb      	bcc.n	80036de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036e6:	f003 fc2f 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ea:	f7ff f907 	bl	80028fc <main>
  bx lr
 80036ee:	4770      	bx	lr
  ldr r0, =_sdata
 80036f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f4:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 80036f8:	0800a8ac 	.word	0x0800a8ac
  ldr r2, =_sbss
 80036fc:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8003700:	20000914 	.word	0x20000914

08003704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003704:	e7fe      	b.n	8003704 <ADC1_2_IRQHandler>
	...

08003708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370c:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_Init+0x28>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	@ (8003730 <HAL_Init+0x28>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003718:	2003      	movs	r0, #3
 800371a:	f000 f947 	bl	80039ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371e:	200f      	movs	r0, #15
 8003720:	f000 f808 	bl	8003734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003724:	f7ff fde0 	bl	80032e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40022000 	.word	0x40022000

08003734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_InitTick+0x54>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_InitTick+0x58>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374a:	fbb3 f3f1 	udiv	r3, r3, r1
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f95f 	bl	8003a16 <HAL_SYSTICK_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00e      	b.n	8003780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d80a      	bhi.n	800377e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003768:	2200      	movs	r2, #0
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	f000 f927 	bl	80039c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4a06      	ldr	r2, [pc, #24]	@ (8003790 <HAL_InitTick+0x5c>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200000d0 	.word	0x200000d0
 800378c:	200000d8 	.word	0x200000d8
 8003790:	200000d4 	.word	0x200000d4

08003794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_IncTick+0x1c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_IncTick+0x20>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a03      	ldr	r2, [pc, #12]	@ (80037b4 <HAL_IncTick+0x20>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	200000d8 	.word	0x200000d8
 80037b4:	2000070c 	.word	0x2000070c

080037b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return uwTick;
 80037bc:	4b02      	ldr	r3, [pc, #8]	@ (80037c8 <HAL_GetTick+0x10>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	2000070c 	.word	0x2000070c

080037cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d005      	beq.n	80037f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <HAL_Delay+0x44>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f2:	bf00      	nop
 80037f4:	f7ff ffe0 	bl	80037b8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d8f7      	bhi.n	80037f4 <HAL_Delay+0x28>
  {
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200000d8 	.word	0x200000d8

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800383c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4906      	ldr	r1, [pc, #24]	@ (80038ac <__NVIC_EnableIRQ+0x34>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100

080038b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	db0a      	blt.n	80038da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	490c      	ldr	r1, [pc, #48]	@ (80038fc <__NVIC_SetPriority+0x4c>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	440b      	add	r3, r1
 80038d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d8:	e00a      	b.n	80038f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4908      	ldr	r1, [pc, #32]	@ (8003900 <__NVIC_SetPriority+0x50>)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	3b04      	subs	r3, #4
 80038e8:	0112      	lsls	r2, r2, #4
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	440b      	add	r3, r1
 80038ee:	761a      	strb	r2, [r3, #24]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	e000e100 	.word	0xe000e100
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003904:	b480      	push	{r7}
 8003906:	b089      	sub	sp, #36	@ 0x24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f1c3 0307 	rsb	r3, r3, #7
 800391e:	2b04      	cmp	r3, #4
 8003920:	bf28      	it	cs
 8003922:	2304      	movcs	r3, #4
 8003924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3304      	adds	r3, #4
 800392a:	2b06      	cmp	r3, #6
 800392c:	d902      	bls.n	8003934 <NVIC_EncodePriority+0x30>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3b03      	subs	r3, #3
 8003932:	e000      	b.n	8003936 <NVIC_EncodePriority+0x32>
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	f04f 32ff 	mov.w	r2, #4294967295
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	401a      	ands	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800394c:	f04f 31ff 	mov.w	r1, #4294967295
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	43d9      	mvns	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	4313      	orrs	r3, r2
         );
}
 800395e:	4618      	mov	r0, r3
 8003960:	3724      	adds	r7, #36	@ 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003978:	d301      	bcc.n	800397e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800397a:	2301      	movs	r3, #1
 800397c:	e00f      	b.n	800399e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397e:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <SysTick_Config+0x40>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003986:	210f      	movs	r1, #15
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	f7ff ff90 	bl	80038b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <SysTick_Config+0x40>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003996:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <SysTick_Config+0x40>)
 8003998:	2207      	movs	r2, #7
 800399a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	e000e010 	.word	0xe000e010

080039ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff2d 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	4603      	mov	r3, r0
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d4:	f7ff ff42 	bl	800385c <__NVIC_GetPriorityGrouping>
 80039d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	6978      	ldr	r0, [r7, #20]
 80039e0:	f7ff ff90 	bl	8003904 <NVIC_EncodePriority>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff5f 	bl	80038b0 <__NVIC_SetPriority>
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff35 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ffa2 	bl	8003968 <SysTick_Config>
 8003a24:	4603      	mov	r3, r0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d008      	beq.n	8003a58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e020      	b.n	8003a9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 020e 	bic.w	r2, r2, #14
 8003a66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d005      	beq.n	8003ac8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e051      	b.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 020e 	bic.w	r2, r2, #14
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <HAL_DMA_Abort_IT+0xd4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d029      	beq.n	8003b46 <HAL_DMA_Abort_IT+0xa2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a21      	ldr	r2, [pc, #132]	@ (8003b7c <HAL_DMA_Abort_IT+0xd8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_DMA_Abort_IT+0x9e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <HAL_DMA_Abort_IT+0xdc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01a      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x98>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_DMA_Abort_IT+0xe0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d012      	beq.n	8003b36 <HAL_DMA_Abort_IT+0x92>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1c      	ldr	r2, [pc, #112]	@ (8003b88 <HAL_DMA_Abort_IT+0xe4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00a      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x8c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b8c <HAL_DMA_Abort_IT+0xe8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d102      	bne.n	8003b2a <HAL_DMA_Abort_IT+0x86>
 8003b24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b28:	e00e      	b.n	8003b48 <HAL_DMA_Abort_IT+0xa4>
 8003b2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b2e:	e00b      	b.n	8003b48 <HAL_DMA_Abort_IT+0xa4>
 8003b30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b34:	e008      	b.n	8003b48 <HAL_DMA_Abort_IT+0xa4>
 8003b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b3a:	e005      	b.n	8003b48 <HAL_DMA_Abort_IT+0xa4>
 8003b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b40:	e002      	b.n	8003b48 <HAL_DMA_Abort_IT+0xa4>
 8003b42:	2310      	movs	r3, #16
 8003b44:	e000      	b.n	8003b48 <HAL_DMA_Abort_IT+0xa4>
 8003b46:	2301      	movs	r3, #1
 8003b48:	4a11      	ldr	r2, [pc, #68]	@ (8003b90 <HAL_DMA_Abort_IT+0xec>)
 8003b4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
    } 
  }
  return status;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40020008 	.word	0x40020008
 8003b7c:	4002001c 	.word	0x4002001c
 8003b80:	40020030 	.word	0x40020030
 8003b84:	40020044 	.word	0x40020044
 8003b88:	40020058 	.word	0x40020058
 8003b8c:	4002006c 	.word	0x4002006c
 8003b90:	40020000 	.word	0x40020000

08003b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b08b      	sub	sp, #44	@ 0x2c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba6:	e169      	b.n	8003e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ba8:	2201      	movs	r2, #1
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	f040 8158 	bne.w	8003e76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4a9a      	ldr	r2, [pc, #616]	@ (8003e34 <HAL_GPIO_Init+0x2a0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d05e      	beq.n	8003c8e <HAL_GPIO_Init+0xfa>
 8003bd0:	4a98      	ldr	r2, [pc, #608]	@ (8003e34 <HAL_GPIO_Init+0x2a0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d875      	bhi.n	8003cc2 <HAL_GPIO_Init+0x12e>
 8003bd6:	4a98      	ldr	r2, [pc, #608]	@ (8003e38 <HAL_GPIO_Init+0x2a4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d058      	beq.n	8003c8e <HAL_GPIO_Init+0xfa>
 8003bdc:	4a96      	ldr	r2, [pc, #600]	@ (8003e38 <HAL_GPIO_Init+0x2a4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d86f      	bhi.n	8003cc2 <HAL_GPIO_Init+0x12e>
 8003be2:	4a96      	ldr	r2, [pc, #600]	@ (8003e3c <HAL_GPIO_Init+0x2a8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d052      	beq.n	8003c8e <HAL_GPIO_Init+0xfa>
 8003be8:	4a94      	ldr	r2, [pc, #592]	@ (8003e3c <HAL_GPIO_Init+0x2a8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d869      	bhi.n	8003cc2 <HAL_GPIO_Init+0x12e>
 8003bee:	4a94      	ldr	r2, [pc, #592]	@ (8003e40 <HAL_GPIO_Init+0x2ac>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04c      	beq.n	8003c8e <HAL_GPIO_Init+0xfa>
 8003bf4:	4a92      	ldr	r2, [pc, #584]	@ (8003e40 <HAL_GPIO_Init+0x2ac>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d863      	bhi.n	8003cc2 <HAL_GPIO_Init+0x12e>
 8003bfa:	4a92      	ldr	r2, [pc, #584]	@ (8003e44 <HAL_GPIO_Init+0x2b0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d046      	beq.n	8003c8e <HAL_GPIO_Init+0xfa>
 8003c00:	4a90      	ldr	r2, [pc, #576]	@ (8003e44 <HAL_GPIO_Init+0x2b0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d85d      	bhi.n	8003cc2 <HAL_GPIO_Init+0x12e>
 8003c06:	2b12      	cmp	r3, #18
 8003c08:	d82a      	bhi.n	8003c60 <HAL_GPIO_Init+0xcc>
 8003c0a:	2b12      	cmp	r3, #18
 8003c0c:	d859      	bhi.n	8003cc2 <HAL_GPIO_Init+0x12e>
 8003c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <HAL_GPIO_Init+0x80>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c8f 	.word	0x08003c8f
 8003c18:	08003c69 	.word	0x08003c69
 8003c1c:	08003c7b 	.word	0x08003c7b
 8003c20:	08003cbd 	.word	0x08003cbd
 8003c24:	08003cc3 	.word	0x08003cc3
 8003c28:	08003cc3 	.word	0x08003cc3
 8003c2c:	08003cc3 	.word	0x08003cc3
 8003c30:	08003cc3 	.word	0x08003cc3
 8003c34:	08003cc3 	.word	0x08003cc3
 8003c38:	08003cc3 	.word	0x08003cc3
 8003c3c:	08003cc3 	.word	0x08003cc3
 8003c40:	08003cc3 	.word	0x08003cc3
 8003c44:	08003cc3 	.word	0x08003cc3
 8003c48:	08003cc3 	.word	0x08003cc3
 8003c4c:	08003cc3 	.word	0x08003cc3
 8003c50:	08003cc3 	.word	0x08003cc3
 8003c54:	08003cc3 	.word	0x08003cc3
 8003c58:	08003c71 	.word	0x08003c71
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	4a79      	ldr	r2, [pc, #484]	@ (8003e48 <HAL_GPIO_Init+0x2b4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c66:	e02c      	b.n	8003cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	623b      	str	r3, [r7, #32]
          break;
 8003c6e:	e029      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	3304      	adds	r3, #4
 8003c76:	623b      	str	r3, [r7, #32]
          break;
 8003c78:	e024      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	623b      	str	r3, [r7, #32]
          break;
 8003c82:	e01f      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	623b      	str	r3, [r7, #32]
          break;
 8003c8c:	e01a      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c96:	2304      	movs	r3, #4
 8003c98:	623b      	str	r3, [r7, #32]
          break;
 8003c9a:	e013      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	611a      	str	r2, [r3, #16]
          break;
 8003cae:	e009      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cb0:	2308      	movs	r3, #8
 8003cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	615a      	str	r2, [r3, #20]
          break;
 8003cba:	e003      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	623b      	str	r3, [r7, #32]
          break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_GPIO_Init+0x130>
          break;
 8003cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2bff      	cmp	r3, #255	@ 0xff
 8003cc8:	d801      	bhi.n	8003cce <HAL_GPIO_Init+0x13a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	e001      	b.n	8003cd2 <HAL_GPIO_Init+0x13e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2bff      	cmp	r3, #255	@ 0xff
 8003cd8:	d802      	bhi.n	8003ce0 <HAL_GPIO_Init+0x14c>
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	e002      	b.n	8003ce6 <HAL_GPIO_Init+0x152>
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	3b08      	subs	r3, #8
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	210f      	movs	r1, #15
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	6a39      	ldr	r1, [r7, #32]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80b1 	beq.w	8003e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d14:	4b4d      	ldr	r3, [pc, #308]	@ (8003e4c <HAL_GPIO_Init+0x2b8>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	4a4c      	ldr	r2, [pc, #304]	@ (8003e4c <HAL_GPIO_Init+0x2b8>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6193      	str	r3, [r2, #24]
 8003d20:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <HAL_GPIO_Init+0x2b8>)
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d2c:	4a48      	ldr	r2, [pc, #288]	@ (8003e50 <HAL_GPIO_Init+0x2bc>)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	220f      	movs	r2, #15
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a40      	ldr	r2, [pc, #256]	@ (8003e54 <HAL_GPIO_Init+0x2c0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_GPIO_Init+0x1ec>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e58 <HAL_GPIO_Init+0x2c4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00d      	beq.n	8003d7c <HAL_GPIO_Init+0x1e8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3e      	ldr	r2, [pc, #248]	@ (8003e5c <HAL_GPIO_Init+0x2c8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <HAL_GPIO_Init+0x1e4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e60 <HAL_GPIO_Init+0x2cc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_GPIO_Init+0x1e0>
 8003d70:	2303      	movs	r3, #3
 8003d72:	e006      	b.n	8003d82 <HAL_GPIO_Init+0x1ee>
 8003d74:	2304      	movs	r3, #4
 8003d76:	e004      	b.n	8003d82 <HAL_GPIO_Init+0x1ee>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e002      	b.n	8003d82 <HAL_GPIO_Init+0x1ee>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_GPIO_Init+0x1ee>
 8003d80:	2300      	movs	r3, #0
 8003d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d84:	f002 0203 	and.w	r2, r2, #3
 8003d88:	0092      	lsls	r2, r2, #2
 8003d8a:	4093      	lsls	r3, r2
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d92:	492f      	ldr	r1, [pc, #188]	@ (8003e50 <HAL_GPIO_Init+0x2bc>)
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	3302      	adds	r3, #2
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dac:	4b2d      	ldr	r3, [pc, #180]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	492c      	ldr	r1, [pc, #176]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]
 8003db8:	e006      	b.n	8003dc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dba:	4b2a      	ldr	r3, [pc, #168]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	4928      	ldr	r1, [pc, #160]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003dd4:	4b23      	ldr	r3, [pc, #140]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4922      	ldr	r1, [pc, #136]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60cb      	str	r3, [r1, #12]
 8003de0:	e006      	b.n	8003df0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003de2:	4b20      	ldr	r3, [pc, #128]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	491e      	ldr	r1, [pc, #120]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4918      	ldr	r1, [pc, #96]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]
 8003e08:	e006      	b.n	8003e18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e0a:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	4914      	ldr	r1, [pc, #80]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d021      	beq.n	8003e68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	490e      	ldr	r1, [pc, #56]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]
 8003e30:	e021      	b.n	8003e76 <HAL_GPIO_Init+0x2e2>
 8003e32:	bf00      	nop
 8003e34:	10320000 	.word	0x10320000
 8003e38:	10310000 	.word	0x10310000
 8003e3c:	10220000 	.word	0x10220000
 8003e40:	10210000 	.word	0x10210000
 8003e44:	10120000 	.word	0x10120000
 8003e48:	10110000 	.word	0x10110000
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010800 	.word	0x40010800
 8003e58:	40010c00 	.word	0x40010c00
 8003e5c:	40011000 	.word	0x40011000
 8003e60:	40011400 	.word	0x40011400
 8003e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e68:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_GPIO_Init+0x304>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	4909      	ldr	r1, [pc, #36]	@ (8003e98 <HAL_GPIO_Init+0x304>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	3301      	adds	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f47f ae8e 	bne.w	8003ba8 <HAL_GPIO_Init+0x14>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	372c      	adds	r7, #44	@ 0x2c
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	40010400 	.word	0x40010400

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eac:	787b      	ldrb	r3, [r7, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003eb8:	e003      	b.n	8003ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	041a      	lsls	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e272      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8087 	beq.w	8003ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eec:	4b92      	ldr	r3, [pc, #584]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d00c      	beq.n	8003f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d112      	bne.n	8003f2a <HAL_RCC_OscConfig+0x5e>
 8003f04:	4b8c      	ldr	r3, [pc, #560]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f10:	d10b      	bne.n	8003f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f12:	4b89      	ldr	r3, [pc, #548]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d06c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x12c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d168      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e24c      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x76>
 8003f34:	4b80      	ldr	r3, [pc, #512]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a7f      	ldr	r2, [pc, #508]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	e02e      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x98>
 8003f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a7a      	ldr	r2, [pc, #488]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b78      	ldr	r3, [pc, #480]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a77      	ldr	r2, [pc, #476]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0xbc>
 8003f6e:	4b72      	ldr	r3, [pc, #456]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a71      	ldr	r2, [pc, #452]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xd4>
 8003f88:	4b6b      	ldr	r3, [pc, #428]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b68      	ldr	r3, [pc, #416]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a67      	ldr	r2, [pc, #412]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7ff fc06 	bl	80037b8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7ff fc02 	bl	80037b8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e200      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xe4>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7ff fbf2 	bl	80037b8 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7ff fbee 	bl	80037b8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	@ 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1ec      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	4b53      	ldr	r3, [pc, #332]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x10c>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004006:	4b4c      	ldr	r3, [pc, #304]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004012:	4b49      	ldr	r3, [pc, #292]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b08      	cmp	r3, #8
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x18c>
 800401e:	4b46      	ldr	r3, [pc, #280]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	4b43      	ldr	r3, [pc, #268]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x176>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e1c0      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4939      	ldr	r1, [pc, #228]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	e03a      	b.n	80040ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004060:	4b36      	ldr	r3, [pc, #216]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7ff fba7 	bl	80037b8 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406e:	f7ff fba3 	bl	80037b8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1a1      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	4b2d      	ldr	r3, [pc, #180]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408c:	4b2a      	ldr	r3, [pc, #168]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4927      	ldr	r1, [pc, #156]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	e015      	b.n	80040ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a2:	4b26      	ldr	r3, [pc, #152]	@ (800413c <HAL_RCC_OscConfig+0x270>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7ff fb86 	bl	80037b8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b0:	f7ff fb82 	bl	80037b8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e180      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d03a      	beq.n	8004150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d019      	beq.n	8004116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e2:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <HAL_RCC_OscConfig+0x274>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e8:	f7ff fb66 	bl	80037b8 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f0:	f7ff fb62 	bl	80037b8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e160      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <HAL_RCC_OscConfig+0x26c>)
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800410e:	2001      	movs	r0, #1
 8004110:	f000 face 	bl	80046b0 <RCC_Delay>
 8004114:	e01c      	b.n	8004150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <HAL_RCC_OscConfig+0x274>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411c:	f7ff fb4c 	bl	80037b8 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004122:	e00f      	b.n	8004144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004124:	f7ff fb48 	bl	80037b8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d908      	bls.n	8004144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e146      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	42420000 	.word	0x42420000
 8004140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	4b92      	ldr	r3, [pc, #584]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e9      	bne.n	8004124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a6 	beq.w	80042aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415e:	2300      	movs	r3, #0
 8004160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004162:	4b8b      	ldr	r3, [pc, #556]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416e:	4b88      	ldr	r3, [pc, #544]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	4a87      	ldr	r2, [pc, #540]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004178:	61d3      	str	r3, [r2, #28]
 800417a:	4b85      	ldr	r3, [pc, #532]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b82      	ldr	r3, [pc, #520]	@ (8004394 <HAL_RCC_OscConfig+0x4c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d118      	bne.n	80041c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004196:	4b7f      	ldr	r3, [pc, #508]	@ (8004394 <HAL_RCC_OscConfig+0x4c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7e      	ldr	r2, [pc, #504]	@ (8004394 <HAL_RCC_OscConfig+0x4c8>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7ff fb09 	bl	80037b8 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7ff fb05 	bl	80037b8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	@ 0x64
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e103      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b75      	ldr	r3, [pc, #468]	@ (8004394 <HAL_RCC_OscConfig+0x4c8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x312>
 80041d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6213      	str	r3, [r2, #32]
 80041dc:	e02d      	b.n	800423a <HAL_RCC_OscConfig+0x36e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x334>
 80041e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4a69      	ldr	r2, [pc, #420]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6213      	str	r3, [r2, #32]
 80041f2:	4b67      	ldr	r3, [pc, #412]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4a66      	ldr	r2, [pc, #408]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	f023 0304 	bic.w	r3, r3, #4
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	e01c      	b.n	800423a <HAL_RCC_OscConfig+0x36e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d10c      	bne.n	8004222 <HAL_RCC_OscConfig+0x356>
 8004208:	4b61      	ldr	r3, [pc, #388]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4a60      	ldr	r2, [pc, #384]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6213      	str	r3, [r2, #32]
 8004214:	4b5e      	ldr	r3, [pc, #376]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4a5d      	ldr	r2, [pc, #372]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6213      	str	r3, [r2, #32]
 8004220:	e00b      	b.n	800423a <HAL_RCC_OscConfig+0x36e>
 8004222:	4b5b      	ldr	r3, [pc, #364]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4a5a      	ldr	r2, [pc, #360]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6213      	str	r3, [r2, #32]
 800422e:	4b58      	ldr	r3, [pc, #352]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a57      	ldr	r2, [pc, #348]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d015      	beq.n	800426e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004242:	f7ff fab9 	bl	80037b8 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7ff fab5 	bl	80037b8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0b1      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	4b4b      	ldr	r3, [pc, #300]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ee      	beq.n	800424a <HAL_RCC_OscConfig+0x37e>
 800426c:	e014      	b.n	8004298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7ff faa3 	bl	80037b8 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004274:	e00a      	b.n	800428c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7ff fa9f 	bl	80037b8 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e09b      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428c:	4b40      	ldr	r3, [pc, #256]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ee      	bne.n	8004276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4b3c      	ldr	r3, [pc, #240]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8087 	beq.w	80043c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b4:	4b36      	ldr	r3, [pc, #216]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d061      	beq.n	8004384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d146      	bne.n	8004356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c8:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7ff fa73 	bl	80037b8 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d6:	f7ff fa6f 	bl	80037b8 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e06d      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e8:	4b29      	ldr	r3, [pc, #164]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fc:	d108      	bne.n	8004310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	4921      	ldr	r1, [pc, #132]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004310:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a19      	ldr	r1, [r3, #32]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	430b      	orrs	r3, r1
 8004322:	491b      	ldr	r1, [pc, #108]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004328:	4b1b      	ldr	r3, [pc, #108]	@ (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432e:	f7ff fa43 	bl	80037b8 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004336:	f7ff fa3f 	bl	80037b8 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e03d      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004348:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x46a>
 8004354:	e035      	b.n	80043c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7ff fa2c 	bl	80037b8 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7ff fa28 	bl	80037b8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e026      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004376:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x498>
 8004382:	e01e      	b.n	80043c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e019      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
 8004390:	40021000 	.word	0x40021000
 8004394:	40007000 	.word	0x40007000
 8004398:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <HAL_RCC_OscConfig+0x500>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d106      	bne.n	80043be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000

080043d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0d0      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d910      	bls.n	8004414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b67      	ldr	r3, [pc, #412]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	4965      	ldr	r1, [pc, #404]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b63      	ldr	r3, [pc, #396]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0b8      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800442c:	4b59      	ldr	r3, [pc, #356]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a58      	ldr	r2, [pc, #352]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004444:	4b53      	ldr	r3, [pc, #332]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a52      	ldr	r2, [pc, #328]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800444e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004450:	4b50      	ldr	r3, [pc, #320]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	494d      	ldr	r1, [pc, #308]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d040      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d115      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e073      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4b3d      	ldr	r3, [pc, #244]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06b      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	4b39      	ldr	r3, [pc, #228]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4936      	ldr	r1, [pc, #216]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c0:	f7ff f97a 	bl	80037b8 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	e00a      	b.n	80044de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7ff f976 	bl	80037b8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e053      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b2d      	ldr	r3, [pc, #180]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 020c 	and.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1eb      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d210      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b24      	ldr	r3, [pc, #144]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 0207 	bic.w	r2, r3, #7
 8004506:	4922      	ldr	r1, [pc, #136]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e032      	b.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800452c:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4916      	ldr	r1, [pc, #88]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	490e      	ldr	r1, [pc, #56]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800455e:	f000 f821 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004562:	4602      	mov	r2, r0
 8004564:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	490a      	ldr	r1, [pc, #40]	@ (8004598 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	5ccb      	ldrb	r3, [r1, r3]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	4a09      	ldr	r2, [pc, #36]	@ (800459c <HAL_RCC_ClockConfig+0x1cc>)
 8004578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800457a:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <HAL_RCC_ClockConfig+0x1d0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff f8d8 	bl	8003734 <HAL_InitTick>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40022000 	.word	0x40022000
 8004594:	40021000 	.word	0x40021000
 8004598:	0800a114 	.word	0x0800a114
 800459c:	200000d0 	.word	0x200000d0
 80045a0:	200000d4 	.word	0x200000d4

080045a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045be:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x94>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d002      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x30>
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d003      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x36>
 80045d2:	e027      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d4:	4b19      	ldr	r3, [pc, #100]	@ (800463c <HAL_RCC_GetSysClockFreq+0x98>)
 80045d6:	613b      	str	r3, [r7, #16]
      break;
 80045d8:	e027      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	0c9b      	lsrs	r3, r3, #18
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045e4:	5cd3      	ldrb	r3, [r2, r3]
 80045e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045f2:	4b11      	ldr	r3, [pc, #68]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x94>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	0c5b      	lsrs	r3, r3, #17
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	4a11      	ldr	r2, [pc, #68]	@ (8004644 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045fe:	5cd3      	ldrb	r3, [r2, r3]
 8004600:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a0d      	ldr	r2, [pc, #52]	@ (800463c <HAL_RCC_GetSysClockFreq+0x98>)
 8004606:	fb03 f202 	mul.w	r2, r3, r2
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e004      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a0c      	ldr	r2, [pc, #48]	@ (8004648 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	613b      	str	r3, [r7, #16]
      break;
 8004622:	e002      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_GetSysClockFreq+0x98>)
 8004626:	613b      	str	r3, [r7, #16]
      break;
 8004628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462a:	693b      	ldr	r3, [r7, #16]
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	007a1200 	.word	0x007a1200
 8004640:	0800a12c 	.word	0x0800a12c
 8004644:	0800a13c 	.word	0x0800a13c
 8004648:	003d0900 	.word	0x003d0900

0800464c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004650:	4b02      	ldr	r3, [pc, #8]	@ (800465c <HAL_RCC_GetHCLKFreq+0x10>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	200000d0 	.word	0x200000d0

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004664:	f7ff fff2 	bl	800464c <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	@ (8004684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	0800a124 	.word	0x0800a124

08004688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800468c:	f7ff ffde 	bl	800464c <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	0adb      	lsrs	r3, r3, #11
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4903      	ldr	r1, [pc, #12]	@ (80046ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000
 80046ac:	0800a124 	.word	0x0800a124

080046b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046b8:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <RCC_Delay+0x34>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0a      	ldr	r2, [pc, #40]	@ (80046e8 <RCC_Delay+0x38>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	0a5b      	lsrs	r3, r3, #9
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046cc:	bf00      	nop
  }
  while (Delay --);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1e5a      	subs	r2, r3, #1
 80046d2:	60fa      	str	r2, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f9      	bne.n	80046cc <RCC_Delay+0x1c>
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	200000d0 	.word	0x200000d0
 80046e8:	10624dd3 	.word	0x10624dd3

080046ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e041      	b.n	8004782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fe fe28 	bl	8003368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f000 fa2c 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e041      	b.n	8004820 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f839 	bl	8004828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f000 f9dd 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
	...

0800483c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_TIM_PWM_Start+0x24>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e022      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b04      	cmp	r3, #4
 8004864:	d109      	bne.n	800487a <HAL_TIM_PWM_Start+0x3e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e015      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d109      	bne.n	8004894 <HAL_TIM_PWM_Start+0x58>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e008      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e05e      	b.n	800496c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0x82>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0x92>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fc4d 	bl	800518e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004974 <HAL_TIM_PWM_Start+0x138>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d107      	bne.n	800490e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800490c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a18      	ldr	r2, [pc, #96]	@ (8004974 <HAL_TIM_PWM_Start+0x138>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_TIM_PWM_Start+0xfa>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004920:	d009      	beq.n	8004936 <HAL_TIM_PWM_Start+0xfa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <HAL_TIM_PWM_Start+0x13c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_TIM_PWM_Start+0xfa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a12      	ldr	r2, [pc, #72]	@ (800497c <HAL_TIM_PWM_Start+0x140>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d111      	bne.n	800495a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d010      	beq.n	800496a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	e007      	b.n	800496a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800

08004980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800499a:	2302      	movs	r3, #2
 800499c:	e0ae      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	f200 809f 	bhi.w	8004aec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049ae:	a201      	add	r2, pc, #4	@ (adr r2, 80049b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004aed 	.word	0x08004aed
 80049bc:	08004aed 	.word	0x08004aed
 80049c0:	08004aed 	.word	0x08004aed
 80049c4:	08004a29 	.word	0x08004a29
 80049c8:	08004aed 	.word	0x08004aed
 80049cc:	08004aed 	.word	0x08004aed
 80049d0:	08004aed 	.word	0x08004aed
 80049d4:	08004a6b 	.word	0x08004a6b
 80049d8:	08004aed 	.word	0x08004aed
 80049dc:	08004aed 	.word	0x08004aed
 80049e0:	08004aed 	.word	0x08004aed
 80049e4:	08004aab 	.word	0x08004aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f938 	bl	8004c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0208 	orr.w	r2, r2, #8
 8004a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0204 	bic.w	r2, r2, #4
 8004a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6999      	ldr	r1, [r3, #24]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	619a      	str	r2, [r3, #24]
      break;
 8004a26:	e064      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f97e 	bl	8004d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6999      	ldr	r1, [r3, #24]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	021a      	lsls	r2, r3, #8
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	619a      	str	r2, [r3, #24]
      break;
 8004a68:	e043      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f9c7 	bl	8004e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0208 	orr.w	r2, r2, #8
 8004a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0204 	bic.w	r2, r2, #4
 8004a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69d9      	ldr	r1, [r3, #28]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	61da      	str	r2, [r3, #28]
      break;
 8004aa8:	e023      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fa11 	bl	8004ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	021a      	lsls	r2, r3, #8
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	61da      	str	r2, [r3, #28]
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e031      	b.n	8004b80 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa20 	bl	8004f74 <TIM_SlaveTimer_SetConfig>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e018      	b.n	8004b80 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b6c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c58 <TIM_Base_SetConfig+0xd0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_Base_SetConfig+0x30>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba6:	d007      	beq.n	8004bb8 <TIM_Base_SetConfig+0x30>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2c      	ldr	r2, [pc, #176]	@ (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_Base_SetConfig+0x30>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c60 <TIM_Base_SetConfig+0xd8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d108      	bne.n	8004bca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a22      	ldr	r2, [pc, #136]	@ (8004c58 <TIM_Base_SetConfig+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_Base_SetConfig+0x62>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd8:	d007      	beq.n	8004bea <TIM_Base_SetConfig+0x62>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_Base_SetConfig+0x62>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c60 <TIM_Base_SetConfig+0xd8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a0d      	ldr	r2, [pc, #52]	@ (8004c58 <TIM_Base_SetConfig+0xd0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	611a      	str	r2, [r3, #16]
  }
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800

08004c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f023 0201 	bic.w	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 0302 	bic.w	r3, r3, #2
 8004cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a1c      	ldr	r2, [pc, #112]	@ (8004d2c <TIM_OC1_SetConfig+0xc8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10c      	bne.n	8004cda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f023 0308 	bic.w	r3, r3, #8
 8004cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 0304 	bic.w	r3, r3, #4
 8004cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a13      	ldr	r2, [pc, #76]	@ (8004d2c <TIM_OC1_SetConfig+0xc8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00

08004d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f023 0210 	bic.w	r2, r3, #16
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0320 	bic.w	r3, r3, #32
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <TIM_OC2_SetConfig+0xd0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10d      	bne.n	8004dac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004daa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <TIM_OC2_SetConfig+0xd0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d113      	bne.n	8004ddc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr
 8004e00:	40012c00 	.word	0x40012c00

08004e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed4 <TIM_OC3_SetConfig+0xd0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d10d      	bne.n	8004e7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a14      	ldr	r2, [pc, #80]	@ (8004ed4 <TIM_OC3_SetConfig+0xd0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d113      	bne.n	8004eae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	621a      	str	r2, [r3, #32]
}
 8004ec8:	bf00      	nop
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00

08004ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	031b      	lsls	r3, r3, #12
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a0f      	ldr	r2, [pc, #60]	@ (8004f70 <TIM_OC4_SetConfig+0x98>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d109      	bne.n	8004f4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	40012c00 	.word	0x40012c00

08004f74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f023 0307 	bic.w	r3, r3, #7
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b70      	cmp	r3, #112	@ 0x70
 8004fbc:	d01a      	beq.n	8004ff4 <TIM_SlaveTimer_SetConfig+0x80>
 8004fbe:	2b70      	cmp	r3, #112	@ 0x70
 8004fc0:	d860      	bhi.n	8005084 <TIM_SlaveTimer_SetConfig+0x110>
 8004fc2:	2b60      	cmp	r3, #96	@ 0x60
 8004fc4:	d054      	beq.n	8005070 <TIM_SlaveTimer_SetConfig+0xfc>
 8004fc6:	2b60      	cmp	r3, #96	@ 0x60
 8004fc8:	d85c      	bhi.n	8005084 <TIM_SlaveTimer_SetConfig+0x110>
 8004fca:	2b50      	cmp	r3, #80	@ 0x50
 8004fcc:	d046      	beq.n	800505c <TIM_SlaveTimer_SetConfig+0xe8>
 8004fce:	2b50      	cmp	r3, #80	@ 0x50
 8004fd0:	d858      	bhi.n	8005084 <TIM_SlaveTimer_SetConfig+0x110>
 8004fd2:	2b40      	cmp	r3, #64	@ 0x40
 8004fd4:	d019      	beq.n	800500a <TIM_SlaveTimer_SetConfig+0x96>
 8004fd6:	2b40      	cmp	r3, #64	@ 0x40
 8004fd8:	d854      	bhi.n	8005084 <TIM_SlaveTimer_SetConfig+0x110>
 8004fda:	2b30      	cmp	r3, #48	@ 0x30
 8004fdc:	d055      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x116>
 8004fde:	2b30      	cmp	r3, #48	@ 0x30
 8004fe0:	d850      	bhi.n	8005084 <TIM_SlaveTimer_SetConfig+0x110>
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d051      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x116>
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d84c      	bhi.n	8005084 <TIM_SlaveTimer_SetConfig+0x110>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04d      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x116>
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d04b      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x116>
 8004ff2:	e047      	b.n	8005084 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005004:	f000 f8a4 	bl	8005150 <TIM_ETR_SetConfig>
      break;
 8005008:	e040      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b05      	cmp	r3, #5
 8005010:	d101      	bne.n	8005016 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e03b      	b.n	800508e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6a1a      	ldr	r2, [r3, #32]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800503c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4313      	orrs	r3, r2
 8005048:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
      break;
 800505a:	e017      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005068:	461a      	mov	r2, r3
 800506a:	f000 f814 	bl	8005096 <TIM_TI1_ConfigInputStage>
      break;
 800506e:	e00d      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800507c:	461a      	mov	r2, r3
 800507e:	f000 f838 	bl	80050f2 <TIM_TI2_ConfigInputStage>
      break;
 8005082:	e003      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
      break;
 8005088:	e000      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800508a:	bf00      	nop
  }

  return status;
 800508c:	7dfb      	ldrb	r3, [r7, #23]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005096:	b480      	push	{r7}
 8005098:	b087      	sub	sp, #28
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f023 0201 	bic.w	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 030a 	bic.w	r3, r3, #10
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f023 0210 	bic.w	r2, r3, #16
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800511c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800512e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800516a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	021a      	lsls	r2, r3, #8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	431a      	orrs	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	2201      	movs	r2, #1
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1a      	ldr	r2, [r3, #32]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	401a      	ands	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	431a      	orrs	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e046      	b.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a16      	ldr	r2, [pc, #88]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523c:	d009      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a12      	ldr	r2, [pc, #72]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a10      	ldr	r2, [pc, #64]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10c      	bne.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4313      	orrs	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800

08005294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e042      	b.n	800532c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fe f872 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	@ 0x24
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fdb7 	bl	8005e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800530c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	@ 0x28
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b20      	cmp	r3, #32
 8005352:	d175      	bne.n	8005440 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_UART_Transmit+0x2c>
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e06e      	b.n	8005442 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2221      	movs	r2, #33	@ 0x21
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005372:	f7fe fa21 	bl	80037b8 <HAL_GetTick>
 8005376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538c:	d108      	bne.n	80053a0 <HAL_UART_Transmit+0x6c>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e003      	b.n	80053a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053a8:	e02e      	b.n	8005408 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	@ 0x80
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fb1c 	bl	80059f2 <UART_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e03a      	b.n	8005442 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	3302      	adds	r3, #2
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e007      	b.n	80053fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	3301      	adds	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1cb      	bne.n	80053aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	2140      	movs	r1, #64	@ 0x40
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fae8 	bl	80059f2 <UART_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e006      	b.n	8005442 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
  }
}
 8005442:	4618      	mov	r0, r3
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	4613      	mov	r3, r2
 8005456:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	d112      	bne.n	800548a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_UART_Receive_IT+0x26>
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e00b      	b.n	800548c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	461a      	mov	r2, r3
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fb0f 	bl	8005aa4 <UART_Start_Receive_IT>
 8005486:	4603      	mov	r3, r0
 8005488:	e000      	b.n	800548c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b0ba      	sub	sp, #232	@ 0xe8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_UART_IRQHandler+0x66>
 80054e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fbec 	bl	8005cd0 <UART_Receive_IT>
      return;
 80054f8:	e25b      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80de 	beq.w	80056c0 <HAL_UART_IRQHandler+0x22c>
 8005504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005514:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80d1 	beq.w	80056c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_UART_IRQHandler+0xae>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_UART_IRQHandler+0xd2>
 800554e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_UART_IRQHandler+0xf6>
 8005572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	f043 0204 	orr.w	r2, r3, #4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d011      	beq.n	80055ba <HAL_UART_IRQHandler+0x126>
 8005596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 81f2 	beq.w	80059a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_UART_IRQHandler+0x14e>
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb77 	bl	8005cd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <HAL_UART_IRQHandler+0x17a>
 8005606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04f      	beq.n	80056ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa81 	bl	8005b16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d041      	beq.n	80056a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800563c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800564e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800565a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	4a7e      	ldr	r2, [pc, #504]	@ (8005874 <HAL_UART_IRQHandler+0x3e0>)
 800567c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fa0e 	bl	8003aa4 <HAL_DMA_Abort_IT>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e00e      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f993 	bl	80059ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00a      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f98f 	bl	80059ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e006      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f98b 	bl	80059ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056ba:	e175      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	bf00      	nop
    return;
 80056be:	e173      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 814f 	bne.w	8005968 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8148 	beq.w	8005968 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8141 	beq.w	8005968 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80b6 	beq.w	8005878 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8145 	beq.w	80059ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800572a:	429a      	cmp	r2, r3
 800572c:	f080 813e 	bcs.w	80059ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005736:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b20      	cmp	r3, #32
 8005740:	f000 8088 	beq.w	8005854 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	330c      	adds	r3, #12
 800574a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800575a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800575e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005762:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005770:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800577c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1d9      	bne.n	8005744 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e1      	bne.n	8005790 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3314      	adds	r3, #20
 80057d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e3      	bne.n	80057cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	f023 0310 	bic.w	r3, r3, #16
 8005828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005836:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005838:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800583c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e3      	bne.n	8005812 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe f8ed 	bl	8003a2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005862:	b29b      	uxth	r3, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	b29b      	uxth	r3, r3
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8b6 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005870:	e09c      	b.n	80059ac <HAL_UART_IRQHandler+0x518>
 8005872:	bf00      	nop
 8005874:	08005bdb 	.word	0x08005bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005880:	b29b      	uxth	r3, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 808e 	beq.w	80059b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8089 	beq.w	80059b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80058c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e3      	bne.n	800589e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	623b      	str	r3, [r7, #32]
   return(result);
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3314      	adds	r3, #20
 80058f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80058fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e3      	bne.n	80058d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	60fb      	str	r3, [r7, #12]
   return(result);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0310 	bic.w	r3, r3, #16
 8005932:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005940:	61fa      	str	r2, [r7, #28]
 8005942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	69b9      	ldr	r1, [r7, #24]
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	617b      	str	r3, [r7, #20]
   return(result);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e3      	bne.n	800591c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800595a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f83b 	bl	80059dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005966:	e023      	b.n	80059b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <HAL_UART_IRQHandler+0x4f4>
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f93e 	bl	8005c02 <UART_Transmit_IT>
    return;
 8005986:	e014      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <HAL_UART_IRQHandler+0x51e>
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f97d 	bl	8005ca0 <UART_EndTransmit_IT>
    return;
 80059a6:	e004      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80059a8:	bf00      	nop
 80059aa:	e002      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80059b0:	bf00      	nop
  }
}
 80059b2:	37e8      	adds	r7, #232	@ 0xe8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b086      	sub	sp, #24
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	4613      	mov	r3, r2
 8005a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a02:	e03b      	b.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d037      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0c:	f7fd fed4 	bl	80037b8 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d302      	bcc.n	8005a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e03a      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d023      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b80      	cmp	r3, #128	@ 0x80
 8005a38:	d020      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b40      	cmp	r3, #64	@ 0x40
 8005a3e:	d01d      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d116      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f856 	bl	8005b16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e00f      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4013      	ands	r3, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d0b4      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2222      	movs	r2, #34	@ 0x22
 8005ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ae8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0220 	orr.w	r2, r2, #32
 8005b08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b095      	sub	sp, #84	@ 0x54
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3314      	adds	r3, #20
 8005b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3314      	adds	r3, #20
 8005b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d119      	bne.n	8005bc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f023 0310 	bic.w	r3, r3, #16
 8005ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bae:	61ba      	str	r2, [r7, #24]
 8005bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6979      	ldr	r1, [r7, #20]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	613b      	str	r3, [r7, #16]
   return(result);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e5      	bne.n	8005b8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bd0:	bf00      	nop
 8005bd2:	3754      	adds	r7, #84	@ 0x54
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff fee8 	bl	80059ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b21      	cmp	r3, #33	@ 0x21
 8005c14:	d13e      	bne.n	8005c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1e:	d114      	bne.n	8005c4a <UART_Transmit_IT+0x48>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d110      	bne.n	8005c4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	1c9a      	adds	r2, r3, #2
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]
 8005c48:	e008      	b.n	8005c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6211      	str	r1, [r2, #32]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10f      	bne.n	8005c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fe79 	bl	80059b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	@ 0x30
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b22      	cmp	r3, #34	@ 0x22
 8005ce2:	f040 80ae 	bne.w	8005e42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cee:	d117      	bne.n	8005d20 <UART_Receive_IT+0x50>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d113      	bne.n	8005d20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d18:	1c9a      	adds	r2, r3, #2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d1e:	e026      	b.n	8005d6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d32:	d007      	beq.n	8005d44 <UART_Receive_IT+0x74>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <UART_Receive_IT+0x82>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	e008      	b.n	8005d64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d15d      	bne.n	8005e3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0220 	bic.w	r2, r2, #32
 8005d90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d135      	bne.n	8005e34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dee:	623a      	str	r2, [r7, #32]
 8005df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	69f9      	ldr	r1, [r7, #28]
 8005df4:	6a3a      	ldr	r2, [r7, #32]
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b10      	cmp	r3, #16
 8005e0e:	d10a      	bne.n	8005e26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff fdd5 	bl	80059dc <HAL_UARTEx_RxEventCallback>
 8005e32:	e002      	b.n	8005e3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fc ff75 	bl	8002d24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e002      	b.n	8005e44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3730      	adds	r7, #48	@ 0x30
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e86:	f023 030c 	bic.w	r3, r3, #12
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	430b      	orrs	r3, r1
 8005e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2c      	ldr	r2, [pc, #176]	@ (8005f60 <UART_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d103      	bne.n	8005ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005eb4:	f7fe fbe8 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	e002      	b.n	8005ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fe fbd0 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8005ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009a      	lsls	r2, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <UART_SetConfig+0x118>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	0119      	lsls	r1, r3, #4
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f64 <UART_SetConfig+0x118>)
 8005efa:	fba3 0302 	umull	r0, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2064      	movs	r0, #100	@ 0x64
 8005f02:	fb00 f303 	mul.w	r3, r0, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	3332      	adds	r3, #50	@ 0x32
 8005f0c:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <UART_SetConfig+0x118>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f18:	4419      	add	r1, r3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009a      	lsls	r2, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f30:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <UART_SetConfig+0x118>)
 8005f32:	fba3 0302 	umull	r0, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2064      	movs	r0, #100	@ 0x64
 8005f3a:	fb00 f303 	mul.w	r3, r0, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	3332      	adds	r3, #50	@ 0x32
 8005f44:	4a07      	ldr	r2, [pc, #28]	@ (8005f64 <UART_SetConfig+0x118>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	440a      	add	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40013800 	.word	0x40013800
 8005f64:	51eb851f 	.word	0x51eb851f

08005f68 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6892      	ldr	r2, [r2, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6852      	ldr	r2, [r2, #4]
 8005fce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d103      	bne.n	8005fe2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600a:	4b4f      	ldr	r3, [pc, #316]	@ (8006148 <xTaskIncrementTick+0x148>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 808f 	bne.w	8006132 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006014:	4b4d      	ldr	r3, [pc, #308]	@ (800614c <xTaskIncrementTick+0x14c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800601c:	4a4b      	ldr	r2, [pc, #300]	@ (800614c <xTaskIncrementTick+0x14c>)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d121      	bne.n	800606c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006028:	4b49      	ldr	r3, [pc, #292]	@ (8006150 <xTaskIncrementTick+0x150>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xTaskIncrementTick+0x46>
 800604a:	4b41      	ldr	r3, [pc, #260]	@ (8006150 <xTaskIncrementTick+0x150>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	4b40      	ldr	r3, [pc, #256]	@ (8006154 <xTaskIncrementTick+0x154>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3e      	ldr	r2, [pc, #248]	@ (8006150 <xTaskIncrementTick+0x150>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	4a3e      	ldr	r2, [pc, #248]	@ (8006154 <xTaskIncrementTick+0x154>)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	4b3e      	ldr	r3, [pc, #248]	@ (8006158 <xTaskIncrementTick+0x158>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	4a3c      	ldr	r2, [pc, #240]	@ (8006158 <xTaskIncrementTick+0x158>)
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	f000 f8e0 	bl	800622c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800606c:	4b3b      	ldr	r3, [pc, #236]	@ (800615c <xTaskIncrementTick+0x15c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	429a      	cmp	r2, r3
 8006074:	d348      	bcc.n	8006108 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006076:	4b36      	ldr	r3, [pc, #216]	@ (8006150 <xTaskIncrementTick+0x150>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006080:	4b36      	ldr	r3, [pc, #216]	@ (800615c <xTaskIncrementTick+0x15c>)
 8006082:	f04f 32ff 	mov.w	r2, #4294967295
 8006086:	601a      	str	r2, [r3, #0]
					break;
 8006088:	e03e      	b.n	8006108 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608a:	4b31      	ldr	r3, [pc, #196]	@ (8006150 <xTaskIncrementTick+0x150>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d203      	bcs.n	80060aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060a2:	4a2e      	ldr	r2, [pc, #184]	@ (800615c <xTaskIncrementTick+0x15c>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060a8:	e02e      	b.n	8006108 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff ff7d 	bl	8005fae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d004      	beq.n	80060c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	3318      	adds	r3, #24
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ff74 	bl	8005fae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ca:	2201      	movs	r2, #1
 80060cc:	409a      	lsls	r2, r3
 80060ce:	4b24      	ldr	r3, [pc, #144]	@ (8006160 <xTaskIncrementTick+0x160>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	4a22      	ldr	r2, [pc, #136]	@ (8006160 <xTaskIncrementTick+0x160>)
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006164 <xTaskIncrementTick+0x164>)
 80060e6:	441a      	add	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f7ff ff3a 	bl	8005f68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <xTaskIncrementTick+0x168>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	429a      	cmp	r2, r3
 8006100:	d3b9      	bcc.n	8006076 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006102:	2301      	movs	r3, #1
 8006104:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006106:	e7b6      	b.n	8006076 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006108:	4b17      	ldr	r3, [pc, #92]	@ (8006168 <xTaskIncrementTick+0x168>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610e:	4915      	ldr	r1, [pc, #84]	@ (8006164 <xTaskIncrementTick+0x164>)
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d901      	bls.n	8006124 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006124:	4b11      	ldr	r3, [pc, #68]	@ (800616c <xTaskIncrementTick+0x16c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	e004      	b.n	800613c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006132:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <xTaskIncrementTick+0x170>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3301      	adds	r3, #1
 8006138:	4a0d      	ldr	r2, [pc, #52]	@ (8006170 <xTaskIncrementTick+0x170>)
 800613a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800613c:	697b      	ldr	r3, [r7, #20]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200007c4 	.word	0x200007c4
 800614c:	200007a8 	.word	0x200007a8
 8006150:	200007a0 	.word	0x200007a0
 8006154:	200007a4 	.word	0x200007a4
 8006158:	200007bc 	.word	0x200007bc
 800615c:	200007c0 	.word	0x200007c0
 8006160:	200007ac 	.word	0x200007ac
 8006164:	20000714 	.word	0x20000714
 8006168:	20000710 	.word	0x20000710
 800616c:	200007b8 	.word	0x200007b8
 8006170:	200007b4 	.word	0x200007b4

08006174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800617a:	4b27      	ldr	r3, [pc, #156]	@ (8006218 <vTaskSwitchContext+0xa4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006182:	4b26      	ldr	r3, [pc, #152]	@ (800621c <vTaskSwitchContext+0xa8>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006188:	e040      	b.n	800620c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800618a:	4b24      	ldr	r3, [pc, #144]	@ (800621c <vTaskSwitchContext+0xa8>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006190:	4b23      	ldr	r3, [pc, #140]	@ (8006220 <vTaskSwitchContext+0xac>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	fab3 f383 	clz	r3, r3
 800619c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	f1c3 031f 	rsb	r3, r3, #31
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	491f      	ldr	r1, [pc, #124]	@ (8006224 <vTaskSwitchContext+0xb0>)
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	607b      	str	r3, [r7, #4]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <vTaskSwitchContext+0x5a>
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4a11      	ldr	r2, [pc, #68]	@ (8006224 <vTaskSwitchContext+0xb0>)
 80061de:	4413      	add	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3308      	adds	r3, #8
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d104      	bne.n	8006202 <vTaskSwitchContext+0x8e>
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4a07      	ldr	r2, [pc, #28]	@ (8006228 <vTaskSwitchContext+0xb4>)
 800620a:	6013      	str	r3, [r2, #0]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	200007c4 	.word	0x200007c4
 800621c:	200007b8 	.word	0x200007b8
 8006220:	200007ac 	.word	0x200007ac
 8006224:	20000714 	.word	0x20000714
 8006228:	20000710 	.word	0x20000710

0800622c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006232:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <prvResetNextTaskUnblockTime+0x38>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <prvResetNextTaskUnblockTime+0x3c>)
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006244:	e008      	b.n	8006258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006246:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <prvResetNextTaskUnblockTime+0x38>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a04      	ldr	r2, [pc, #16]	@ (8006268 <prvResetNextTaskUnblockTime+0x3c>)
 8006256:	6013      	str	r3, [r2, #0]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	200007a0 	.word	0x200007a0
 8006268:	200007c0 	.word	0x200007c0

0800626c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006272:	4b0b      	ldr	r3, [pc, #44]	@ (80062a0 <xTaskGetSchedulerState+0x34>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800627a:	2301      	movs	r3, #1
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	e008      	b.n	8006292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006280:	4b08      	ldr	r3, [pc, #32]	@ (80062a4 <xTaskGetSchedulerState+0x38>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006288:	2302      	movs	r3, #2
 800628a:	607b      	str	r3, [r7, #4]
 800628c:	e001      	b.n	8006292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006292:	687b      	ldr	r3, [r7, #4]
	}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	200007b0 	.word	0x200007b0
 80062a4:	200007c4 	.word	0x200007c4
	...

080062b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80062ce:	4770      	bx	lr

080062d0 <pxCurrentTCBConst2>:
 80062d0:	20000710 	.word	0x20000710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
	...

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062f0:	6010      	str	r0, [r2, #0]
 80062f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80062f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062fa:	f380 8811 	msr	BASEPRI, r0
 80062fe:	f7ff ff39 	bl	8006174 <vTaskSwitchContext>
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006316:	f380 8809 	msr	PSP, r0
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	4770      	bx	lr

08006320 <pxCurrentTCBConst>:
 8006320:	20000710 	.word	0x20000710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006342:	f7ff fe5d 	bl	8006000 <xTaskIncrementTick>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <xPortSysTickHandler+0x40>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800635e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <__cvt>:
 800636c:	2b00      	cmp	r3, #0
 800636e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006372:	461d      	mov	r5, r3
 8006374:	bfbb      	ittet	lt
 8006376:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800637a:	461d      	movlt	r5, r3
 800637c:	2300      	movge	r3, #0
 800637e:	232d      	movlt	r3, #45	@ 0x2d
 8006380:	b088      	sub	sp, #32
 8006382:	4614      	mov	r4, r2
 8006384:	bfb8      	it	lt
 8006386:	4614      	movlt	r4, r2
 8006388:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800638a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800638c:	7013      	strb	r3, [r2, #0]
 800638e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006390:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006394:	f023 0820 	bic.w	r8, r3, #32
 8006398:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800639c:	d005      	beq.n	80063aa <__cvt+0x3e>
 800639e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063a2:	d100      	bne.n	80063a6 <__cvt+0x3a>
 80063a4:	3601      	adds	r6, #1
 80063a6:	2302      	movs	r3, #2
 80063a8:	e000      	b.n	80063ac <__cvt+0x40>
 80063aa:	2303      	movs	r3, #3
 80063ac:	aa07      	add	r2, sp, #28
 80063ae:	9204      	str	r2, [sp, #16]
 80063b0:	aa06      	add	r2, sp, #24
 80063b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80063b6:	e9cd 3600 	strd	r3, r6, [sp]
 80063ba:	4622      	mov	r2, r4
 80063bc:	462b      	mov	r3, r5
 80063be:	f000 fe93 	bl	80070e8 <_dtoa_r>
 80063c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063c6:	4607      	mov	r7, r0
 80063c8:	d119      	bne.n	80063fe <__cvt+0x92>
 80063ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063cc:	07db      	lsls	r3, r3, #31
 80063ce:	d50e      	bpl.n	80063ee <__cvt+0x82>
 80063d0:	eb00 0906 	add.w	r9, r0, r6
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	4620      	mov	r0, r4
 80063da:	4629      	mov	r1, r5
 80063dc:	f7fa fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80063e0:	b108      	cbz	r0, 80063e6 <__cvt+0x7a>
 80063e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80063e6:	2230      	movs	r2, #48	@ 0x30
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	454b      	cmp	r3, r9
 80063ec:	d31e      	bcc.n	800642c <__cvt+0xc0>
 80063ee:	4638      	mov	r0, r7
 80063f0:	9b07      	ldr	r3, [sp, #28]
 80063f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80063f4:	1bdb      	subs	r3, r3, r7
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	b008      	add	sp, #32
 80063fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006402:	eb00 0906 	add.w	r9, r0, r6
 8006406:	d1e5      	bne.n	80063d4 <__cvt+0x68>
 8006408:	7803      	ldrb	r3, [r0, #0]
 800640a:	2b30      	cmp	r3, #48	@ 0x30
 800640c:	d10a      	bne.n	8006424 <__cvt+0xb8>
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f7fa fac7 	bl	80009a8 <__aeabi_dcmpeq>
 800641a:	b918      	cbnz	r0, 8006424 <__cvt+0xb8>
 800641c:	f1c6 0601 	rsb	r6, r6, #1
 8006420:	f8ca 6000 	str.w	r6, [sl]
 8006424:	f8da 3000 	ldr.w	r3, [sl]
 8006428:	4499      	add	r9, r3
 800642a:	e7d3      	b.n	80063d4 <__cvt+0x68>
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	9107      	str	r1, [sp, #28]
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e7d9      	b.n	80063e8 <__cvt+0x7c>

08006434 <__exponent>:
 8006434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006436:	2900      	cmp	r1, #0
 8006438:	bfb6      	itet	lt
 800643a:	232d      	movlt	r3, #45	@ 0x2d
 800643c:	232b      	movge	r3, #43	@ 0x2b
 800643e:	4249      	neglt	r1, r1
 8006440:	2909      	cmp	r1, #9
 8006442:	7002      	strb	r2, [r0, #0]
 8006444:	7043      	strb	r3, [r0, #1]
 8006446:	dd29      	ble.n	800649c <__exponent+0x68>
 8006448:	f10d 0307 	add.w	r3, sp, #7
 800644c:	461d      	mov	r5, r3
 800644e:	270a      	movs	r7, #10
 8006450:	fbb1 f6f7 	udiv	r6, r1, r7
 8006454:	461a      	mov	r2, r3
 8006456:	fb07 1416 	mls	r4, r7, r6, r1
 800645a:	3430      	adds	r4, #48	@ 0x30
 800645c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006460:	460c      	mov	r4, r1
 8006462:	2c63      	cmp	r4, #99	@ 0x63
 8006464:	4631      	mov	r1, r6
 8006466:	f103 33ff 	add.w	r3, r3, #4294967295
 800646a:	dcf1      	bgt.n	8006450 <__exponent+0x1c>
 800646c:	3130      	adds	r1, #48	@ 0x30
 800646e:	1e94      	subs	r4, r2, #2
 8006470:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006474:	4623      	mov	r3, r4
 8006476:	1c41      	adds	r1, r0, #1
 8006478:	42ab      	cmp	r3, r5
 800647a:	d30a      	bcc.n	8006492 <__exponent+0x5e>
 800647c:	f10d 0309 	add.w	r3, sp, #9
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	42ac      	cmp	r4, r5
 8006484:	bf88      	it	hi
 8006486:	2300      	movhi	r3, #0
 8006488:	3302      	adds	r3, #2
 800648a:	4403      	add	r3, r0
 800648c:	1a18      	subs	r0, r3, r0
 800648e:	b003      	add	sp, #12
 8006490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006492:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006496:	f801 6f01 	strb.w	r6, [r1, #1]!
 800649a:	e7ed      	b.n	8006478 <__exponent+0x44>
 800649c:	2330      	movs	r3, #48	@ 0x30
 800649e:	3130      	adds	r1, #48	@ 0x30
 80064a0:	7083      	strb	r3, [r0, #2]
 80064a2:	70c1      	strb	r1, [r0, #3]
 80064a4:	1d03      	adds	r3, r0, #4
 80064a6:	e7f1      	b.n	800648c <__exponent+0x58>

080064a8 <_printf_float>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	b091      	sub	sp, #68	@ 0x44
 80064ae:	460c      	mov	r4, r1
 80064b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80064b4:	4616      	mov	r6, r2
 80064b6:	461f      	mov	r7, r3
 80064b8:	4605      	mov	r5, r0
 80064ba:	f000 fcf5 	bl	8006ea8 <_localeconv_r>
 80064be:	6803      	ldr	r3, [r0, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	9308      	str	r3, [sp, #32]
 80064c4:	f7f9 fe44 	bl	8000150 <strlen>
 80064c8:	2300      	movs	r3, #0
 80064ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80064cc:	f8d8 3000 	ldr.w	r3, [r8]
 80064d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80064d2:	3307      	adds	r3, #7
 80064d4:	f023 0307 	bic.w	r3, r3, #7
 80064d8:	f103 0208 	add.w	r2, r3, #8
 80064dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064e0:	f8d4 b000 	ldr.w	fp, [r4]
 80064e4:	f8c8 2000 	str.w	r2, [r8]
 80064e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064f2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295
 80064fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006502:	4b9c      	ldr	r3, [pc, #624]	@ (8006774 <_printf_float+0x2cc>)
 8006504:	f7fa fa82 	bl	8000a0c <__aeabi_dcmpun>
 8006508:	bb70      	cbnz	r0, 8006568 <_printf_float+0xc0>
 800650a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	4b98      	ldr	r3, [pc, #608]	@ (8006774 <_printf_float+0x2cc>)
 8006514:	f7fa fa5c 	bl	80009d0 <__aeabi_dcmple>
 8006518:	bb30      	cbnz	r0, 8006568 <_printf_float+0xc0>
 800651a:	2200      	movs	r2, #0
 800651c:	2300      	movs	r3, #0
 800651e:	4640      	mov	r0, r8
 8006520:	4649      	mov	r1, r9
 8006522:	f7fa fa4b 	bl	80009bc <__aeabi_dcmplt>
 8006526:	b110      	cbz	r0, 800652e <_printf_float+0x86>
 8006528:	232d      	movs	r3, #45	@ 0x2d
 800652a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800652e:	4a92      	ldr	r2, [pc, #584]	@ (8006778 <_printf_float+0x2d0>)
 8006530:	4b92      	ldr	r3, [pc, #584]	@ (800677c <_printf_float+0x2d4>)
 8006532:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006536:	bf8c      	ite	hi
 8006538:	4690      	movhi	r8, r2
 800653a:	4698      	movls	r8, r3
 800653c:	2303      	movs	r3, #3
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	f02b 0304 	bic.w	r3, fp, #4
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	4633      	mov	r3, r6
 800654c:	4621      	mov	r1, r4
 800654e:	4628      	mov	r0, r5
 8006550:	9700      	str	r7, [sp, #0]
 8006552:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006554:	f000 f9d4 	bl	8006900 <_printf_common>
 8006558:	3001      	adds	r0, #1
 800655a:	f040 8090 	bne.w	800667e <_printf_float+0x1d6>
 800655e:	f04f 30ff 	mov.w	r0, #4294967295
 8006562:	b011      	add	sp, #68	@ 0x44
 8006564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	4640      	mov	r0, r8
 800656e:	4649      	mov	r1, r9
 8006570:	f7fa fa4c 	bl	8000a0c <__aeabi_dcmpun>
 8006574:	b148      	cbz	r0, 800658a <_printf_float+0xe2>
 8006576:	464b      	mov	r3, r9
 8006578:	2b00      	cmp	r3, #0
 800657a:	bfb8      	it	lt
 800657c:	232d      	movlt	r3, #45	@ 0x2d
 800657e:	4a80      	ldr	r2, [pc, #512]	@ (8006780 <_printf_float+0x2d8>)
 8006580:	bfb8      	it	lt
 8006582:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006586:	4b7f      	ldr	r3, [pc, #508]	@ (8006784 <_printf_float+0x2dc>)
 8006588:	e7d3      	b.n	8006532 <_printf_float+0x8a>
 800658a:	6863      	ldr	r3, [r4, #4]
 800658c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	d13f      	bne.n	8006614 <_printf_float+0x16c>
 8006594:	2306      	movs	r3, #6
 8006596:	6063      	str	r3, [r4, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	9206      	str	r2, [sp, #24]
 80065a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80065a4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80065a8:	aa0d      	add	r2, sp, #52	@ 0x34
 80065aa:	9203      	str	r2, [sp, #12]
 80065ac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80065b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	4642      	mov	r2, r8
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4628      	mov	r0, r5
 80065bc:	464b      	mov	r3, r9
 80065be:	910a      	str	r1, [sp, #40]	@ 0x28
 80065c0:	f7ff fed4 	bl	800636c <__cvt>
 80065c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065c6:	4680      	mov	r8, r0
 80065c8:	2947      	cmp	r1, #71	@ 0x47
 80065ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80065cc:	d128      	bne.n	8006620 <_printf_float+0x178>
 80065ce:	1cc8      	adds	r0, r1, #3
 80065d0:	db02      	blt.n	80065d8 <_printf_float+0x130>
 80065d2:	6863      	ldr	r3, [r4, #4]
 80065d4:	4299      	cmp	r1, r3
 80065d6:	dd40      	ble.n	800665a <_printf_float+0x1b2>
 80065d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80065dc:	fa5f fa8a 	uxtb.w	sl, sl
 80065e0:	4652      	mov	r2, sl
 80065e2:	3901      	subs	r1, #1
 80065e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065e8:	910d      	str	r1, [sp, #52]	@ 0x34
 80065ea:	f7ff ff23 	bl	8006434 <__exponent>
 80065ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065f0:	4681      	mov	r9, r0
 80065f2:	1813      	adds	r3, r2, r0
 80065f4:	2a01      	cmp	r2, #1
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	dc02      	bgt.n	8006600 <_printf_float+0x158>
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	07d2      	lsls	r2, r2, #31
 80065fe:	d501      	bpl.n	8006604 <_printf_float+0x15c>
 8006600:	3301      	adds	r3, #1
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006608:	2b00      	cmp	r3, #0
 800660a:	d09e      	beq.n	800654a <_printf_float+0xa2>
 800660c:	232d      	movs	r3, #45	@ 0x2d
 800660e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006612:	e79a      	b.n	800654a <_printf_float+0xa2>
 8006614:	2947      	cmp	r1, #71	@ 0x47
 8006616:	d1bf      	bne.n	8006598 <_printf_float+0xf0>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1bd      	bne.n	8006598 <_printf_float+0xf0>
 800661c:	2301      	movs	r3, #1
 800661e:	e7ba      	b.n	8006596 <_printf_float+0xee>
 8006620:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006624:	d9dc      	bls.n	80065e0 <_printf_float+0x138>
 8006626:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800662a:	d118      	bne.n	800665e <_printf_float+0x1b6>
 800662c:	2900      	cmp	r1, #0
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	dd0b      	ble.n	800664a <_printf_float+0x1a2>
 8006632:	6121      	str	r1, [r4, #16]
 8006634:	b913      	cbnz	r3, 800663c <_printf_float+0x194>
 8006636:	6822      	ldr	r2, [r4, #0]
 8006638:	07d0      	lsls	r0, r2, #31
 800663a:	d502      	bpl.n	8006642 <_printf_float+0x19a>
 800663c:	3301      	adds	r3, #1
 800663e:	440b      	add	r3, r1
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006648:	e7dc      	b.n	8006604 <_printf_float+0x15c>
 800664a:	b913      	cbnz	r3, 8006652 <_printf_float+0x1aa>
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	07d2      	lsls	r2, r2, #31
 8006650:	d501      	bpl.n	8006656 <_printf_float+0x1ae>
 8006652:	3302      	adds	r3, #2
 8006654:	e7f4      	b.n	8006640 <_printf_float+0x198>
 8006656:	2301      	movs	r3, #1
 8006658:	e7f2      	b.n	8006640 <_printf_float+0x198>
 800665a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800665e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006660:	4299      	cmp	r1, r3
 8006662:	db05      	blt.n	8006670 <_printf_float+0x1c8>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	6121      	str	r1, [r4, #16]
 8006668:	07d8      	lsls	r0, r3, #31
 800666a:	d5ea      	bpl.n	8006642 <_printf_float+0x19a>
 800666c:	1c4b      	adds	r3, r1, #1
 800666e:	e7e7      	b.n	8006640 <_printf_float+0x198>
 8006670:	2900      	cmp	r1, #0
 8006672:	bfcc      	ite	gt
 8006674:	2201      	movgt	r2, #1
 8006676:	f1c1 0202 	rsble	r2, r1, #2
 800667a:	4413      	add	r3, r2
 800667c:	e7e0      	b.n	8006640 <_printf_float+0x198>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	055a      	lsls	r2, r3, #21
 8006682:	d407      	bmi.n	8006694 <_printf_float+0x1ec>
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	4642      	mov	r2, r8
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	d12b      	bne.n	80066ea <_printf_float+0x242>
 8006692:	e764      	b.n	800655e <_printf_float+0xb6>
 8006694:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006698:	f240 80dc 	bls.w	8006854 <_printf_float+0x3ac>
 800669c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066a0:	2200      	movs	r2, #0
 80066a2:	2300      	movs	r3, #0
 80066a4:	f7fa f980 	bl	80009a8 <__aeabi_dcmpeq>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d033      	beq.n	8006714 <_printf_float+0x26c>
 80066ac:	2301      	movs	r3, #1
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	4a35      	ldr	r2, [pc, #212]	@ (8006788 <_printf_float+0x2e0>)
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af51 	beq.w	800655e <_printf_float+0xb6>
 80066bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80066c0:	4543      	cmp	r3, r8
 80066c2:	db02      	blt.n	80066ca <_printf_float+0x222>
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	07d8      	lsls	r0, r3, #31
 80066c8:	d50f      	bpl.n	80066ea <_printf_float+0x242>
 80066ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066ce:	4631      	mov	r1, r6
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b8      	blx	r7
 80066d4:	3001      	adds	r0, #1
 80066d6:	f43f af42 	beq.w	800655e <_printf_float+0xb6>
 80066da:	f04f 0900 	mov.w	r9, #0
 80066de:	f108 38ff 	add.w	r8, r8, #4294967295
 80066e2:	f104 0a1a 	add.w	sl, r4, #26
 80066e6:	45c8      	cmp	r8, r9
 80066e8:	dc09      	bgt.n	80066fe <_printf_float+0x256>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	079b      	lsls	r3, r3, #30
 80066ee:	f100 8102 	bmi.w	80068f6 <_printf_float+0x44e>
 80066f2:	68e0      	ldr	r0, [r4, #12]
 80066f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066f6:	4298      	cmp	r0, r3
 80066f8:	bfb8      	it	lt
 80066fa:	4618      	movlt	r0, r3
 80066fc:	e731      	b.n	8006562 <_printf_float+0xba>
 80066fe:	2301      	movs	r3, #1
 8006700:	4652      	mov	r2, sl
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f af28 	beq.w	800655e <_printf_float+0xb6>
 800670e:	f109 0901 	add.w	r9, r9, #1
 8006712:	e7e8      	b.n	80066e6 <_printf_float+0x23e>
 8006714:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006716:	2b00      	cmp	r3, #0
 8006718:	dc38      	bgt.n	800678c <_printf_float+0x2e4>
 800671a:	2301      	movs	r3, #1
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	4a19      	ldr	r2, [pc, #100]	@ (8006788 <_printf_float+0x2e0>)
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	f43f af1a 	beq.w	800655e <_printf_float+0xb6>
 800672a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800672e:	ea59 0303 	orrs.w	r3, r9, r3
 8006732:	d102      	bne.n	800673a <_printf_float+0x292>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	07d9      	lsls	r1, r3, #31
 8006738:	d5d7      	bpl.n	80066ea <_printf_float+0x242>
 800673a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	47b8      	blx	r7
 8006744:	3001      	adds	r0, #1
 8006746:	f43f af0a 	beq.w	800655e <_printf_float+0xb6>
 800674a:	f04f 0a00 	mov.w	sl, #0
 800674e:	f104 0b1a 	add.w	fp, r4, #26
 8006752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006754:	425b      	negs	r3, r3
 8006756:	4553      	cmp	r3, sl
 8006758:	dc01      	bgt.n	800675e <_printf_float+0x2b6>
 800675a:	464b      	mov	r3, r9
 800675c:	e793      	b.n	8006686 <_printf_float+0x1de>
 800675e:	2301      	movs	r3, #1
 8006760:	465a      	mov	r2, fp
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	f43f aef8 	beq.w	800655e <_printf_float+0xb6>
 800676e:	f10a 0a01 	add.w	sl, sl, #1
 8006772:	e7ee      	b.n	8006752 <_printf_float+0x2aa>
 8006774:	7fefffff 	.word	0x7fefffff
 8006778:	0800a142 	.word	0x0800a142
 800677c:	0800a13e 	.word	0x0800a13e
 8006780:	0800a14a 	.word	0x0800a14a
 8006784:	0800a146 	.word	0x0800a146
 8006788:	0800a14e 	.word	0x0800a14e
 800678c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800678e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006792:	4553      	cmp	r3, sl
 8006794:	bfa8      	it	ge
 8006796:	4653      	movge	r3, sl
 8006798:	2b00      	cmp	r3, #0
 800679a:	4699      	mov	r9, r3
 800679c:	dc36      	bgt.n	800680c <_printf_float+0x364>
 800679e:	f04f 0b00 	mov.w	fp, #0
 80067a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067a6:	f104 021a 	add.w	r2, r4, #26
 80067aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ae:	eba3 0309 	sub.w	r3, r3, r9
 80067b2:	455b      	cmp	r3, fp
 80067b4:	dc31      	bgt.n	800681a <_printf_float+0x372>
 80067b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067b8:	459a      	cmp	sl, r3
 80067ba:	dc3a      	bgt.n	8006832 <_printf_float+0x38a>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	07da      	lsls	r2, r3, #31
 80067c0:	d437      	bmi.n	8006832 <_printf_float+0x38a>
 80067c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067c4:	ebaa 0903 	sub.w	r9, sl, r3
 80067c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ca:	ebaa 0303 	sub.w	r3, sl, r3
 80067ce:	4599      	cmp	r9, r3
 80067d0:	bfa8      	it	ge
 80067d2:	4699      	movge	r9, r3
 80067d4:	f1b9 0f00 	cmp.w	r9, #0
 80067d8:	dc33      	bgt.n	8006842 <_printf_float+0x39a>
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e2:	f104 0b1a 	add.w	fp, r4, #26
 80067e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067e8:	ebaa 0303 	sub.w	r3, sl, r3
 80067ec:	eba3 0309 	sub.w	r3, r3, r9
 80067f0:	4543      	cmp	r3, r8
 80067f2:	f77f af7a 	ble.w	80066ea <_printf_float+0x242>
 80067f6:	2301      	movs	r3, #1
 80067f8:	465a      	mov	r2, fp
 80067fa:	4631      	mov	r1, r6
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	f43f aeac 	beq.w	800655e <_printf_float+0xb6>
 8006806:	f108 0801 	add.w	r8, r8, #1
 800680a:	e7ec      	b.n	80067e6 <_printf_float+0x33e>
 800680c:	4642      	mov	r2, r8
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d1c2      	bne.n	800679e <_printf_float+0x2f6>
 8006818:	e6a1      	b.n	800655e <_printf_float+0xb6>
 800681a:	2301      	movs	r3, #1
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	920a      	str	r2, [sp, #40]	@ 0x28
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae9a 	beq.w	800655e <_printf_float+0xb6>
 800682a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800682c:	f10b 0b01 	add.w	fp, fp, #1
 8006830:	e7bb      	b.n	80067aa <_printf_float+0x302>
 8006832:	4631      	mov	r1, r6
 8006834:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	d1c0      	bne.n	80067c2 <_printf_float+0x31a>
 8006840:	e68d      	b.n	800655e <_printf_float+0xb6>
 8006842:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006844:	464b      	mov	r3, r9
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	4442      	add	r2, r8
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	d1c3      	bne.n	80067da <_printf_float+0x332>
 8006852:	e684      	b.n	800655e <_printf_float+0xb6>
 8006854:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006858:	f1ba 0f01 	cmp.w	sl, #1
 800685c:	dc01      	bgt.n	8006862 <_printf_float+0x3ba>
 800685e:	07db      	lsls	r3, r3, #31
 8006860:	d536      	bpl.n	80068d0 <_printf_float+0x428>
 8006862:	2301      	movs	r3, #1
 8006864:	4642      	mov	r2, r8
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f ae76 	beq.w	800655e <_printf_float+0xb6>
 8006872:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae6e 	beq.w	800655e <_printf_float+0xb6>
 8006882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800688e:	f7fa f88b 	bl	80009a8 <__aeabi_dcmpeq>
 8006892:	b9c0      	cbnz	r0, 80068c6 <_printf_float+0x41e>
 8006894:	4653      	mov	r3, sl
 8006896:	f108 0201 	add.w	r2, r8, #1
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	d10c      	bne.n	80068be <_printf_float+0x416>
 80068a4:	e65b      	b.n	800655e <_printf_float+0xb6>
 80068a6:	2301      	movs	r3, #1
 80068a8:	465a      	mov	r2, fp
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f ae54 	beq.w	800655e <_printf_float+0xb6>
 80068b6:	f108 0801 	add.w	r8, r8, #1
 80068ba:	45d0      	cmp	r8, sl
 80068bc:	dbf3      	blt.n	80068a6 <_printf_float+0x3fe>
 80068be:	464b      	mov	r3, r9
 80068c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068c4:	e6e0      	b.n	8006688 <_printf_float+0x1e0>
 80068c6:	f04f 0800 	mov.w	r8, #0
 80068ca:	f104 0b1a 	add.w	fp, r4, #26
 80068ce:	e7f4      	b.n	80068ba <_printf_float+0x412>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4642      	mov	r2, r8
 80068d4:	e7e1      	b.n	800689a <_printf_float+0x3f2>
 80068d6:	2301      	movs	r3, #1
 80068d8:	464a      	mov	r2, r9
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae3c 	beq.w	800655e <_printf_float+0xb6>
 80068e6:	f108 0801 	add.w	r8, r8, #1
 80068ea:	68e3      	ldr	r3, [r4, #12]
 80068ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	4543      	cmp	r3, r8
 80068f2:	dcf0      	bgt.n	80068d6 <_printf_float+0x42e>
 80068f4:	e6fd      	b.n	80066f2 <_printf_float+0x24a>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	f104 0919 	add.w	r9, r4, #25
 80068fe:	e7f4      	b.n	80068ea <_printf_float+0x442>

08006900 <_printf_common>:
 8006900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	4616      	mov	r6, r2
 8006906:	4698      	mov	r8, r3
 8006908:	688a      	ldr	r2, [r1, #8]
 800690a:	690b      	ldr	r3, [r1, #16]
 800690c:	4607      	mov	r7, r0
 800690e:	4293      	cmp	r3, r2
 8006910:	bfb8      	it	lt
 8006912:	4613      	movlt	r3, r2
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800691a:	460c      	mov	r4, r1
 800691c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006920:	b10a      	cbz	r2, 8006926 <_printf_common+0x26>
 8006922:	3301      	adds	r3, #1
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	0699      	lsls	r1, r3, #26
 800692a:	bf42      	ittt	mi
 800692c:	6833      	ldrmi	r3, [r6, #0]
 800692e:	3302      	addmi	r3, #2
 8006930:	6033      	strmi	r3, [r6, #0]
 8006932:	6825      	ldr	r5, [r4, #0]
 8006934:	f015 0506 	ands.w	r5, r5, #6
 8006938:	d106      	bne.n	8006948 <_printf_common+0x48>
 800693a:	f104 0a19 	add.w	sl, r4, #25
 800693e:	68e3      	ldr	r3, [r4, #12]
 8006940:	6832      	ldr	r2, [r6, #0]
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	42ab      	cmp	r3, r5
 8006946:	dc2b      	bgt.n	80069a0 <_printf_common+0xa0>
 8006948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800694c:	6822      	ldr	r2, [r4, #0]
 800694e:	3b00      	subs	r3, #0
 8006950:	bf18      	it	ne
 8006952:	2301      	movne	r3, #1
 8006954:	0692      	lsls	r2, r2, #26
 8006956:	d430      	bmi.n	80069ba <_printf_common+0xba>
 8006958:	4641      	mov	r1, r8
 800695a:	4638      	mov	r0, r7
 800695c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006960:	47c8      	blx	r9
 8006962:	3001      	adds	r0, #1
 8006964:	d023      	beq.n	80069ae <_printf_common+0xae>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	6922      	ldr	r2, [r4, #16]
 800696a:	f003 0306 	and.w	r3, r3, #6
 800696e:	2b04      	cmp	r3, #4
 8006970:	bf14      	ite	ne
 8006972:	2500      	movne	r5, #0
 8006974:	6833      	ldreq	r3, [r6, #0]
 8006976:	f04f 0600 	mov.w	r6, #0
 800697a:	bf08      	it	eq
 800697c:	68e5      	ldreq	r5, [r4, #12]
 800697e:	f104 041a 	add.w	r4, r4, #26
 8006982:	bf08      	it	eq
 8006984:	1aed      	subeq	r5, r5, r3
 8006986:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800698a:	bf08      	it	eq
 800698c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006990:	4293      	cmp	r3, r2
 8006992:	bfc4      	itt	gt
 8006994:	1a9b      	subgt	r3, r3, r2
 8006996:	18ed      	addgt	r5, r5, r3
 8006998:	42b5      	cmp	r5, r6
 800699a:	d11a      	bne.n	80069d2 <_printf_common+0xd2>
 800699c:	2000      	movs	r0, #0
 800699e:	e008      	b.n	80069b2 <_printf_common+0xb2>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4652      	mov	r2, sl
 80069a4:	4641      	mov	r1, r8
 80069a6:	4638      	mov	r0, r7
 80069a8:	47c8      	blx	r9
 80069aa:	3001      	adds	r0, #1
 80069ac:	d103      	bne.n	80069b6 <_printf_common+0xb6>
 80069ae:	f04f 30ff 	mov.w	r0, #4294967295
 80069b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b6:	3501      	adds	r5, #1
 80069b8:	e7c1      	b.n	800693e <_printf_common+0x3e>
 80069ba:	2030      	movs	r0, #48	@ 0x30
 80069bc:	18e1      	adds	r1, r4, r3
 80069be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069c8:	4422      	add	r2, r4
 80069ca:	3302      	adds	r3, #2
 80069cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069d0:	e7c2      	b.n	8006958 <_printf_common+0x58>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4622      	mov	r2, r4
 80069d6:	4641      	mov	r1, r8
 80069d8:	4638      	mov	r0, r7
 80069da:	47c8      	blx	r9
 80069dc:	3001      	adds	r0, #1
 80069de:	d0e6      	beq.n	80069ae <_printf_common+0xae>
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7d9      	b.n	8006998 <_printf_common+0x98>

080069e4 <_printf_i>:
 80069e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	7e0f      	ldrb	r7, [r1, #24]
 80069ea:	4691      	mov	r9, r2
 80069ec:	2f78      	cmp	r7, #120	@ 0x78
 80069ee:	4680      	mov	r8, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	469a      	mov	sl, r3
 80069f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069fa:	d807      	bhi.n	8006a0c <_printf_i+0x28>
 80069fc:	2f62      	cmp	r7, #98	@ 0x62
 80069fe:	d80a      	bhi.n	8006a16 <_printf_i+0x32>
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	f000 80d1 	beq.w	8006ba8 <_printf_i+0x1c4>
 8006a06:	2f58      	cmp	r7, #88	@ 0x58
 8006a08:	f000 80b8 	beq.w	8006b7c <_printf_i+0x198>
 8006a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a14:	e03a      	b.n	8006a8c <_printf_i+0xa8>
 8006a16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a1a:	2b15      	cmp	r3, #21
 8006a1c:	d8f6      	bhi.n	8006a0c <_printf_i+0x28>
 8006a1e:	a101      	add	r1, pc, #4	@ (adr r1, 8006a24 <_printf_i+0x40>)
 8006a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a24:	08006a7d 	.word	0x08006a7d
 8006a28:	08006a91 	.word	0x08006a91
 8006a2c:	08006a0d 	.word	0x08006a0d
 8006a30:	08006a0d 	.word	0x08006a0d
 8006a34:	08006a0d 	.word	0x08006a0d
 8006a38:	08006a0d 	.word	0x08006a0d
 8006a3c:	08006a91 	.word	0x08006a91
 8006a40:	08006a0d 	.word	0x08006a0d
 8006a44:	08006a0d 	.word	0x08006a0d
 8006a48:	08006a0d 	.word	0x08006a0d
 8006a4c:	08006a0d 	.word	0x08006a0d
 8006a50:	08006b8f 	.word	0x08006b8f
 8006a54:	08006abb 	.word	0x08006abb
 8006a58:	08006b49 	.word	0x08006b49
 8006a5c:	08006a0d 	.word	0x08006a0d
 8006a60:	08006a0d 	.word	0x08006a0d
 8006a64:	08006bb1 	.word	0x08006bb1
 8006a68:	08006a0d 	.word	0x08006a0d
 8006a6c:	08006abb 	.word	0x08006abb
 8006a70:	08006a0d 	.word	0x08006a0d
 8006a74:	08006a0d 	.word	0x08006a0d
 8006a78:	08006b51 	.word	0x08006b51
 8006a7c:	6833      	ldr	r3, [r6, #0]
 8006a7e:	1d1a      	adds	r2, r3, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6032      	str	r2, [r6, #0]
 8006a84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e09c      	b.n	8006bca <_printf_i+0x1e6>
 8006a90:	6833      	ldr	r3, [r6, #0]
 8006a92:	6820      	ldr	r0, [r4, #0]
 8006a94:	1d19      	adds	r1, r3, #4
 8006a96:	6031      	str	r1, [r6, #0]
 8006a98:	0606      	lsls	r6, r0, #24
 8006a9a:	d501      	bpl.n	8006aa0 <_printf_i+0xbc>
 8006a9c:	681d      	ldr	r5, [r3, #0]
 8006a9e:	e003      	b.n	8006aa8 <_printf_i+0xc4>
 8006aa0:	0645      	lsls	r5, r0, #25
 8006aa2:	d5fb      	bpl.n	8006a9c <_printf_i+0xb8>
 8006aa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	da03      	bge.n	8006ab4 <_printf_i+0xd0>
 8006aac:	232d      	movs	r3, #45	@ 0x2d
 8006aae:	426d      	negs	r5, r5
 8006ab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab4:	230a      	movs	r3, #10
 8006ab6:	4858      	ldr	r0, [pc, #352]	@ (8006c18 <_printf_i+0x234>)
 8006ab8:	e011      	b.n	8006ade <_printf_i+0xfa>
 8006aba:	6821      	ldr	r1, [r4, #0]
 8006abc:	6833      	ldr	r3, [r6, #0]
 8006abe:	0608      	lsls	r0, r1, #24
 8006ac0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ac4:	d402      	bmi.n	8006acc <_printf_i+0xe8>
 8006ac6:	0649      	lsls	r1, r1, #25
 8006ac8:	bf48      	it	mi
 8006aca:	b2ad      	uxthmi	r5, r5
 8006acc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	bf14      	ite	ne
 8006ad2:	230a      	movne	r3, #10
 8006ad4:	2308      	moveq	r3, #8
 8006ad6:	4850      	ldr	r0, [pc, #320]	@ (8006c18 <_printf_i+0x234>)
 8006ad8:	2100      	movs	r1, #0
 8006ada:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ade:	6866      	ldr	r6, [r4, #4]
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	60a6      	str	r6, [r4, #8]
 8006ae4:	db05      	blt.n	8006af2 <_printf_i+0x10e>
 8006ae6:	6821      	ldr	r1, [r4, #0]
 8006ae8:	432e      	orrs	r6, r5
 8006aea:	f021 0104 	bic.w	r1, r1, #4
 8006aee:	6021      	str	r1, [r4, #0]
 8006af0:	d04b      	beq.n	8006b8a <_printf_i+0x1a6>
 8006af2:	4616      	mov	r6, r2
 8006af4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006af8:	fb03 5711 	mls	r7, r3, r1, r5
 8006afc:	5dc7      	ldrb	r7, [r0, r7]
 8006afe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b02:	462f      	mov	r7, r5
 8006b04:	42bb      	cmp	r3, r7
 8006b06:	460d      	mov	r5, r1
 8006b08:	d9f4      	bls.n	8006af4 <_printf_i+0x110>
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d10b      	bne.n	8006b26 <_printf_i+0x142>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	07df      	lsls	r7, r3, #31
 8006b12:	d508      	bpl.n	8006b26 <_printf_i+0x142>
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	6861      	ldr	r1, [r4, #4]
 8006b18:	4299      	cmp	r1, r3
 8006b1a:	bfde      	ittt	le
 8006b1c:	2330      	movle	r3, #48	@ 0x30
 8006b1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b26:	1b92      	subs	r2, r2, r6
 8006b28:	6122      	str	r2, [r4, #16]
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f8cd a000 	str.w	sl, [sp]
 8006b34:	aa03      	add	r2, sp, #12
 8006b36:	f7ff fee3 	bl	8006900 <_printf_common>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d14a      	bne.n	8006bd4 <_printf_i+0x1f0>
 8006b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b42:	b004      	add	sp, #16
 8006b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	f043 0320 	orr.w	r3, r3, #32
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	2778      	movs	r7, #120	@ 0x78
 8006b52:	4832      	ldr	r0, [pc, #200]	@ (8006c1c <_printf_i+0x238>)
 8006b54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	6831      	ldr	r1, [r6, #0]
 8006b5c:	061f      	lsls	r7, r3, #24
 8006b5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b62:	d402      	bmi.n	8006b6a <_printf_i+0x186>
 8006b64:	065f      	lsls	r7, r3, #25
 8006b66:	bf48      	it	mi
 8006b68:	b2ad      	uxthmi	r5, r5
 8006b6a:	6031      	str	r1, [r6, #0]
 8006b6c:	07d9      	lsls	r1, r3, #31
 8006b6e:	bf44      	itt	mi
 8006b70:	f043 0320 	orrmi.w	r3, r3, #32
 8006b74:	6023      	strmi	r3, [r4, #0]
 8006b76:	b11d      	cbz	r5, 8006b80 <_printf_i+0x19c>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	e7ad      	b.n	8006ad8 <_printf_i+0xf4>
 8006b7c:	4826      	ldr	r0, [pc, #152]	@ (8006c18 <_printf_i+0x234>)
 8006b7e:	e7e9      	b.n	8006b54 <_printf_i+0x170>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	f023 0320 	bic.w	r3, r3, #32
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	e7f6      	b.n	8006b78 <_printf_i+0x194>
 8006b8a:	4616      	mov	r6, r2
 8006b8c:	e7bd      	b.n	8006b0a <_printf_i+0x126>
 8006b8e:	6833      	ldr	r3, [r6, #0]
 8006b90:	6825      	ldr	r5, [r4, #0]
 8006b92:	1d18      	adds	r0, r3, #4
 8006b94:	6961      	ldr	r1, [r4, #20]
 8006b96:	6030      	str	r0, [r6, #0]
 8006b98:	062e      	lsls	r6, r5, #24
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	d501      	bpl.n	8006ba2 <_printf_i+0x1be>
 8006b9e:	6019      	str	r1, [r3, #0]
 8006ba0:	e002      	b.n	8006ba8 <_printf_i+0x1c4>
 8006ba2:	0668      	lsls	r0, r5, #25
 8006ba4:	d5fb      	bpl.n	8006b9e <_printf_i+0x1ba>
 8006ba6:	8019      	strh	r1, [r3, #0]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4616      	mov	r6, r2
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	e7bc      	b.n	8006b2a <_printf_i+0x146>
 8006bb0:	6833      	ldr	r3, [r6, #0]
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	1d1a      	adds	r2, r3, #4
 8006bb6:	6032      	str	r2, [r6, #0]
 8006bb8:	681e      	ldr	r6, [r3, #0]
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 f9ea 	bl	8006f96 <memchr>
 8006bc2:	b108      	cbz	r0, 8006bc8 <_printf_i+0x1e4>
 8006bc4:	1b80      	subs	r0, r0, r6
 8006bc6:	6060      	str	r0, [r4, #4]
 8006bc8:	6863      	ldr	r3, [r4, #4]
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd2:	e7aa      	b.n	8006b2a <_printf_i+0x146>
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4640      	mov	r0, r8
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	47d0      	blx	sl
 8006bde:	3001      	adds	r0, #1
 8006be0:	d0ad      	beq.n	8006b3e <_printf_i+0x15a>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	079b      	lsls	r3, r3, #30
 8006be6:	d413      	bmi.n	8006c10 <_printf_i+0x22c>
 8006be8:	68e0      	ldr	r0, [r4, #12]
 8006bea:	9b03      	ldr	r3, [sp, #12]
 8006bec:	4298      	cmp	r0, r3
 8006bee:	bfb8      	it	lt
 8006bf0:	4618      	movlt	r0, r3
 8006bf2:	e7a6      	b.n	8006b42 <_printf_i+0x15e>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	47d0      	blx	sl
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d09d      	beq.n	8006b3e <_printf_i+0x15a>
 8006c02:	3501      	adds	r5, #1
 8006c04:	68e3      	ldr	r3, [r4, #12]
 8006c06:	9903      	ldr	r1, [sp, #12]
 8006c08:	1a5b      	subs	r3, r3, r1
 8006c0a:	42ab      	cmp	r3, r5
 8006c0c:	dcf2      	bgt.n	8006bf4 <_printf_i+0x210>
 8006c0e:	e7eb      	b.n	8006be8 <_printf_i+0x204>
 8006c10:	2500      	movs	r5, #0
 8006c12:	f104 0619 	add.w	r6, r4, #25
 8006c16:	e7f5      	b.n	8006c04 <_printf_i+0x220>
 8006c18:	0800a150 	.word	0x0800a150
 8006c1c:	0800a161 	.word	0x0800a161

08006c20 <std>:
 8006c20:	2300      	movs	r3, #0
 8006c22:	b510      	push	{r4, lr}
 8006c24:	4604      	mov	r4, r0
 8006c26:	e9c0 3300 	strd	r3, r3, [r0]
 8006c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c2e:	6083      	str	r3, [r0, #8]
 8006c30:	8181      	strh	r1, [r0, #12]
 8006c32:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c34:	81c2      	strh	r2, [r0, #14]
 8006c36:	6183      	str	r3, [r0, #24]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	305c      	adds	r0, #92	@ 0x5c
 8006c3e:	f000 f92a 	bl	8006e96 <memset>
 8006c42:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <std+0x58>)
 8006c44:	6224      	str	r4, [r4, #32]
 8006c46:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c48:	4b0c      	ldr	r3, [pc, #48]	@ (8006c7c <std+0x5c>)
 8006c4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <std+0x60>)
 8006c4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c50:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <std+0x64>)
 8006c52:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <std+0x68>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d006      	beq.n	8006c68 <std+0x48>
 8006c5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c5e:	4294      	cmp	r4, r2
 8006c60:	d002      	beq.n	8006c68 <std+0x48>
 8006c62:	33d0      	adds	r3, #208	@ 0xd0
 8006c64:	429c      	cmp	r4, r3
 8006c66:	d105      	bne.n	8006c74 <std+0x54>
 8006c68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c70:	f000 b98e 	b.w	8006f90 <__retarget_lock_init_recursive>
 8006c74:	bd10      	pop	{r4, pc}
 8006c76:	bf00      	nop
 8006c78:	08006e11 	.word	0x08006e11
 8006c7c:	08006e33 	.word	0x08006e33
 8006c80:	08006e6b 	.word	0x08006e6b
 8006c84:	08006e8f 	.word	0x08006e8f
 8006c88:	200007c8 	.word	0x200007c8

08006c8c <stdio_exit_handler>:
 8006c8c:	4a02      	ldr	r2, [pc, #8]	@ (8006c98 <stdio_exit_handler+0xc>)
 8006c8e:	4903      	ldr	r1, [pc, #12]	@ (8006c9c <stdio_exit_handler+0x10>)
 8006c90:	4803      	ldr	r0, [pc, #12]	@ (8006ca0 <stdio_exit_handler+0x14>)
 8006c92:	f000 b869 	b.w	8006d68 <_fwalk_sglue>
 8006c96:	bf00      	nop
 8006c98:	200000dc 	.word	0x200000dc
 8006c9c:	08008931 	.word	0x08008931
 8006ca0:	200000ec 	.word	0x200000ec

08006ca4 <cleanup_stdio>:
 8006ca4:	6841      	ldr	r1, [r0, #4]
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <cleanup_stdio+0x34>)
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4299      	cmp	r1, r3
 8006cac:	4604      	mov	r4, r0
 8006cae:	d001      	beq.n	8006cb4 <cleanup_stdio+0x10>
 8006cb0:	f001 fe3e 	bl	8008930 <_fflush_r>
 8006cb4:	68a1      	ldr	r1, [r4, #8]
 8006cb6:	4b09      	ldr	r3, [pc, #36]	@ (8006cdc <cleanup_stdio+0x38>)
 8006cb8:	4299      	cmp	r1, r3
 8006cba:	d002      	beq.n	8006cc2 <cleanup_stdio+0x1e>
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f001 fe37 	bl	8008930 <_fflush_r>
 8006cc2:	68e1      	ldr	r1, [r4, #12]
 8006cc4:	4b06      	ldr	r3, [pc, #24]	@ (8006ce0 <cleanup_stdio+0x3c>)
 8006cc6:	4299      	cmp	r1, r3
 8006cc8:	d004      	beq.n	8006cd4 <cleanup_stdio+0x30>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd0:	f001 be2e 	b.w	8008930 <_fflush_r>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200007c8 	.word	0x200007c8
 8006cdc:	20000830 	.word	0x20000830
 8006ce0:	20000898 	.word	0x20000898

08006ce4 <global_stdio_init.part.0>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <global_stdio_init.part.0+0x30>)
 8006ce8:	4c0b      	ldr	r4, [pc, #44]	@ (8006d18 <global_stdio_init.part.0+0x34>)
 8006cea:	4a0c      	ldr	r2, [pc, #48]	@ (8006d1c <global_stdio_init.part.0+0x38>)
 8006cec:	4620      	mov	r0, r4
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	2104      	movs	r1, #4
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f7ff ff94 	bl	8006c20 <std>
 8006cf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	2109      	movs	r1, #9
 8006d00:	f7ff ff8e 	bl	8006c20 <std>
 8006d04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d08:	2202      	movs	r2, #2
 8006d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0e:	2112      	movs	r1, #18
 8006d10:	f7ff bf86 	b.w	8006c20 <std>
 8006d14:	20000900 	.word	0x20000900
 8006d18:	200007c8 	.word	0x200007c8
 8006d1c:	08006c8d 	.word	0x08006c8d

08006d20 <__sfp_lock_acquire>:
 8006d20:	4801      	ldr	r0, [pc, #4]	@ (8006d28 <__sfp_lock_acquire+0x8>)
 8006d22:	f000 b936 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	20000909 	.word	0x20000909

08006d2c <__sfp_lock_release>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	@ (8006d34 <__sfp_lock_release+0x8>)
 8006d2e:	f000 b931 	b.w	8006f94 <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	20000909 	.word	0x20000909

08006d38 <__sinit>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	f7ff fff0 	bl	8006d20 <__sfp_lock_acquire>
 8006d40:	6a23      	ldr	r3, [r4, #32]
 8006d42:	b11b      	cbz	r3, 8006d4c <__sinit+0x14>
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d48:	f7ff bff0 	b.w	8006d2c <__sfp_lock_release>
 8006d4c:	4b04      	ldr	r3, [pc, #16]	@ (8006d60 <__sinit+0x28>)
 8006d4e:	6223      	str	r3, [r4, #32]
 8006d50:	4b04      	ldr	r3, [pc, #16]	@ (8006d64 <__sinit+0x2c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f5      	bne.n	8006d44 <__sinit+0xc>
 8006d58:	f7ff ffc4 	bl	8006ce4 <global_stdio_init.part.0>
 8006d5c:	e7f2      	b.n	8006d44 <__sinit+0xc>
 8006d5e:	bf00      	nop
 8006d60:	08006ca5 	.word	0x08006ca5
 8006d64:	20000900 	.word	0x20000900

08006d68 <_fwalk_sglue>:
 8006d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	4688      	mov	r8, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	2600      	movs	r6, #0
 8006d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d78:	f1b9 0901 	subs.w	r9, r9, #1
 8006d7c:	d505      	bpl.n	8006d8a <_fwalk_sglue+0x22>
 8006d7e:	6824      	ldr	r4, [r4, #0]
 8006d80:	2c00      	cmp	r4, #0
 8006d82:	d1f7      	bne.n	8006d74 <_fwalk_sglue+0xc>
 8006d84:	4630      	mov	r0, r6
 8006d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	89ab      	ldrh	r3, [r5, #12]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d907      	bls.n	8006da0 <_fwalk_sglue+0x38>
 8006d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d94:	3301      	adds	r3, #1
 8006d96:	d003      	beq.n	8006da0 <_fwalk_sglue+0x38>
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	4306      	orrs	r6, r0
 8006da0:	3568      	adds	r5, #104	@ 0x68
 8006da2:	e7e9      	b.n	8006d78 <_fwalk_sglue+0x10>

08006da4 <sniprintf>:
 8006da4:	b40c      	push	{r2, r3}
 8006da6:	b530      	push	{r4, r5, lr}
 8006da8:	4b18      	ldr	r3, [pc, #96]	@ (8006e0c <sniprintf+0x68>)
 8006daa:	1e0c      	subs	r4, r1, #0
 8006dac:	681d      	ldr	r5, [r3, #0]
 8006dae:	b09d      	sub	sp, #116	@ 0x74
 8006db0:	da08      	bge.n	8006dc4 <sniprintf+0x20>
 8006db2:	238b      	movs	r3, #139	@ 0x8b
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	b01d      	add	sp, #116	@ 0x74
 8006dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dc0:	b002      	add	sp, #8
 8006dc2:	4770      	bx	lr
 8006dc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006dc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006dd2:	bf0c      	ite	eq
 8006dd4:	4623      	moveq	r3, r4
 8006dd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	9307      	str	r3, [sp, #28]
 8006dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006de2:	9002      	str	r0, [sp, #8]
 8006de4:	9006      	str	r0, [sp, #24]
 8006de6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006dea:	4628      	mov	r0, r5
 8006dec:	ab21      	add	r3, sp, #132	@ 0x84
 8006dee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006df0:	a902      	add	r1, sp, #8
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	f001 fc20 	bl	8008638 <_svfiprintf_r>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	bfbc      	itt	lt
 8006dfc:	238b      	movlt	r3, #139	@ 0x8b
 8006dfe:	602b      	strlt	r3, [r5, #0]
 8006e00:	2c00      	cmp	r4, #0
 8006e02:	d0da      	beq.n	8006dba <sniprintf+0x16>
 8006e04:	2200      	movs	r2, #0
 8006e06:	9b02      	ldr	r3, [sp, #8]
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	e7d6      	b.n	8006dba <sniprintf+0x16>
 8006e0c:	200000e8 	.word	0x200000e8

08006e10 <__sread>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	460c      	mov	r4, r1
 8006e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e18:	f000 f86c 	bl	8006ef4 <_read_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	bfab      	itete	ge
 8006e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e22:	89a3      	ldrhlt	r3, [r4, #12]
 8006e24:	181b      	addge	r3, r3, r0
 8006e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e2a:	bfac      	ite	ge
 8006e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e2e:	81a3      	strhlt	r3, [r4, #12]
 8006e30:	bd10      	pop	{r4, pc}

08006e32 <__swrite>:
 8006e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e36:	461f      	mov	r7, r3
 8006e38:	898b      	ldrh	r3, [r1, #12]
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	05db      	lsls	r3, r3, #23
 8006e3e:	460c      	mov	r4, r1
 8006e40:	4616      	mov	r6, r2
 8006e42:	d505      	bpl.n	8006e50 <__swrite+0x1e>
 8006e44:	2302      	movs	r3, #2
 8006e46:	2200      	movs	r2, #0
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	f000 f840 	bl	8006ed0 <_lseek_r>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	4632      	mov	r2, r6
 8006e54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e66:	f000 b857 	b.w	8006f18 <_write_r>

08006e6a <__sseek>:
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e72:	f000 f82d 	bl	8006ed0 <_lseek_r>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	bf15      	itete	ne
 8006e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e86:	81a3      	strheq	r3, [r4, #12]
 8006e88:	bf18      	it	ne
 8006e8a:	81a3      	strhne	r3, [r4, #12]
 8006e8c:	bd10      	pop	{r4, pc}

08006e8e <__sclose>:
 8006e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e92:	f000 b80d 	b.w	8006eb0 <_close_r>

08006e96 <memset>:
 8006e96:	4603      	mov	r3, r0
 8006e98:	4402      	add	r2, r0
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d100      	bne.n	8006ea0 <memset+0xa>
 8006e9e:	4770      	bx	lr
 8006ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ea4:	e7f9      	b.n	8006e9a <memset+0x4>
	...

08006ea8 <_localeconv_r>:
 8006ea8:	4800      	ldr	r0, [pc, #0]	@ (8006eac <_localeconv_r+0x4>)
 8006eaa:	4770      	bx	lr
 8006eac:	20000228 	.word	0x20000228

08006eb0 <_close_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4d05      	ldr	r5, [pc, #20]	@ (8006ecc <_close_r+0x1c>)
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	f7fc fb91 	bl	80035e2 <_close>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_close_r+0x1a>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_close_r+0x1a>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20000904 	.word	0x20000904

08006ed0 <_lseek_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4d05      	ldr	r5, [pc, #20]	@ (8006ef0 <_lseek_r+0x20>)
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7fc fba3 	bl	800362a <_lseek>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_lseek_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_lseek_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	20000904 	.word	0x20000904

08006ef4 <_read_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	4611      	mov	r1, r2
 8006efc:	2200      	movs	r2, #0
 8006efe:	4d05      	ldr	r5, [pc, #20]	@ (8006f14 <_read_r+0x20>)
 8006f00:	602a      	str	r2, [r5, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f7fc fb34 	bl	8003570 <_read>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_read_r+0x1e>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_read_r+0x1e>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20000904 	.word	0x20000904

08006f18 <_write_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	4d05      	ldr	r5, [pc, #20]	@ (8006f38 <_write_r+0x20>)
 8006f24:	602a      	str	r2, [r5, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f7fc fb3f 	bl	80035aa <_write>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_write_r+0x1e>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_write_r+0x1e>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	20000904 	.word	0x20000904

08006f3c <__errno>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	@ (8006f44 <__errno+0x8>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	200000e8 	.word	0x200000e8

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	4d0c      	ldr	r5, [pc, #48]	@ (8006f80 <__libc_init_array+0x38>)
 8006f4e:	4c0d      	ldr	r4, [pc, #52]	@ (8006f84 <__libc_init_array+0x3c>)
 8006f50:	1b64      	subs	r4, r4, r5
 8006f52:	10a4      	asrs	r4, r4, #2
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	f002 fffc 	bl	8009f54 <_init>
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	4d0a      	ldr	r5, [pc, #40]	@ (8006f88 <__libc_init_array+0x40>)
 8006f60:	4c0a      	ldr	r4, [pc, #40]	@ (8006f8c <__libc_init_array+0x44>)
 8006f62:	1b64      	subs	r4, r4, r5
 8006f64:	10a4      	asrs	r4, r4, #2
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	0800a8a4 	.word	0x0800a8a4
 8006f84:	0800a8a4 	.word	0x0800a8a4
 8006f88:	0800a8a4 	.word	0x0800a8a4
 8006f8c:	0800a8a8 	.word	0x0800a8a8

08006f90 <__retarget_lock_init_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <__retarget_lock_acquire_recursive>:
 8006f92:	4770      	bx	lr

08006f94 <__retarget_lock_release_recursive>:
 8006f94:	4770      	bx	lr

08006f96 <memchr>:
 8006f96:	4603      	mov	r3, r0
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	b2c9      	uxtb	r1, r1
 8006f9c:	4402      	add	r2, r0
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	d101      	bne.n	8006fa8 <memchr+0x12>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e003      	b.n	8006fb0 <memchr+0x1a>
 8006fa8:	7804      	ldrb	r4, [r0, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	428c      	cmp	r4, r1
 8006fae:	d1f6      	bne.n	8006f9e <memchr+0x8>
 8006fb0:	bd10      	pop	{r4, pc}

08006fb2 <memcpy>:
 8006fb2:	440a      	add	r2, r1
 8006fb4:	4291      	cmp	r1, r2
 8006fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fba:	d100      	bne.n	8006fbe <memcpy+0xc>
 8006fbc:	4770      	bx	lr
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc4:	4291      	cmp	r1, r2
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	d1f9      	bne.n	8006fc0 <memcpy+0xe>
 8006fcc:	bd10      	pop	{r4, pc}

08006fce <copysignf>:
 8006fce:	f360 011e 	bfi	r1, r0, #0, #31
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4770      	bx	lr

08006fd6 <quorem>:
 8006fd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	6903      	ldr	r3, [r0, #16]
 8006fdc:	690c      	ldr	r4, [r1, #16]
 8006fde:	4607      	mov	r7, r0
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	db7e      	blt.n	80070e2 <quorem+0x10c>
 8006fe4:	3c01      	subs	r4, #1
 8006fe6:	00a3      	lsls	r3, r4, #2
 8006fe8:	f100 0514 	add.w	r5, r0, #20
 8006fec:	f101 0814 	add.w	r8, r1, #20
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007000:	3301      	adds	r3, #1
 8007002:	429a      	cmp	r2, r3
 8007004:	fbb2 f6f3 	udiv	r6, r2, r3
 8007008:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800700c:	d32e      	bcc.n	800706c <quorem+0x96>
 800700e:	f04f 0a00 	mov.w	sl, #0
 8007012:	46c4      	mov	ip, r8
 8007014:	46ae      	mov	lr, r5
 8007016:	46d3      	mov	fp, sl
 8007018:	f85c 3b04 	ldr.w	r3, [ip], #4
 800701c:	b298      	uxth	r0, r3
 800701e:	fb06 a000 	mla	r0, r6, r0, sl
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	0c02      	lsrs	r2, r0, #16
 8007026:	fb06 2303 	mla	r3, r6, r3, r2
 800702a:	f8de 2000 	ldr.w	r2, [lr]
 800702e:	b280      	uxth	r0, r0
 8007030:	b292      	uxth	r2, r2
 8007032:	1a12      	subs	r2, r2, r0
 8007034:	445a      	add	r2, fp
 8007036:	f8de 0000 	ldr.w	r0, [lr]
 800703a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800703e:	b29b      	uxth	r3, r3
 8007040:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007044:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007048:	b292      	uxth	r2, r2
 800704a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800704e:	45e1      	cmp	r9, ip
 8007050:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007054:	f84e 2b04 	str.w	r2, [lr], #4
 8007058:	d2de      	bcs.n	8007018 <quorem+0x42>
 800705a:	9b00      	ldr	r3, [sp, #0]
 800705c:	58eb      	ldr	r3, [r5, r3]
 800705e:	b92b      	cbnz	r3, 800706c <quorem+0x96>
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	3b04      	subs	r3, #4
 8007064:	429d      	cmp	r5, r3
 8007066:	461a      	mov	r2, r3
 8007068:	d32f      	bcc.n	80070ca <quorem+0xf4>
 800706a:	613c      	str	r4, [r7, #16]
 800706c:	4638      	mov	r0, r7
 800706e:	f001 f97f 	bl	8008370 <__mcmp>
 8007072:	2800      	cmp	r0, #0
 8007074:	db25      	blt.n	80070c2 <quorem+0xec>
 8007076:	4629      	mov	r1, r5
 8007078:	2000      	movs	r0, #0
 800707a:	f858 2b04 	ldr.w	r2, [r8], #4
 800707e:	f8d1 c000 	ldr.w	ip, [r1]
 8007082:	fa1f fe82 	uxth.w	lr, r2
 8007086:	fa1f f38c 	uxth.w	r3, ip
 800708a:	eba3 030e 	sub.w	r3, r3, lr
 800708e:	4403      	add	r3, r0
 8007090:	0c12      	lsrs	r2, r2, #16
 8007092:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007096:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800709a:	b29b      	uxth	r3, r3
 800709c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a0:	45c1      	cmp	r9, r8
 80070a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070a6:	f841 3b04 	str.w	r3, [r1], #4
 80070aa:	d2e6      	bcs.n	800707a <quorem+0xa4>
 80070ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b4:	b922      	cbnz	r2, 80070c0 <quorem+0xea>
 80070b6:	3b04      	subs	r3, #4
 80070b8:	429d      	cmp	r5, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	d30b      	bcc.n	80070d6 <quorem+0x100>
 80070be:	613c      	str	r4, [r7, #16]
 80070c0:	3601      	adds	r6, #1
 80070c2:	4630      	mov	r0, r6
 80070c4:	b003      	add	sp, #12
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	3b04      	subs	r3, #4
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	d1cb      	bne.n	800706a <quorem+0x94>
 80070d2:	3c01      	subs	r4, #1
 80070d4:	e7c6      	b.n	8007064 <quorem+0x8e>
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	3b04      	subs	r3, #4
 80070da:	2a00      	cmp	r2, #0
 80070dc:	d1ef      	bne.n	80070be <quorem+0xe8>
 80070de:	3c01      	subs	r4, #1
 80070e0:	e7ea      	b.n	80070b8 <quorem+0xe2>
 80070e2:	2000      	movs	r0, #0
 80070e4:	e7ee      	b.n	80070c4 <quorem+0xee>
	...

080070e8 <_dtoa_r>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	4614      	mov	r4, r2
 80070ee:	461d      	mov	r5, r3
 80070f0:	69c7      	ldr	r7, [r0, #28]
 80070f2:	b097      	sub	sp, #92	@ 0x5c
 80070f4:	4681      	mov	r9, r0
 80070f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80070fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80070fc:	b97f      	cbnz	r7, 800711e <_dtoa_r+0x36>
 80070fe:	2010      	movs	r0, #16
 8007100:	f000 fe0e 	bl	8007d20 <malloc>
 8007104:	4602      	mov	r2, r0
 8007106:	f8c9 001c 	str.w	r0, [r9, #28]
 800710a:	b920      	cbnz	r0, 8007116 <_dtoa_r+0x2e>
 800710c:	21ef      	movs	r1, #239	@ 0xef
 800710e:	4bac      	ldr	r3, [pc, #688]	@ (80073c0 <_dtoa_r+0x2d8>)
 8007110:	48ac      	ldr	r0, [pc, #688]	@ (80073c4 <_dtoa_r+0x2dc>)
 8007112:	f001 fc5f 	bl	80089d4 <__assert_func>
 8007116:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800711a:	6007      	str	r7, [r0, #0]
 800711c:	60c7      	str	r7, [r0, #12]
 800711e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	b159      	cbz	r1, 800713e <_dtoa_r+0x56>
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	2301      	movs	r3, #1
 800712a:	4093      	lsls	r3, r2
 800712c:	604a      	str	r2, [r1, #4]
 800712e:	608b      	str	r3, [r1, #8]
 8007130:	4648      	mov	r0, r9
 8007132:	f000 feeb 	bl	8007f0c <_Bfree>
 8007136:	2200      	movs	r2, #0
 8007138:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	1e2b      	subs	r3, r5, #0
 8007140:	bfaf      	iteee	ge
 8007142:	2300      	movge	r3, #0
 8007144:	2201      	movlt	r2, #1
 8007146:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800714a:	9307      	strlt	r3, [sp, #28]
 800714c:	bfa8      	it	ge
 800714e:	6033      	strge	r3, [r6, #0]
 8007150:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007154:	4b9c      	ldr	r3, [pc, #624]	@ (80073c8 <_dtoa_r+0x2e0>)
 8007156:	bfb8      	it	lt
 8007158:	6032      	strlt	r2, [r6, #0]
 800715a:	ea33 0308 	bics.w	r3, r3, r8
 800715e:	d112      	bne.n	8007186 <_dtoa_r+0x9e>
 8007160:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007164:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800716c:	4323      	orrs	r3, r4
 800716e:	f000 855e 	beq.w	8007c2e <_dtoa_r+0xb46>
 8007172:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007174:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80073cc <_dtoa_r+0x2e4>
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8560 	beq.w	8007c3e <_dtoa_r+0xb56>
 800717e:	f10a 0303 	add.w	r3, sl, #3
 8007182:	f000 bd5a 	b.w	8007c3a <_dtoa_r+0xb52>
 8007186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800718a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800718e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007192:	2200      	movs	r2, #0
 8007194:	2300      	movs	r3, #0
 8007196:	f7f9 fc07 	bl	80009a8 <__aeabi_dcmpeq>
 800719a:	4607      	mov	r7, r0
 800719c:	b158      	cbz	r0, 80071b6 <_dtoa_r+0xce>
 800719e:	2301      	movs	r3, #1
 80071a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071a6:	b113      	cbz	r3, 80071ae <_dtoa_r+0xc6>
 80071a8:	4b89      	ldr	r3, [pc, #548]	@ (80073d0 <_dtoa_r+0x2e8>)
 80071aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80073d4 <_dtoa_r+0x2ec>
 80071b2:	f000 bd44 	b.w	8007c3e <_dtoa_r+0xb56>
 80071b6:	ab14      	add	r3, sp, #80	@ 0x50
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	ab15      	add	r3, sp, #84	@ 0x54
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	4648      	mov	r0, r9
 80071c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071c4:	f001 f984 	bl	80084d0 <__d2b>
 80071c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80071cc:	9003      	str	r0, [sp, #12]
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	d078      	beq.n	80072c4 <_dtoa_r+0x1dc>
 80071d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80071e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80071e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80071ea:	4619      	mov	r1, r3
 80071ec:	2200      	movs	r2, #0
 80071ee:	4b7a      	ldr	r3, [pc, #488]	@ (80073d8 <_dtoa_r+0x2f0>)
 80071f0:	f7f8 ffba 	bl	8000168 <__aeabi_dsub>
 80071f4:	a36c      	add	r3, pc, #432	@ (adr r3, 80073a8 <_dtoa_r+0x2c0>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	a36c      	add	r3, pc, #432	@ (adr r3, 80073b0 <_dtoa_r+0x2c8>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f8 ffb2 	bl	800016c <__adddf3>
 8007208:	4604      	mov	r4, r0
 800720a:	4630      	mov	r0, r6
 800720c:	460d      	mov	r5, r1
 800720e:	f7f9 f8f9 	bl	8000404 <__aeabi_i2d>
 8007212:	a369      	add	r3, pc, #420	@ (adr r3, 80073b8 <_dtoa_r+0x2d0>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f95e 	bl	80004d8 <__aeabi_dmul>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4620      	mov	r0, r4
 8007222:	4629      	mov	r1, r5
 8007224:	f7f8 ffa2 	bl	800016c <__adddf3>
 8007228:	4604      	mov	r4, r0
 800722a:	460d      	mov	r5, r1
 800722c:	f7f9 fc04 	bl	8000a38 <__aeabi_d2iz>
 8007230:	2200      	movs	r2, #0
 8007232:	4607      	mov	r7, r0
 8007234:	2300      	movs	r3, #0
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 fbbf 	bl	80009bc <__aeabi_dcmplt>
 800723e:	b140      	cbz	r0, 8007252 <_dtoa_r+0x16a>
 8007240:	4638      	mov	r0, r7
 8007242:	f7f9 f8df 	bl	8000404 <__aeabi_i2d>
 8007246:	4622      	mov	r2, r4
 8007248:	462b      	mov	r3, r5
 800724a:	f7f9 fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800724e:	b900      	cbnz	r0, 8007252 <_dtoa_r+0x16a>
 8007250:	3f01      	subs	r7, #1
 8007252:	2f16      	cmp	r7, #22
 8007254:	d854      	bhi.n	8007300 <_dtoa_r+0x218>
 8007256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800725a:	4b60      	ldr	r3, [pc, #384]	@ (80073dc <_dtoa_r+0x2f4>)
 800725c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 fbaa 	bl	80009bc <__aeabi_dcmplt>
 8007268:	2800      	cmp	r0, #0
 800726a:	d04b      	beq.n	8007304 <_dtoa_r+0x21c>
 800726c:	2300      	movs	r3, #0
 800726e:	3f01      	subs	r7, #1
 8007270:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007272:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007274:	1b9b      	subs	r3, r3, r6
 8007276:	1e5a      	subs	r2, r3, #1
 8007278:	bf49      	itett	mi
 800727a:	f1c3 0301 	rsbmi	r3, r3, #1
 800727e:	2300      	movpl	r3, #0
 8007280:	9304      	strmi	r3, [sp, #16]
 8007282:	2300      	movmi	r3, #0
 8007284:	9209      	str	r2, [sp, #36]	@ 0x24
 8007286:	bf54      	ite	pl
 8007288:	9304      	strpl	r3, [sp, #16]
 800728a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800728c:	2f00      	cmp	r7, #0
 800728e:	db3b      	blt.n	8007308 <_dtoa_r+0x220>
 8007290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007292:	970e      	str	r7, [sp, #56]	@ 0x38
 8007294:	443b      	add	r3, r7
 8007296:	9309      	str	r3, [sp, #36]	@ 0x24
 8007298:	2300      	movs	r3, #0
 800729a:	930a      	str	r3, [sp, #40]	@ 0x28
 800729c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800729e:	2b09      	cmp	r3, #9
 80072a0:	d865      	bhi.n	800736e <_dtoa_r+0x286>
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	bfc4      	itt	gt
 80072a6:	3b04      	subgt	r3, #4
 80072a8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80072aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072ac:	bfc8      	it	gt
 80072ae:	2400      	movgt	r4, #0
 80072b0:	f1a3 0302 	sub.w	r3, r3, #2
 80072b4:	bfd8      	it	le
 80072b6:	2401      	movle	r4, #1
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d864      	bhi.n	8007386 <_dtoa_r+0x29e>
 80072bc:	e8df f003 	tbb	[pc, r3]
 80072c0:	2c385553 	.word	0x2c385553
 80072c4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072c8:	441e      	add	r6, r3
 80072ca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	bfc1      	itttt	gt
 80072d2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072d6:	fa08 f803 	lslgt.w	r8, r8, r3
 80072da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072e2:	bfd6      	itet	le
 80072e4:	f1c3 0320 	rsble	r3, r3, #32
 80072e8:	ea48 0003 	orrgt.w	r0, r8, r3
 80072ec:	fa04 f003 	lslle.w	r0, r4, r3
 80072f0:	f7f9 f878 	bl	80003e4 <__aeabi_ui2d>
 80072f4:	2201      	movs	r2, #1
 80072f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072fa:	3e01      	subs	r6, #1
 80072fc:	9212      	str	r2, [sp, #72]	@ 0x48
 80072fe:	e774      	b.n	80071ea <_dtoa_r+0x102>
 8007300:	2301      	movs	r3, #1
 8007302:	e7b5      	b.n	8007270 <_dtoa_r+0x188>
 8007304:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007306:	e7b4      	b.n	8007272 <_dtoa_r+0x18a>
 8007308:	9b04      	ldr	r3, [sp, #16]
 800730a:	1bdb      	subs	r3, r3, r7
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	427b      	negs	r3, r7
 8007310:	930a      	str	r3, [sp, #40]	@ 0x28
 8007312:	2300      	movs	r3, #0
 8007314:	930e      	str	r3, [sp, #56]	@ 0x38
 8007316:	e7c1      	b.n	800729c <_dtoa_r+0x1b4>
 8007318:	2301      	movs	r3, #1
 800731a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800731c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800731e:	eb07 0b03 	add.w	fp, r7, r3
 8007322:	f10b 0301 	add.w	r3, fp, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	9308      	str	r3, [sp, #32]
 800732a:	bfb8      	it	lt
 800732c:	2301      	movlt	r3, #1
 800732e:	e006      	b.n	800733e <_dtoa_r+0x256>
 8007330:	2301      	movs	r3, #1
 8007332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007334:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd28      	ble.n	800738c <_dtoa_r+0x2a4>
 800733a:	469b      	mov	fp, r3
 800733c:	9308      	str	r3, [sp, #32]
 800733e:	2100      	movs	r1, #0
 8007340:	2204      	movs	r2, #4
 8007342:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007346:	f102 0514 	add.w	r5, r2, #20
 800734a:	429d      	cmp	r5, r3
 800734c:	d926      	bls.n	800739c <_dtoa_r+0x2b4>
 800734e:	6041      	str	r1, [r0, #4]
 8007350:	4648      	mov	r0, r9
 8007352:	f000 fd9b 	bl	8007e8c <_Balloc>
 8007356:	4682      	mov	sl, r0
 8007358:	2800      	cmp	r0, #0
 800735a:	d143      	bne.n	80073e4 <_dtoa_r+0x2fc>
 800735c:	4602      	mov	r2, r0
 800735e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007362:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <_dtoa_r+0x2f8>)
 8007364:	e6d4      	b.n	8007110 <_dtoa_r+0x28>
 8007366:	2300      	movs	r3, #0
 8007368:	e7e3      	b.n	8007332 <_dtoa_r+0x24a>
 800736a:	2300      	movs	r3, #0
 800736c:	e7d5      	b.n	800731a <_dtoa_r+0x232>
 800736e:	2401      	movs	r4, #1
 8007370:	2300      	movs	r3, #0
 8007372:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007374:	9320      	str	r3, [sp, #128]	@ 0x80
 8007376:	f04f 3bff 	mov.w	fp, #4294967295
 800737a:	2200      	movs	r2, #0
 800737c:	2312      	movs	r3, #18
 800737e:	f8cd b020 	str.w	fp, [sp, #32]
 8007382:	9221      	str	r2, [sp, #132]	@ 0x84
 8007384:	e7db      	b.n	800733e <_dtoa_r+0x256>
 8007386:	2301      	movs	r3, #1
 8007388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800738a:	e7f4      	b.n	8007376 <_dtoa_r+0x28e>
 800738c:	f04f 0b01 	mov.w	fp, #1
 8007390:	465b      	mov	r3, fp
 8007392:	f8cd b020 	str.w	fp, [sp, #32]
 8007396:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800739a:	e7d0      	b.n	800733e <_dtoa_r+0x256>
 800739c:	3101      	adds	r1, #1
 800739e:	0052      	lsls	r2, r2, #1
 80073a0:	e7d1      	b.n	8007346 <_dtoa_r+0x25e>
 80073a2:	bf00      	nop
 80073a4:	f3af 8000 	nop.w
 80073a8:	636f4361 	.word	0x636f4361
 80073ac:	3fd287a7 	.word	0x3fd287a7
 80073b0:	8b60c8b3 	.word	0x8b60c8b3
 80073b4:	3fc68a28 	.word	0x3fc68a28
 80073b8:	509f79fb 	.word	0x509f79fb
 80073bc:	3fd34413 	.word	0x3fd34413
 80073c0:	0800a17f 	.word	0x0800a17f
 80073c4:	0800a196 	.word	0x0800a196
 80073c8:	7ff00000 	.word	0x7ff00000
 80073cc:	0800a17b 	.word	0x0800a17b
 80073d0:	0800a14f 	.word	0x0800a14f
 80073d4:	0800a14e 	.word	0x0800a14e
 80073d8:	3ff80000 	.word	0x3ff80000
 80073dc:	0800a2e8 	.word	0x0800a2e8
 80073e0:	0800a1ee 	.word	0x0800a1ee
 80073e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80073e8:	6018      	str	r0, [r3, #0]
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	2b0e      	cmp	r3, #14
 80073ee:	f200 80a1 	bhi.w	8007534 <_dtoa_r+0x44c>
 80073f2:	2c00      	cmp	r4, #0
 80073f4:	f000 809e 	beq.w	8007534 <_dtoa_r+0x44c>
 80073f8:	2f00      	cmp	r7, #0
 80073fa:	dd33      	ble.n	8007464 <_dtoa_r+0x37c>
 80073fc:	4b9c      	ldr	r3, [pc, #624]	@ (8007670 <_dtoa_r+0x588>)
 80073fe:	f007 020f 	and.w	r2, r7, #15
 8007402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007406:	05f8      	lsls	r0, r7, #23
 8007408:	e9d3 3400 	ldrd	r3, r4, [r3]
 800740c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007410:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007414:	d516      	bpl.n	8007444 <_dtoa_r+0x35c>
 8007416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800741a:	4b96      	ldr	r3, [pc, #600]	@ (8007674 <_dtoa_r+0x58c>)
 800741c:	2603      	movs	r6, #3
 800741e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007422:	f7f9 f983 	bl	800072c <__aeabi_ddiv>
 8007426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800742a:	f004 040f 	and.w	r4, r4, #15
 800742e:	4d91      	ldr	r5, [pc, #580]	@ (8007674 <_dtoa_r+0x58c>)
 8007430:	b954      	cbnz	r4, 8007448 <_dtoa_r+0x360>
 8007432:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800743a:	f7f9 f977 	bl	800072c <__aeabi_ddiv>
 800743e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007442:	e028      	b.n	8007496 <_dtoa_r+0x3ae>
 8007444:	2602      	movs	r6, #2
 8007446:	e7f2      	b.n	800742e <_dtoa_r+0x346>
 8007448:	07e1      	lsls	r1, r4, #31
 800744a:	d508      	bpl.n	800745e <_dtoa_r+0x376>
 800744c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007450:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007454:	f7f9 f840 	bl	80004d8 <__aeabi_dmul>
 8007458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800745c:	3601      	adds	r6, #1
 800745e:	1064      	asrs	r4, r4, #1
 8007460:	3508      	adds	r5, #8
 8007462:	e7e5      	b.n	8007430 <_dtoa_r+0x348>
 8007464:	f000 80af 	beq.w	80075c6 <_dtoa_r+0x4de>
 8007468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800746c:	427c      	negs	r4, r7
 800746e:	4b80      	ldr	r3, [pc, #512]	@ (8007670 <_dtoa_r+0x588>)
 8007470:	f004 020f 	and.w	r2, r4, #15
 8007474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f7f9 f82c 	bl	80004d8 <__aeabi_dmul>
 8007480:	2602      	movs	r6, #2
 8007482:	2300      	movs	r3, #0
 8007484:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007488:	4d7a      	ldr	r5, [pc, #488]	@ (8007674 <_dtoa_r+0x58c>)
 800748a:	1124      	asrs	r4, r4, #4
 800748c:	2c00      	cmp	r4, #0
 800748e:	f040 808f 	bne.w	80075b0 <_dtoa_r+0x4c8>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1d3      	bne.n	800743e <_dtoa_r+0x356>
 8007496:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800749a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8094 	beq.w	80075ca <_dtoa_r+0x4e2>
 80074a2:	2200      	movs	r2, #0
 80074a4:	4620      	mov	r0, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	4b73      	ldr	r3, [pc, #460]	@ (8007678 <_dtoa_r+0x590>)
 80074aa:	f7f9 fa87 	bl	80009bc <__aeabi_dcmplt>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f000 808b 	beq.w	80075ca <_dtoa_r+0x4e2>
 80074b4:	9b08      	ldr	r3, [sp, #32]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 8087 	beq.w	80075ca <_dtoa_r+0x4e2>
 80074bc:	f1bb 0f00 	cmp.w	fp, #0
 80074c0:	dd34      	ble.n	800752c <_dtoa_r+0x444>
 80074c2:	4620      	mov	r0, r4
 80074c4:	2200      	movs	r2, #0
 80074c6:	4629      	mov	r1, r5
 80074c8:	4b6c      	ldr	r3, [pc, #432]	@ (800767c <_dtoa_r+0x594>)
 80074ca:	f7f9 f805 	bl	80004d8 <__aeabi_dmul>
 80074ce:	465c      	mov	r4, fp
 80074d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80074d4:	f107 38ff 	add.w	r8, r7, #4294967295
 80074d8:	3601      	adds	r6, #1
 80074da:	4630      	mov	r0, r6
 80074dc:	f7f8 ff92 	bl	8000404 <__aeabi_i2d>
 80074e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074e4:	f7f8 fff8 	bl	80004d8 <__aeabi_dmul>
 80074e8:	2200      	movs	r2, #0
 80074ea:	4b65      	ldr	r3, [pc, #404]	@ (8007680 <_dtoa_r+0x598>)
 80074ec:	f7f8 fe3e 	bl	800016c <__adddf3>
 80074f0:	4605      	mov	r5, r0
 80074f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	d16a      	bne.n	80075d0 <_dtoa_r+0x4e8>
 80074fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074fe:	2200      	movs	r2, #0
 8007500:	4b60      	ldr	r3, [pc, #384]	@ (8007684 <_dtoa_r+0x59c>)
 8007502:	f7f8 fe31 	bl	8000168 <__aeabi_dsub>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800750e:	462a      	mov	r2, r5
 8007510:	4633      	mov	r3, r6
 8007512:	f7f9 fa71 	bl	80009f8 <__aeabi_dcmpgt>
 8007516:	2800      	cmp	r0, #0
 8007518:	f040 8298 	bne.w	8007a4c <_dtoa_r+0x964>
 800751c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007520:	462a      	mov	r2, r5
 8007522:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007526:	f7f9 fa49 	bl	80009bc <__aeabi_dcmplt>
 800752a:	bb38      	cbnz	r0, 800757c <_dtoa_r+0x494>
 800752c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007530:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007534:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007536:	2b00      	cmp	r3, #0
 8007538:	f2c0 8157 	blt.w	80077ea <_dtoa_r+0x702>
 800753c:	2f0e      	cmp	r7, #14
 800753e:	f300 8154 	bgt.w	80077ea <_dtoa_r+0x702>
 8007542:	4b4b      	ldr	r3, [pc, #300]	@ (8007670 <_dtoa_r+0x588>)
 8007544:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007548:	e9d3 3400 	ldrd	r3, r4, [r3]
 800754c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007552:	2b00      	cmp	r3, #0
 8007554:	f280 80e5 	bge.w	8007722 <_dtoa_r+0x63a>
 8007558:	9b08      	ldr	r3, [sp, #32]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f300 80e1 	bgt.w	8007722 <_dtoa_r+0x63a>
 8007560:	d10c      	bne.n	800757c <_dtoa_r+0x494>
 8007562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007566:	2200      	movs	r2, #0
 8007568:	4b46      	ldr	r3, [pc, #280]	@ (8007684 <_dtoa_r+0x59c>)
 800756a:	f7f8 ffb5 	bl	80004d8 <__aeabi_dmul>
 800756e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007572:	f7f9 fa37 	bl	80009e4 <__aeabi_dcmpge>
 8007576:	2800      	cmp	r0, #0
 8007578:	f000 8266 	beq.w	8007a48 <_dtoa_r+0x960>
 800757c:	2400      	movs	r4, #0
 800757e:	4625      	mov	r5, r4
 8007580:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007582:	4656      	mov	r6, sl
 8007584:	ea6f 0803 	mvn.w	r8, r3
 8007588:	2700      	movs	r7, #0
 800758a:	4621      	mov	r1, r4
 800758c:	4648      	mov	r0, r9
 800758e:	f000 fcbd 	bl	8007f0c <_Bfree>
 8007592:	2d00      	cmp	r5, #0
 8007594:	f000 80bd 	beq.w	8007712 <_dtoa_r+0x62a>
 8007598:	b12f      	cbz	r7, 80075a6 <_dtoa_r+0x4be>
 800759a:	42af      	cmp	r7, r5
 800759c:	d003      	beq.n	80075a6 <_dtoa_r+0x4be>
 800759e:	4639      	mov	r1, r7
 80075a0:	4648      	mov	r0, r9
 80075a2:	f000 fcb3 	bl	8007f0c <_Bfree>
 80075a6:	4629      	mov	r1, r5
 80075a8:	4648      	mov	r0, r9
 80075aa:	f000 fcaf 	bl	8007f0c <_Bfree>
 80075ae:	e0b0      	b.n	8007712 <_dtoa_r+0x62a>
 80075b0:	07e2      	lsls	r2, r4, #31
 80075b2:	d505      	bpl.n	80075c0 <_dtoa_r+0x4d8>
 80075b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075b8:	f7f8 ff8e 	bl	80004d8 <__aeabi_dmul>
 80075bc:	2301      	movs	r3, #1
 80075be:	3601      	adds	r6, #1
 80075c0:	1064      	asrs	r4, r4, #1
 80075c2:	3508      	adds	r5, #8
 80075c4:	e762      	b.n	800748c <_dtoa_r+0x3a4>
 80075c6:	2602      	movs	r6, #2
 80075c8:	e765      	b.n	8007496 <_dtoa_r+0x3ae>
 80075ca:	46b8      	mov	r8, r7
 80075cc:	9c08      	ldr	r4, [sp, #32]
 80075ce:	e784      	b.n	80074da <_dtoa_r+0x3f2>
 80075d0:	4b27      	ldr	r3, [pc, #156]	@ (8007670 <_dtoa_r+0x588>)
 80075d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075dc:	4454      	add	r4, sl
 80075de:	2900      	cmp	r1, #0
 80075e0:	d054      	beq.n	800768c <_dtoa_r+0x5a4>
 80075e2:	2000      	movs	r0, #0
 80075e4:	4928      	ldr	r1, [pc, #160]	@ (8007688 <_dtoa_r+0x5a0>)
 80075e6:	f7f9 f8a1 	bl	800072c <__aeabi_ddiv>
 80075ea:	4633      	mov	r3, r6
 80075ec:	462a      	mov	r2, r5
 80075ee:	f7f8 fdbb 	bl	8000168 <__aeabi_dsub>
 80075f2:	4656      	mov	r6, sl
 80075f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075fc:	f7f9 fa1c 	bl	8000a38 <__aeabi_d2iz>
 8007600:	4605      	mov	r5, r0
 8007602:	f7f8 feff 	bl	8000404 <__aeabi_i2d>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800760e:	f7f8 fdab 	bl	8000168 <__aeabi_dsub>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	3530      	adds	r5, #48	@ 0x30
 8007618:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800761c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007620:	f806 5b01 	strb.w	r5, [r6], #1
 8007624:	f7f9 f9ca 	bl	80009bc <__aeabi_dcmplt>
 8007628:	2800      	cmp	r0, #0
 800762a:	d172      	bne.n	8007712 <_dtoa_r+0x62a>
 800762c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007630:	2000      	movs	r0, #0
 8007632:	4911      	ldr	r1, [pc, #68]	@ (8007678 <_dtoa_r+0x590>)
 8007634:	f7f8 fd98 	bl	8000168 <__aeabi_dsub>
 8007638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800763c:	f7f9 f9be 	bl	80009bc <__aeabi_dcmplt>
 8007640:	2800      	cmp	r0, #0
 8007642:	f040 80b4 	bne.w	80077ae <_dtoa_r+0x6c6>
 8007646:	42a6      	cmp	r6, r4
 8007648:	f43f af70 	beq.w	800752c <_dtoa_r+0x444>
 800764c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007650:	2200      	movs	r2, #0
 8007652:	4b0a      	ldr	r3, [pc, #40]	@ (800767c <_dtoa_r+0x594>)
 8007654:	f7f8 ff40 	bl	80004d8 <__aeabi_dmul>
 8007658:	2200      	movs	r2, #0
 800765a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800765e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007662:	4b06      	ldr	r3, [pc, #24]	@ (800767c <_dtoa_r+0x594>)
 8007664:	f7f8 ff38 	bl	80004d8 <__aeabi_dmul>
 8007668:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800766c:	e7c4      	b.n	80075f8 <_dtoa_r+0x510>
 800766e:	bf00      	nop
 8007670:	0800a2e8 	.word	0x0800a2e8
 8007674:	0800a2c0 	.word	0x0800a2c0
 8007678:	3ff00000 	.word	0x3ff00000
 800767c:	40240000 	.word	0x40240000
 8007680:	401c0000 	.word	0x401c0000
 8007684:	40140000 	.word	0x40140000
 8007688:	3fe00000 	.word	0x3fe00000
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	f7f8 ff22 	bl	80004d8 <__aeabi_dmul>
 8007694:	4656      	mov	r6, sl
 8007696:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800769a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800769c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076a0:	f7f9 f9ca 	bl	8000a38 <__aeabi_d2iz>
 80076a4:	4605      	mov	r5, r0
 80076a6:	f7f8 fead 	bl	8000404 <__aeabi_i2d>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076b2:	f7f8 fd59 	bl	8000168 <__aeabi_dsub>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	3530      	adds	r5, #48	@ 0x30
 80076bc:	f806 5b01 	strb.w	r5, [r6], #1
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	d124      	bne.n	8007716 <_dtoa_r+0x62e>
 80076cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076d0:	4bae      	ldr	r3, [pc, #696]	@ (800798c <_dtoa_r+0x8a4>)
 80076d2:	f7f8 fd4b 	bl	800016c <__adddf3>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076de:	f7f9 f98b 	bl	80009f8 <__aeabi_dcmpgt>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d163      	bne.n	80077ae <_dtoa_r+0x6c6>
 80076e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076ea:	2000      	movs	r0, #0
 80076ec:	49a7      	ldr	r1, [pc, #668]	@ (800798c <_dtoa_r+0x8a4>)
 80076ee:	f7f8 fd3b 	bl	8000168 <__aeabi_dsub>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076fa:	f7f9 f95f 	bl	80009bc <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f43f af14 	beq.w	800752c <_dtoa_r+0x444>
 8007704:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007706:	1e73      	subs	r3, r6, #1
 8007708:	9313      	str	r3, [sp, #76]	@ 0x4c
 800770a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800770e:	2b30      	cmp	r3, #48	@ 0x30
 8007710:	d0f8      	beq.n	8007704 <_dtoa_r+0x61c>
 8007712:	4647      	mov	r7, r8
 8007714:	e03b      	b.n	800778e <_dtoa_r+0x6a6>
 8007716:	4b9e      	ldr	r3, [pc, #632]	@ (8007990 <_dtoa_r+0x8a8>)
 8007718:	f7f8 fede 	bl	80004d8 <__aeabi_dmul>
 800771c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007720:	e7bc      	b.n	800769c <_dtoa_r+0x5b4>
 8007722:	4656      	mov	r6, sl
 8007724:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800772c:	4620      	mov	r0, r4
 800772e:	4629      	mov	r1, r5
 8007730:	f7f8 fffc 	bl	800072c <__aeabi_ddiv>
 8007734:	f7f9 f980 	bl	8000a38 <__aeabi_d2iz>
 8007738:	4680      	mov	r8, r0
 800773a:	f7f8 fe63 	bl	8000404 <__aeabi_i2d>
 800773e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007742:	f7f8 fec9 	bl	80004d8 <__aeabi_dmul>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f8 fd0b 	bl	8000168 <__aeabi_dsub>
 8007752:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007756:	9d08      	ldr	r5, [sp, #32]
 8007758:	f806 4b01 	strb.w	r4, [r6], #1
 800775c:	eba6 040a 	sub.w	r4, r6, sl
 8007760:	42a5      	cmp	r5, r4
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	d133      	bne.n	80077d0 <_dtoa_r+0x6e8>
 8007768:	f7f8 fd00 	bl	800016c <__adddf3>
 800776c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	f7f9 f940 	bl	80009f8 <__aeabi_dcmpgt>
 8007778:	b9c0      	cbnz	r0, 80077ac <_dtoa_r+0x6c4>
 800777a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f9 f911 	bl	80009a8 <__aeabi_dcmpeq>
 8007786:	b110      	cbz	r0, 800778e <_dtoa_r+0x6a6>
 8007788:	f018 0f01 	tst.w	r8, #1
 800778c:	d10e      	bne.n	80077ac <_dtoa_r+0x6c4>
 800778e:	4648      	mov	r0, r9
 8007790:	9903      	ldr	r1, [sp, #12]
 8007792:	f000 fbbb 	bl	8007f0c <_Bfree>
 8007796:	2300      	movs	r3, #0
 8007798:	7033      	strb	r3, [r6, #0]
 800779a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800779c:	3701      	adds	r7, #1
 800779e:	601f      	str	r7, [r3, #0]
 80077a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 824b 	beq.w	8007c3e <_dtoa_r+0xb56>
 80077a8:	601e      	str	r6, [r3, #0]
 80077aa:	e248      	b.n	8007c3e <_dtoa_r+0xb56>
 80077ac:	46b8      	mov	r8, r7
 80077ae:	4633      	mov	r3, r6
 80077b0:	461e      	mov	r6, r3
 80077b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077b6:	2a39      	cmp	r2, #57	@ 0x39
 80077b8:	d106      	bne.n	80077c8 <_dtoa_r+0x6e0>
 80077ba:	459a      	cmp	sl, r3
 80077bc:	d1f8      	bne.n	80077b0 <_dtoa_r+0x6c8>
 80077be:	2230      	movs	r2, #48	@ 0x30
 80077c0:	f108 0801 	add.w	r8, r8, #1
 80077c4:	f88a 2000 	strb.w	r2, [sl]
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	3201      	adds	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e7a0      	b.n	8007712 <_dtoa_r+0x62a>
 80077d0:	2200      	movs	r2, #0
 80077d2:	4b6f      	ldr	r3, [pc, #444]	@ (8007990 <_dtoa_r+0x8a8>)
 80077d4:	f7f8 fe80 	bl	80004d8 <__aeabi_dmul>
 80077d8:	2200      	movs	r2, #0
 80077da:	2300      	movs	r3, #0
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	f7f9 f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d09f      	beq.n	8007728 <_dtoa_r+0x640>
 80077e8:	e7d1      	b.n	800778e <_dtoa_r+0x6a6>
 80077ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	f000 80ea 	beq.w	80079c6 <_dtoa_r+0x8de>
 80077f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077f4:	2a01      	cmp	r2, #1
 80077f6:	f300 80cd 	bgt.w	8007994 <_dtoa_r+0x8ac>
 80077fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	f000 80c1 	beq.w	8007984 <_dtoa_r+0x89c>
 8007802:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007806:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007808:	9e04      	ldr	r6, [sp, #16]
 800780a:	9a04      	ldr	r2, [sp, #16]
 800780c:	2101      	movs	r1, #1
 800780e:	441a      	add	r2, r3
 8007810:	9204      	str	r2, [sp, #16]
 8007812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007814:	4648      	mov	r0, r9
 8007816:	441a      	add	r2, r3
 8007818:	9209      	str	r2, [sp, #36]	@ 0x24
 800781a:	f000 fc2b 	bl	8008074 <__i2b>
 800781e:	4605      	mov	r5, r0
 8007820:	b166      	cbz	r6, 800783c <_dtoa_r+0x754>
 8007822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	dd09      	ble.n	800783c <_dtoa_r+0x754>
 8007828:	42b3      	cmp	r3, r6
 800782a:	bfa8      	it	ge
 800782c:	4633      	movge	r3, r6
 800782e:	9a04      	ldr	r2, [sp, #16]
 8007830:	1af6      	subs	r6, r6, r3
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	9204      	str	r2, [sp, #16]
 8007836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	9309      	str	r3, [sp, #36]	@ 0x24
 800783c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800783e:	b30b      	cbz	r3, 8007884 <_dtoa_r+0x79c>
 8007840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80c6 	beq.w	80079d4 <_dtoa_r+0x8ec>
 8007848:	2c00      	cmp	r4, #0
 800784a:	f000 80c0 	beq.w	80079ce <_dtoa_r+0x8e6>
 800784e:	4629      	mov	r1, r5
 8007850:	4622      	mov	r2, r4
 8007852:	4648      	mov	r0, r9
 8007854:	f000 fcc6 	bl	80081e4 <__pow5mult>
 8007858:	9a03      	ldr	r2, [sp, #12]
 800785a:	4601      	mov	r1, r0
 800785c:	4605      	mov	r5, r0
 800785e:	4648      	mov	r0, r9
 8007860:	f000 fc1e 	bl	80080a0 <__multiply>
 8007864:	9903      	ldr	r1, [sp, #12]
 8007866:	4680      	mov	r8, r0
 8007868:	4648      	mov	r0, r9
 800786a:	f000 fb4f 	bl	8007f0c <_Bfree>
 800786e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007870:	1b1b      	subs	r3, r3, r4
 8007872:	930a      	str	r3, [sp, #40]	@ 0x28
 8007874:	f000 80b1 	beq.w	80079da <_dtoa_r+0x8f2>
 8007878:	4641      	mov	r1, r8
 800787a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800787c:	4648      	mov	r0, r9
 800787e:	f000 fcb1 	bl	80081e4 <__pow5mult>
 8007882:	9003      	str	r0, [sp, #12]
 8007884:	2101      	movs	r1, #1
 8007886:	4648      	mov	r0, r9
 8007888:	f000 fbf4 	bl	8008074 <__i2b>
 800788c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800788e:	4604      	mov	r4, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 81d8 	beq.w	8007c46 <_dtoa_r+0xb5e>
 8007896:	461a      	mov	r2, r3
 8007898:	4601      	mov	r1, r0
 800789a:	4648      	mov	r0, r9
 800789c:	f000 fca2 	bl	80081e4 <__pow5mult>
 80078a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078a2:	4604      	mov	r4, r0
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	f300 809f 	bgt.w	80079e8 <_dtoa_r+0x900>
 80078aa:	9b06      	ldr	r3, [sp, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8097 	bne.w	80079e0 <_dtoa_r+0x8f8>
 80078b2:	9b07      	ldr	r3, [sp, #28]
 80078b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 8093 	bne.w	80079e4 <_dtoa_r+0x8fc>
 80078be:	9b07      	ldr	r3, [sp, #28]
 80078c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078c4:	0d1b      	lsrs	r3, r3, #20
 80078c6:	051b      	lsls	r3, r3, #20
 80078c8:	b133      	cbz	r3, 80078d8 <_dtoa_r+0x7f0>
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	3301      	adds	r3, #1
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d2:	3301      	adds	r3, #1
 80078d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078d6:	2301      	movs	r3, #1
 80078d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 81b8 	beq.w	8007c52 <_dtoa_r+0xb6a>
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078e8:	6918      	ldr	r0, [r3, #16]
 80078ea:	f000 fb77 	bl	8007fdc <__hi0bits>
 80078ee:	f1c0 0020 	rsb	r0, r0, #32
 80078f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f4:	4418      	add	r0, r3
 80078f6:	f010 001f 	ands.w	r0, r0, #31
 80078fa:	f000 8082 	beq.w	8007a02 <_dtoa_r+0x91a>
 80078fe:	f1c0 0320 	rsb	r3, r0, #32
 8007902:	2b04      	cmp	r3, #4
 8007904:	dd73      	ble.n	80079ee <_dtoa_r+0x906>
 8007906:	9b04      	ldr	r3, [sp, #16]
 8007908:	f1c0 001c 	rsb	r0, r0, #28
 800790c:	4403      	add	r3, r0
 800790e:	9304      	str	r3, [sp, #16]
 8007910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007912:	4406      	add	r6, r0
 8007914:	4403      	add	r3, r0
 8007916:	9309      	str	r3, [sp, #36]	@ 0x24
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	dd05      	ble.n	800792a <_dtoa_r+0x842>
 800791e:	461a      	mov	r2, r3
 8007920:	4648      	mov	r0, r9
 8007922:	9903      	ldr	r1, [sp, #12]
 8007924:	f000 fcb8 	bl	8008298 <__lshift>
 8007928:	9003      	str	r0, [sp, #12]
 800792a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	dd05      	ble.n	800793c <_dtoa_r+0x854>
 8007930:	4621      	mov	r1, r4
 8007932:	461a      	mov	r2, r3
 8007934:	4648      	mov	r0, r9
 8007936:	f000 fcaf 	bl	8008298 <__lshift>
 800793a:	4604      	mov	r4, r0
 800793c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d061      	beq.n	8007a06 <_dtoa_r+0x91e>
 8007942:	4621      	mov	r1, r4
 8007944:	9803      	ldr	r0, [sp, #12]
 8007946:	f000 fd13 	bl	8008370 <__mcmp>
 800794a:	2800      	cmp	r0, #0
 800794c:	da5b      	bge.n	8007a06 <_dtoa_r+0x91e>
 800794e:	2300      	movs	r3, #0
 8007950:	220a      	movs	r2, #10
 8007952:	4648      	mov	r0, r9
 8007954:	9903      	ldr	r1, [sp, #12]
 8007956:	f000 fafb 	bl	8007f50 <__multadd>
 800795a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800795c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007960:	9003      	str	r0, [sp, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8177 	beq.w	8007c56 <_dtoa_r+0xb6e>
 8007968:	4629      	mov	r1, r5
 800796a:	2300      	movs	r3, #0
 800796c:	220a      	movs	r2, #10
 800796e:	4648      	mov	r0, r9
 8007970:	f000 faee 	bl	8007f50 <__multadd>
 8007974:	f1bb 0f00 	cmp.w	fp, #0
 8007978:	4605      	mov	r5, r0
 800797a:	dc6f      	bgt.n	8007a5c <_dtoa_r+0x974>
 800797c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800797e:	2b02      	cmp	r3, #2
 8007980:	dc49      	bgt.n	8007a16 <_dtoa_r+0x92e>
 8007982:	e06b      	b.n	8007a5c <_dtoa_r+0x974>
 8007984:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007986:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800798a:	e73c      	b.n	8007806 <_dtoa_r+0x71e>
 800798c:	3fe00000 	.word	0x3fe00000
 8007990:	40240000 	.word	0x40240000
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	1e5c      	subs	r4, r3, #1
 8007998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800799a:	42a3      	cmp	r3, r4
 800799c:	db09      	blt.n	80079b2 <_dtoa_r+0x8ca>
 800799e:	1b1c      	subs	r4, r3, r4
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f6bf af30 	bge.w	8007808 <_dtoa_r+0x720>
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	9a08      	ldr	r2, [sp, #32]
 80079ac:	1a9e      	subs	r6, r3, r2
 80079ae:	2300      	movs	r3, #0
 80079b0:	e72b      	b.n	800780a <_dtoa_r+0x722>
 80079b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079b6:	1ae3      	subs	r3, r4, r3
 80079b8:	441a      	add	r2, r3
 80079ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80079bc:	9e04      	ldr	r6, [sp, #16]
 80079be:	2400      	movs	r4, #0
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80079c4:	e721      	b.n	800780a <_dtoa_r+0x722>
 80079c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079c8:	9e04      	ldr	r6, [sp, #16]
 80079ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079cc:	e728      	b.n	8007820 <_dtoa_r+0x738>
 80079ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079d2:	e751      	b.n	8007878 <_dtoa_r+0x790>
 80079d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079d6:	9903      	ldr	r1, [sp, #12]
 80079d8:	e750      	b.n	800787c <_dtoa_r+0x794>
 80079da:	f8cd 800c 	str.w	r8, [sp, #12]
 80079de:	e751      	b.n	8007884 <_dtoa_r+0x79c>
 80079e0:	2300      	movs	r3, #0
 80079e2:	e779      	b.n	80078d8 <_dtoa_r+0x7f0>
 80079e4:	9b06      	ldr	r3, [sp, #24]
 80079e6:	e777      	b.n	80078d8 <_dtoa_r+0x7f0>
 80079e8:	2300      	movs	r3, #0
 80079ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80079ec:	e779      	b.n	80078e2 <_dtoa_r+0x7fa>
 80079ee:	d093      	beq.n	8007918 <_dtoa_r+0x830>
 80079f0:	9a04      	ldr	r2, [sp, #16]
 80079f2:	331c      	adds	r3, #28
 80079f4:	441a      	add	r2, r3
 80079f6:	9204      	str	r2, [sp, #16]
 80079f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079fa:	441e      	add	r6, r3
 80079fc:	441a      	add	r2, r3
 80079fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a00:	e78a      	b.n	8007918 <_dtoa_r+0x830>
 8007a02:	4603      	mov	r3, r0
 8007a04:	e7f4      	b.n	80079f0 <_dtoa_r+0x908>
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	46b8      	mov	r8, r7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dc20      	bgt.n	8007a50 <_dtoa_r+0x968>
 8007a0e:	469b      	mov	fp, r3
 8007a10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	dd1e      	ble.n	8007a54 <_dtoa_r+0x96c>
 8007a16:	f1bb 0f00 	cmp.w	fp, #0
 8007a1a:	f47f adb1 	bne.w	8007580 <_dtoa_r+0x498>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	465b      	mov	r3, fp
 8007a22:	2205      	movs	r2, #5
 8007a24:	4648      	mov	r0, r9
 8007a26:	f000 fa93 	bl	8007f50 <__multadd>
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	9803      	ldr	r0, [sp, #12]
 8007a30:	f000 fc9e 	bl	8008370 <__mcmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f77f ada3 	ble.w	8007580 <_dtoa_r+0x498>
 8007a3a:	4656      	mov	r6, sl
 8007a3c:	2331      	movs	r3, #49	@ 0x31
 8007a3e:	f108 0801 	add.w	r8, r8, #1
 8007a42:	f806 3b01 	strb.w	r3, [r6], #1
 8007a46:	e59f      	b.n	8007588 <_dtoa_r+0x4a0>
 8007a48:	46b8      	mov	r8, r7
 8007a4a:	9c08      	ldr	r4, [sp, #32]
 8007a4c:	4625      	mov	r5, r4
 8007a4e:	e7f4      	b.n	8007a3a <_dtoa_r+0x952>
 8007a50:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007a54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8101 	beq.w	8007c5e <_dtoa_r+0xb76>
 8007a5c:	2e00      	cmp	r6, #0
 8007a5e:	dd05      	ble.n	8007a6c <_dtoa_r+0x984>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4632      	mov	r2, r6
 8007a64:	4648      	mov	r0, r9
 8007a66:	f000 fc17 	bl	8008298 <__lshift>
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d05c      	beq.n	8007b2c <_dtoa_r+0xa44>
 8007a72:	4648      	mov	r0, r9
 8007a74:	6869      	ldr	r1, [r5, #4]
 8007a76:	f000 fa09 	bl	8007e8c <_Balloc>
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	b928      	cbnz	r0, 8007a8a <_dtoa_r+0x9a2>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a84:	4b80      	ldr	r3, [pc, #512]	@ (8007c88 <_dtoa_r+0xba0>)
 8007a86:	f7ff bb43 	b.w	8007110 <_dtoa_r+0x28>
 8007a8a:	692a      	ldr	r2, [r5, #16]
 8007a8c:	f105 010c 	add.w	r1, r5, #12
 8007a90:	3202      	adds	r2, #2
 8007a92:	0092      	lsls	r2, r2, #2
 8007a94:	300c      	adds	r0, #12
 8007a96:	f7ff fa8c 	bl	8006fb2 <memcpy>
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4648      	mov	r0, r9
 8007aa0:	f000 fbfa 	bl	8008298 <__lshift>
 8007aa4:	462f      	mov	r7, r5
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	f10a 0301 	add.w	r3, sl, #1
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	eb0a 030b 	add.w	r3, sl, fp
 8007ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	4621      	mov	r1, r4
 8007ac0:	9803      	ldr	r0, [sp, #12]
 8007ac2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ac6:	f7ff fa86 	bl	8006fd6 <quorem>
 8007aca:	4603      	mov	r3, r0
 8007acc:	4639      	mov	r1, r7
 8007ace:	3330      	adds	r3, #48	@ 0x30
 8007ad0:	9006      	str	r0, [sp, #24]
 8007ad2:	9803      	ldr	r0, [sp, #12]
 8007ad4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ad6:	f000 fc4b 	bl	8008370 <__mcmp>
 8007ada:	462a      	mov	r2, r5
 8007adc:	9008      	str	r0, [sp, #32]
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4648      	mov	r0, r9
 8007ae2:	f000 fc61 	bl	80083a8 <__mdiff>
 8007ae6:	68c2      	ldr	r2, [r0, #12]
 8007ae8:	4606      	mov	r6, r0
 8007aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aec:	bb02      	cbnz	r2, 8007b30 <_dtoa_r+0xa48>
 8007aee:	4601      	mov	r1, r0
 8007af0:	9803      	ldr	r0, [sp, #12]
 8007af2:	f000 fc3d 	bl	8008370 <__mcmp>
 8007af6:	4602      	mov	r2, r0
 8007af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007afa:	4631      	mov	r1, r6
 8007afc:	4648      	mov	r0, r9
 8007afe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007b02:	f000 fa03 	bl	8007f0c <_Bfree>
 8007b06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b0a:	9e04      	ldr	r6, [sp, #16]
 8007b0c:	ea42 0103 	orr.w	r1, r2, r3
 8007b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b12:	4319      	orrs	r1, r3
 8007b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b16:	d10d      	bne.n	8007b34 <_dtoa_r+0xa4c>
 8007b18:	2b39      	cmp	r3, #57	@ 0x39
 8007b1a:	d027      	beq.n	8007b6c <_dtoa_r+0xa84>
 8007b1c:	9a08      	ldr	r2, [sp, #32]
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	dd01      	ble.n	8007b26 <_dtoa_r+0xa3e>
 8007b22:	9b06      	ldr	r3, [sp, #24]
 8007b24:	3331      	adds	r3, #49	@ 0x31
 8007b26:	f88b 3000 	strb.w	r3, [fp]
 8007b2a:	e52e      	b.n	800758a <_dtoa_r+0x4a2>
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	e7b9      	b.n	8007aa4 <_dtoa_r+0x9bc>
 8007b30:	2201      	movs	r2, #1
 8007b32:	e7e2      	b.n	8007afa <_dtoa_r+0xa12>
 8007b34:	9908      	ldr	r1, [sp, #32]
 8007b36:	2900      	cmp	r1, #0
 8007b38:	db04      	blt.n	8007b44 <_dtoa_r+0xa5c>
 8007b3a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007b3c:	4301      	orrs	r1, r0
 8007b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b40:	4301      	orrs	r1, r0
 8007b42:	d120      	bne.n	8007b86 <_dtoa_r+0xa9e>
 8007b44:	2a00      	cmp	r2, #0
 8007b46:	ddee      	ble.n	8007b26 <_dtoa_r+0xa3e>
 8007b48:	2201      	movs	r2, #1
 8007b4a:	9903      	ldr	r1, [sp, #12]
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	f000 fba2 	bl	8008298 <__lshift>
 8007b54:	4621      	mov	r1, r4
 8007b56:	9003      	str	r0, [sp, #12]
 8007b58:	f000 fc0a 	bl	8008370 <__mcmp>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	9b04      	ldr	r3, [sp, #16]
 8007b60:	dc02      	bgt.n	8007b68 <_dtoa_r+0xa80>
 8007b62:	d1e0      	bne.n	8007b26 <_dtoa_r+0xa3e>
 8007b64:	07da      	lsls	r2, r3, #31
 8007b66:	d5de      	bpl.n	8007b26 <_dtoa_r+0xa3e>
 8007b68:	2b39      	cmp	r3, #57	@ 0x39
 8007b6a:	d1da      	bne.n	8007b22 <_dtoa_r+0xa3a>
 8007b6c:	2339      	movs	r3, #57	@ 0x39
 8007b6e:	f88b 3000 	strb.w	r3, [fp]
 8007b72:	4633      	mov	r3, r6
 8007b74:	461e      	mov	r6, r3
 8007b76:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	2a39      	cmp	r2, #57	@ 0x39
 8007b7e:	d04e      	beq.n	8007c1e <_dtoa_r+0xb36>
 8007b80:	3201      	adds	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e501      	b.n	800758a <_dtoa_r+0x4a2>
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	dd03      	ble.n	8007b92 <_dtoa_r+0xaaa>
 8007b8a:	2b39      	cmp	r3, #57	@ 0x39
 8007b8c:	d0ee      	beq.n	8007b6c <_dtoa_r+0xa84>
 8007b8e:	3301      	adds	r3, #1
 8007b90:	e7c9      	b.n	8007b26 <_dtoa_r+0xa3e>
 8007b92:	9a04      	ldr	r2, [sp, #16]
 8007b94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b9a:	428a      	cmp	r2, r1
 8007b9c:	d028      	beq.n	8007bf0 <_dtoa_r+0xb08>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	9903      	ldr	r1, [sp, #12]
 8007ba4:	4648      	mov	r0, r9
 8007ba6:	f000 f9d3 	bl	8007f50 <__multadd>
 8007baa:	42af      	cmp	r7, r5
 8007bac:	9003      	str	r0, [sp, #12]
 8007bae:	f04f 0300 	mov.w	r3, #0
 8007bb2:	f04f 020a 	mov.w	r2, #10
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	4648      	mov	r0, r9
 8007bba:	d107      	bne.n	8007bcc <_dtoa_r+0xae4>
 8007bbc:	f000 f9c8 	bl	8007f50 <__multadd>
 8007bc0:	4607      	mov	r7, r0
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	e777      	b.n	8007abc <_dtoa_r+0x9d4>
 8007bcc:	f000 f9c0 	bl	8007f50 <__multadd>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	220a      	movs	r2, #10
 8007bd8:	4648      	mov	r0, r9
 8007bda:	f000 f9b9 	bl	8007f50 <__multadd>
 8007bde:	4605      	mov	r5, r0
 8007be0:	e7f0      	b.n	8007bc4 <_dtoa_r+0xadc>
 8007be2:	f1bb 0f00 	cmp.w	fp, #0
 8007be6:	bfcc      	ite	gt
 8007be8:	465e      	movgt	r6, fp
 8007bea:	2601      	movle	r6, #1
 8007bec:	2700      	movs	r7, #0
 8007bee:	4456      	add	r6, sl
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	9903      	ldr	r1, [sp, #12]
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	f000 fb4e 	bl	8008298 <__lshift>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	9003      	str	r0, [sp, #12]
 8007c00:	f000 fbb6 	bl	8008370 <__mcmp>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	dcb4      	bgt.n	8007b72 <_dtoa_r+0xa8a>
 8007c08:	d102      	bne.n	8007c10 <_dtoa_r+0xb28>
 8007c0a:	9b04      	ldr	r3, [sp, #16]
 8007c0c:	07db      	lsls	r3, r3, #31
 8007c0e:	d4b0      	bmi.n	8007b72 <_dtoa_r+0xa8a>
 8007c10:	4633      	mov	r3, r6
 8007c12:	461e      	mov	r6, r3
 8007c14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c18:	2a30      	cmp	r2, #48	@ 0x30
 8007c1a:	d0fa      	beq.n	8007c12 <_dtoa_r+0xb2a>
 8007c1c:	e4b5      	b.n	800758a <_dtoa_r+0x4a2>
 8007c1e:	459a      	cmp	sl, r3
 8007c20:	d1a8      	bne.n	8007b74 <_dtoa_r+0xa8c>
 8007c22:	2331      	movs	r3, #49	@ 0x31
 8007c24:	f108 0801 	add.w	r8, r8, #1
 8007c28:	f88a 3000 	strb.w	r3, [sl]
 8007c2c:	e4ad      	b.n	800758a <_dtoa_r+0x4a2>
 8007c2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007c8c <_dtoa_r+0xba4>
 8007c34:	b11b      	cbz	r3, 8007c3e <_dtoa_r+0xb56>
 8007c36:	f10a 0308 	add.w	r3, sl, #8
 8007c3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	4650      	mov	r0, sl
 8007c40:	b017      	add	sp, #92	@ 0x5c
 8007c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	f77f ae2e 	ble.w	80078aa <_dtoa_r+0x7c2>
 8007c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c52:	2001      	movs	r0, #1
 8007c54:	e64d      	b.n	80078f2 <_dtoa_r+0x80a>
 8007c56:	f1bb 0f00 	cmp.w	fp, #0
 8007c5a:	f77f aed9 	ble.w	8007a10 <_dtoa_r+0x928>
 8007c5e:	4656      	mov	r6, sl
 8007c60:	4621      	mov	r1, r4
 8007c62:	9803      	ldr	r0, [sp, #12]
 8007c64:	f7ff f9b7 	bl	8006fd6 <quorem>
 8007c68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007c6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c70:	eba6 020a 	sub.w	r2, r6, sl
 8007c74:	4593      	cmp	fp, r2
 8007c76:	ddb4      	ble.n	8007be2 <_dtoa_r+0xafa>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	220a      	movs	r2, #10
 8007c7c:	4648      	mov	r0, r9
 8007c7e:	9903      	ldr	r1, [sp, #12]
 8007c80:	f000 f966 	bl	8007f50 <__multadd>
 8007c84:	9003      	str	r0, [sp, #12]
 8007c86:	e7eb      	b.n	8007c60 <_dtoa_r+0xb78>
 8007c88:	0800a1ee 	.word	0x0800a1ee
 8007c8c:	0800a172 	.word	0x0800a172

08007c90 <_free_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4605      	mov	r5, r0
 8007c94:	2900      	cmp	r1, #0
 8007c96:	d040      	beq.n	8007d1a <_free_r+0x8a>
 8007c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9c:	1f0c      	subs	r4, r1, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfb8      	it	lt
 8007ca2:	18e4      	addlt	r4, r4, r3
 8007ca4:	f000 f8e6 	bl	8007e74 <__malloc_lock>
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d1c <_free_r+0x8c>)
 8007caa:	6813      	ldr	r3, [r2, #0]
 8007cac:	b933      	cbnz	r3, 8007cbc <_free_r+0x2c>
 8007cae:	6063      	str	r3, [r4, #4]
 8007cb0:	6014      	str	r4, [r2, #0]
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cb8:	f000 b8e2 	b.w	8007e80 <__malloc_unlock>
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d908      	bls.n	8007cd2 <_free_r+0x42>
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	1821      	adds	r1, r4, r0
 8007cc4:	428b      	cmp	r3, r1
 8007cc6:	bf01      	itttt	eq
 8007cc8:	6819      	ldreq	r1, [r3, #0]
 8007cca:	685b      	ldreq	r3, [r3, #4]
 8007ccc:	1809      	addeq	r1, r1, r0
 8007cce:	6021      	streq	r1, [r4, #0]
 8007cd0:	e7ed      	b.n	8007cae <_free_r+0x1e>
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	b10b      	cbz	r3, 8007cdc <_free_r+0x4c>
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	d9fa      	bls.n	8007cd2 <_free_r+0x42>
 8007cdc:	6811      	ldr	r1, [r2, #0]
 8007cde:	1850      	adds	r0, r2, r1
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d10b      	bne.n	8007cfc <_free_r+0x6c>
 8007ce4:	6820      	ldr	r0, [r4, #0]
 8007ce6:	4401      	add	r1, r0
 8007ce8:	1850      	adds	r0, r2, r1
 8007cea:	4283      	cmp	r3, r0
 8007cec:	6011      	str	r1, [r2, #0]
 8007cee:	d1e0      	bne.n	8007cb2 <_free_r+0x22>
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4408      	add	r0, r1
 8007cf6:	6010      	str	r0, [r2, #0]
 8007cf8:	6053      	str	r3, [r2, #4]
 8007cfa:	e7da      	b.n	8007cb2 <_free_r+0x22>
 8007cfc:	d902      	bls.n	8007d04 <_free_r+0x74>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	e7d6      	b.n	8007cb2 <_free_r+0x22>
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	1821      	adds	r1, r4, r0
 8007d08:	428b      	cmp	r3, r1
 8007d0a:	bf01      	itttt	eq
 8007d0c:	6819      	ldreq	r1, [r3, #0]
 8007d0e:	685b      	ldreq	r3, [r3, #4]
 8007d10:	1809      	addeq	r1, r1, r0
 8007d12:	6021      	streq	r1, [r4, #0]
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	6054      	str	r4, [r2, #4]
 8007d18:	e7cb      	b.n	8007cb2 <_free_r+0x22>
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	20000910 	.word	0x20000910

08007d20 <malloc>:
 8007d20:	4b02      	ldr	r3, [pc, #8]	@ (8007d2c <malloc+0xc>)
 8007d22:	4601      	mov	r1, r0
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	f000 b825 	b.w	8007d74 <_malloc_r>
 8007d2a:	bf00      	nop
 8007d2c:	200000e8 	.word	0x200000e8

08007d30 <sbrk_aligned>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4e0f      	ldr	r6, [pc, #60]	@ (8007d70 <sbrk_aligned+0x40>)
 8007d34:	460c      	mov	r4, r1
 8007d36:	6831      	ldr	r1, [r6, #0]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b911      	cbnz	r1, 8007d42 <sbrk_aligned+0x12>
 8007d3c:	f000 fe3a 	bl	80089b4 <_sbrk_r>
 8007d40:	6030      	str	r0, [r6, #0]
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 fe35 	bl	80089b4 <_sbrk_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d103      	bne.n	8007d56 <sbrk_aligned+0x26>
 8007d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8007d52:	4620      	mov	r0, r4
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
 8007d56:	1cc4      	adds	r4, r0, #3
 8007d58:	f024 0403 	bic.w	r4, r4, #3
 8007d5c:	42a0      	cmp	r0, r4
 8007d5e:	d0f8      	beq.n	8007d52 <sbrk_aligned+0x22>
 8007d60:	1a21      	subs	r1, r4, r0
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 fe26 	bl	80089b4 <_sbrk_r>
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d1f2      	bne.n	8007d52 <sbrk_aligned+0x22>
 8007d6c:	e7ef      	b.n	8007d4e <sbrk_aligned+0x1e>
 8007d6e:	bf00      	nop
 8007d70:	2000090c 	.word	0x2000090c

08007d74 <_malloc_r>:
 8007d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d78:	1ccd      	adds	r5, r1, #3
 8007d7a:	f025 0503 	bic.w	r5, r5, #3
 8007d7e:	3508      	adds	r5, #8
 8007d80:	2d0c      	cmp	r5, #12
 8007d82:	bf38      	it	cc
 8007d84:	250c      	movcc	r5, #12
 8007d86:	2d00      	cmp	r5, #0
 8007d88:	4606      	mov	r6, r0
 8007d8a:	db01      	blt.n	8007d90 <_malloc_r+0x1c>
 8007d8c:	42a9      	cmp	r1, r5
 8007d8e:	d904      	bls.n	8007d9a <_malloc_r+0x26>
 8007d90:	230c      	movs	r3, #12
 8007d92:	6033      	str	r3, [r6, #0]
 8007d94:	2000      	movs	r0, #0
 8007d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e70 <_malloc_r+0xfc>
 8007d9e:	f000 f869 	bl	8007e74 <__malloc_lock>
 8007da2:	f8d8 3000 	ldr.w	r3, [r8]
 8007da6:	461c      	mov	r4, r3
 8007da8:	bb44      	cbnz	r4, 8007dfc <_malloc_r+0x88>
 8007daa:	4629      	mov	r1, r5
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7ff ffbf 	bl	8007d30 <sbrk_aligned>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	4604      	mov	r4, r0
 8007db6:	d158      	bne.n	8007e6a <_malloc_r+0xf6>
 8007db8:	f8d8 4000 	ldr.w	r4, [r8]
 8007dbc:	4627      	mov	r7, r4
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	d143      	bne.n	8007e4a <_malloc_r+0xd6>
 8007dc2:	2c00      	cmp	r4, #0
 8007dc4:	d04b      	beq.n	8007e5e <_malloc_r+0xea>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4630      	mov	r0, r6
 8007dcc:	eb04 0903 	add.w	r9, r4, r3
 8007dd0:	f000 fdf0 	bl	80089b4 <_sbrk_r>
 8007dd4:	4581      	cmp	r9, r0
 8007dd6:	d142      	bne.n	8007e5e <_malloc_r+0xea>
 8007dd8:	6821      	ldr	r1, [r4, #0]
 8007dda:	4630      	mov	r0, r6
 8007ddc:	1a6d      	subs	r5, r5, r1
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7ff ffa6 	bl	8007d30 <sbrk_aligned>
 8007de4:	3001      	adds	r0, #1
 8007de6:	d03a      	beq.n	8007e5e <_malloc_r+0xea>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	442b      	add	r3, r5
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	f8d8 3000 	ldr.w	r3, [r8]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	bb62      	cbnz	r2, 8007e50 <_malloc_r+0xdc>
 8007df6:	f8c8 7000 	str.w	r7, [r8]
 8007dfa:	e00f      	b.n	8007e1c <_malloc_r+0xa8>
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	1b52      	subs	r2, r2, r5
 8007e00:	d420      	bmi.n	8007e44 <_malloc_r+0xd0>
 8007e02:	2a0b      	cmp	r2, #11
 8007e04:	d917      	bls.n	8007e36 <_malloc_r+0xc2>
 8007e06:	1961      	adds	r1, r4, r5
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	6025      	str	r5, [r4, #0]
 8007e0c:	bf18      	it	ne
 8007e0e:	6059      	strne	r1, [r3, #4]
 8007e10:	6863      	ldr	r3, [r4, #4]
 8007e12:	bf08      	it	eq
 8007e14:	f8c8 1000 	streq.w	r1, [r8]
 8007e18:	5162      	str	r2, [r4, r5]
 8007e1a:	604b      	str	r3, [r1, #4]
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f000 f82f 	bl	8007e80 <__malloc_unlock>
 8007e22:	f104 000b 	add.w	r0, r4, #11
 8007e26:	1d23      	adds	r3, r4, #4
 8007e28:	f020 0007 	bic.w	r0, r0, #7
 8007e2c:	1ac2      	subs	r2, r0, r3
 8007e2e:	bf1c      	itt	ne
 8007e30:	1a1b      	subne	r3, r3, r0
 8007e32:	50a3      	strne	r3, [r4, r2]
 8007e34:	e7af      	b.n	8007d96 <_malloc_r+0x22>
 8007e36:	6862      	ldr	r2, [r4, #4]
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	bf0c      	ite	eq
 8007e3c:	f8c8 2000 	streq.w	r2, [r8]
 8007e40:	605a      	strne	r2, [r3, #4]
 8007e42:	e7eb      	b.n	8007e1c <_malloc_r+0xa8>
 8007e44:	4623      	mov	r3, r4
 8007e46:	6864      	ldr	r4, [r4, #4]
 8007e48:	e7ae      	b.n	8007da8 <_malloc_r+0x34>
 8007e4a:	463c      	mov	r4, r7
 8007e4c:	687f      	ldr	r7, [r7, #4]
 8007e4e:	e7b6      	b.n	8007dbe <_malloc_r+0x4a>
 8007e50:	461a      	mov	r2, r3
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d1fb      	bne.n	8007e50 <_malloc_r+0xdc>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	6053      	str	r3, [r2, #4]
 8007e5c:	e7de      	b.n	8007e1c <_malloc_r+0xa8>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	4630      	mov	r0, r6
 8007e62:	6033      	str	r3, [r6, #0]
 8007e64:	f000 f80c 	bl	8007e80 <__malloc_unlock>
 8007e68:	e794      	b.n	8007d94 <_malloc_r+0x20>
 8007e6a:	6005      	str	r5, [r0, #0]
 8007e6c:	e7d6      	b.n	8007e1c <_malloc_r+0xa8>
 8007e6e:	bf00      	nop
 8007e70:	20000910 	.word	0x20000910

08007e74 <__malloc_lock>:
 8007e74:	4801      	ldr	r0, [pc, #4]	@ (8007e7c <__malloc_lock+0x8>)
 8007e76:	f7ff b88c 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	20000908 	.word	0x20000908

08007e80 <__malloc_unlock>:
 8007e80:	4801      	ldr	r0, [pc, #4]	@ (8007e88 <__malloc_unlock+0x8>)
 8007e82:	f7ff b887 	b.w	8006f94 <__retarget_lock_release_recursive>
 8007e86:	bf00      	nop
 8007e88:	20000908 	.word	0x20000908

08007e8c <_Balloc>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	69c6      	ldr	r6, [r0, #28]
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	b976      	cbnz	r6, 8007eb4 <_Balloc+0x28>
 8007e96:	2010      	movs	r0, #16
 8007e98:	f7ff ff42 	bl	8007d20 <malloc>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	61e0      	str	r0, [r4, #28]
 8007ea0:	b920      	cbnz	r0, 8007eac <_Balloc+0x20>
 8007ea2:	216b      	movs	r1, #107	@ 0x6b
 8007ea4:	4b17      	ldr	r3, [pc, #92]	@ (8007f04 <_Balloc+0x78>)
 8007ea6:	4818      	ldr	r0, [pc, #96]	@ (8007f08 <_Balloc+0x7c>)
 8007ea8:	f000 fd94 	bl	80089d4 <__assert_func>
 8007eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eb0:	6006      	str	r6, [r0, #0]
 8007eb2:	60c6      	str	r6, [r0, #12]
 8007eb4:	69e6      	ldr	r6, [r4, #28]
 8007eb6:	68f3      	ldr	r3, [r6, #12]
 8007eb8:	b183      	cbz	r3, 8007edc <_Balloc+0x50>
 8007eba:	69e3      	ldr	r3, [r4, #28]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ec2:	b9b8      	cbnz	r0, 8007ef4 <_Balloc+0x68>
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	fa01 f605 	lsl.w	r6, r1, r5
 8007eca:	1d72      	adds	r2, r6, #5
 8007ecc:	4620      	mov	r0, r4
 8007ece:	0092      	lsls	r2, r2, #2
 8007ed0:	f000 fd9e 	bl	8008a10 <_calloc_r>
 8007ed4:	b160      	cbz	r0, 8007ef0 <_Balloc+0x64>
 8007ed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eda:	e00e      	b.n	8007efa <_Balloc+0x6e>
 8007edc:	2221      	movs	r2, #33	@ 0x21
 8007ede:	2104      	movs	r1, #4
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fd95 	bl	8008a10 <_calloc_r>
 8007ee6:	69e3      	ldr	r3, [r4, #28]
 8007ee8:	60f0      	str	r0, [r6, #12]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e4      	bne.n	8007eba <_Balloc+0x2e>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	6802      	ldr	r2, [r0, #0]
 8007ef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007efa:	2300      	movs	r3, #0
 8007efc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f00:	e7f7      	b.n	8007ef2 <_Balloc+0x66>
 8007f02:	bf00      	nop
 8007f04:	0800a17f 	.word	0x0800a17f
 8007f08:	0800a1ff 	.word	0x0800a1ff

08007f0c <_Bfree>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	69c6      	ldr	r6, [r0, #28]
 8007f10:	4605      	mov	r5, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	b976      	cbnz	r6, 8007f34 <_Bfree+0x28>
 8007f16:	2010      	movs	r0, #16
 8007f18:	f7ff ff02 	bl	8007d20 <malloc>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	61e8      	str	r0, [r5, #28]
 8007f20:	b920      	cbnz	r0, 8007f2c <_Bfree+0x20>
 8007f22:	218f      	movs	r1, #143	@ 0x8f
 8007f24:	4b08      	ldr	r3, [pc, #32]	@ (8007f48 <_Bfree+0x3c>)
 8007f26:	4809      	ldr	r0, [pc, #36]	@ (8007f4c <_Bfree+0x40>)
 8007f28:	f000 fd54 	bl	80089d4 <__assert_func>
 8007f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f30:	6006      	str	r6, [r0, #0]
 8007f32:	60c6      	str	r6, [r0, #12]
 8007f34:	b13c      	cbz	r4, 8007f46 <_Bfree+0x3a>
 8007f36:	69eb      	ldr	r3, [r5, #28]
 8007f38:	6862      	ldr	r2, [r4, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f40:	6021      	str	r1, [r4, #0]
 8007f42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
 8007f48:	0800a17f 	.word	0x0800a17f
 8007f4c:	0800a1ff 	.word	0x0800a1ff

08007f50 <__multadd>:
 8007f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f54:	4607      	mov	r7, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	461e      	mov	r6, r3
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	690d      	ldr	r5, [r1, #16]
 8007f5e:	f101 0c14 	add.w	ip, r1, #20
 8007f62:	f8dc 3000 	ldr.w	r3, [ip]
 8007f66:	3001      	adds	r0, #1
 8007f68:	b299      	uxth	r1, r3
 8007f6a:	fb02 6101 	mla	r1, r2, r1, r6
 8007f6e:	0c1e      	lsrs	r6, r3, #16
 8007f70:	0c0b      	lsrs	r3, r1, #16
 8007f72:	fb02 3306 	mla	r3, r2, r6, r3
 8007f76:	b289      	uxth	r1, r1
 8007f78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f7c:	4285      	cmp	r5, r0
 8007f7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f82:	f84c 1b04 	str.w	r1, [ip], #4
 8007f86:	dcec      	bgt.n	8007f62 <__multadd+0x12>
 8007f88:	b30e      	cbz	r6, 8007fce <__multadd+0x7e>
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	42ab      	cmp	r3, r5
 8007f8e:	dc19      	bgt.n	8007fc4 <__multadd+0x74>
 8007f90:	6861      	ldr	r1, [r4, #4]
 8007f92:	4638      	mov	r0, r7
 8007f94:	3101      	adds	r1, #1
 8007f96:	f7ff ff79 	bl	8007e8c <_Balloc>
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	b928      	cbnz	r0, 8007faa <__multadd+0x5a>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	21ba      	movs	r1, #186	@ 0xba
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <__multadd+0x84>)
 8007fa4:	480c      	ldr	r0, [pc, #48]	@ (8007fd8 <__multadd+0x88>)
 8007fa6:	f000 fd15 	bl	80089d4 <__assert_func>
 8007faa:	6922      	ldr	r2, [r4, #16]
 8007fac:	f104 010c 	add.w	r1, r4, #12
 8007fb0:	3202      	adds	r2, #2
 8007fb2:	0092      	lsls	r2, r2, #2
 8007fb4:	300c      	adds	r0, #12
 8007fb6:	f7fe fffc 	bl	8006fb2 <memcpy>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f7ff ffa5 	bl	8007f0c <_Bfree>
 8007fc2:	4644      	mov	r4, r8
 8007fc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fc8:	3501      	adds	r5, #1
 8007fca:	615e      	str	r6, [r3, #20]
 8007fcc:	6125      	str	r5, [r4, #16]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd4:	0800a1ee 	.word	0x0800a1ee
 8007fd8:	0800a1ff 	.word	0x0800a1ff

08007fdc <__hi0bits>:
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007fe2:	bf3a      	itte	cc
 8007fe4:	0403      	lslcc	r3, r0, #16
 8007fe6:	2010      	movcc	r0, #16
 8007fe8:	2000      	movcs	r0, #0
 8007fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fee:	bf3c      	itt	cc
 8007ff0:	021b      	lslcc	r3, r3, #8
 8007ff2:	3008      	addcc	r0, #8
 8007ff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff8:	bf3c      	itt	cc
 8007ffa:	011b      	lslcc	r3, r3, #4
 8007ffc:	3004      	addcc	r0, #4
 8007ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008002:	bf3c      	itt	cc
 8008004:	009b      	lslcc	r3, r3, #2
 8008006:	3002      	addcc	r0, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	db05      	blt.n	8008018 <__hi0bits+0x3c>
 800800c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008010:	f100 0001 	add.w	r0, r0, #1
 8008014:	bf08      	it	eq
 8008016:	2020      	moveq	r0, #32
 8008018:	4770      	bx	lr

0800801a <__lo0bits>:
 800801a:	6803      	ldr	r3, [r0, #0]
 800801c:	4602      	mov	r2, r0
 800801e:	f013 0007 	ands.w	r0, r3, #7
 8008022:	d00b      	beq.n	800803c <__lo0bits+0x22>
 8008024:	07d9      	lsls	r1, r3, #31
 8008026:	d421      	bmi.n	800806c <__lo0bits+0x52>
 8008028:	0798      	lsls	r0, r3, #30
 800802a:	bf49      	itett	mi
 800802c:	085b      	lsrmi	r3, r3, #1
 800802e:	089b      	lsrpl	r3, r3, #2
 8008030:	2001      	movmi	r0, #1
 8008032:	6013      	strmi	r3, [r2, #0]
 8008034:	bf5c      	itt	pl
 8008036:	2002      	movpl	r0, #2
 8008038:	6013      	strpl	r3, [r2, #0]
 800803a:	4770      	bx	lr
 800803c:	b299      	uxth	r1, r3
 800803e:	b909      	cbnz	r1, 8008044 <__lo0bits+0x2a>
 8008040:	2010      	movs	r0, #16
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	b2d9      	uxtb	r1, r3
 8008046:	b909      	cbnz	r1, 800804c <__lo0bits+0x32>
 8008048:	3008      	adds	r0, #8
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	0719      	lsls	r1, r3, #28
 800804e:	bf04      	itt	eq
 8008050:	091b      	lsreq	r3, r3, #4
 8008052:	3004      	addeq	r0, #4
 8008054:	0799      	lsls	r1, r3, #30
 8008056:	bf04      	itt	eq
 8008058:	089b      	lsreq	r3, r3, #2
 800805a:	3002      	addeq	r0, #2
 800805c:	07d9      	lsls	r1, r3, #31
 800805e:	d403      	bmi.n	8008068 <__lo0bits+0x4e>
 8008060:	085b      	lsrs	r3, r3, #1
 8008062:	f100 0001 	add.w	r0, r0, #1
 8008066:	d003      	beq.n	8008070 <__lo0bits+0x56>
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	4770      	bx	lr
 800806c:	2000      	movs	r0, #0
 800806e:	4770      	bx	lr
 8008070:	2020      	movs	r0, #32
 8008072:	4770      	bx	lr

08008074 <__i2b>:
 8008074:	b510      	push	{r4, lr}
 8008076:	460c      	mov	r4, r1
 8008078:	2101      	movs	r1, #1
 800807a:	f7ff ff07 	bl	8007e8c <_Balloc>
 800807e:	4602      	mov	r2, r0
 8008080:	b928      	cbnz	r0, 800808e <__i2b+0x1a>
 8008082:	f240 1145 	movw	r1, #325	@ 0x145
 8008086:	4b04      	ldr	r3, [pc, #16]	@ (8008098 <__i2b+0x24>)
 8008088:	4804      	ldr	r0, [pc, #16]	@ (800809c <__i2b+0x28>)
 800808a:	f000 fca3 	bl	80089d4 <__assert_func>
 800808e:	2301      	movs	r3, #1
 8008090:	6144      	str	r4, [r0, #20]
 8008092:	6103      	str	r3, [r0, #16]
 8008094:	bd10      	pop	{r4, pc}
 8008096:	bf00      	nop
 8008098:	0800a1ee 	.word	0x0800a1ee
 800809c:	0800a1ff 	.word	0x0800a1ff

080080a0 <__multiply>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	4617      	mov	r7, r2
 80080a6:	690a      	ldr	r2, [r1, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	4689      	mov	r9, r1
 80080ac:	429a      	cmp	r2, r3
 80080ae:	bfa2      	ittt	ge
 80080b0:	463b      	movge	r3, r7
 80080b2:	460f      	movge	r7, r1
 80080b4:	4699      	movge	r9, r3
 80080b6:	693d      	ldr	r5, [r7, #16]
 80080b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	eb05 060a 	add.w	r6, r5, sl
 80080c4:	42b3      	cmp	r3, r6
 80080c6:	b085      	sub	sp, #20
 80080c8:	bfb8      	it	lt
 80080ca:	3101      	addlt	r1, #1
 80080cc:	f7ff fede 	bl	8007e8c <_Balloc>
 80080d0:	b930      	cbnz	r0, 80080e0 <__multiply+0x40>
 80080d2:	4602      	mov	r2, r0
 80080d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080d8:	4b40      	ldr	r3, [pc, #256]	@ (80081dc <__multiply+0x13c>)
 80080da:	4841      	ldr	r0, [pc, #260]	@ (80081e0 <__multiply+0x140>)
 80080dc:	f000 fc7a 	bl	80089d4 <__assert_func>
 80080e0:	f100 0414 	add.w	r4, r0, #20
 80080e4:	4623      	mov	r3, r4
 80080e6:	2200      	movs	r2, #0
 80080e8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80080ec:	4573      	cmp	r3, lr
 80080ee:	d320      	bcc.n	8008132 <__multiply+0x92>
 80080f0:	f107 0814 	add.w	r8, r7, #20
 80080f4:	f109 0114 	add.w	r1, r9, #20
 80080f8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80080fc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008100:	9302      	str	r3, [sp, #8]
 8008102:	1beb      	subs	r3, r5, r7
 8008104:	3b15      	subs	r3, #21
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	3304      	adds	r3, #4
 800810c:	3715      	adds	r7, #21
 800810e:	42bd      	cmp	r5, r7
 8008110:	bf38      	it	cc
 8008112:	2304      	movcc	r3, #4
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	9b02      	ldr	r3, [sp, #8]
 8008118:	9103      	str	r1, [sp, #12]
 800811a:	428b      	cmp	r3, r1
 800811c:	d80c      	bhi.n	8008138 <__multiply+0x98>
 800811e:	2e00      	cmp	r6, #0
 8008120:	dd03      	ble.n	800812a <__multiply+0x8a>
 8008122:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008126:	2b00      	cmp	r3, #0
 8008128:	d055      	beq.n	80081d6 <__multiply+0x136>
 800812a:	6106      	str	r6, [r0, #16]
 800812c:	b005      	add	sp, #20
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	f843 2b04 	str.w	r2, [r3], #4
 8008136:	e7d9      	b.n	80080ec <__multiply+0x4c>
 8008138:	f8b1 a000 	ldrh.w	sl, [r1]
 800813c:	f1ba 0f00 	cmp.w	sl, #0
 8008140:	d01f      	beq.n	8008182 <__multiply+0xe2>
 8008142:	46c4      	mov	ip, r8
 8008144:	46a1      	mov	r9, r4
 8008146:	2700      	movs	r7, #0
 8008148:	f85c 2b04 	ldr.w	r2, [ip], #4
 800814c:	f8d9 3000 	ldr.w	r3, [r9]
 8008150:	fa1f fb82 	uxth.w	fp, r2
 8008154:	b29b      	uxth	r3, r3
 8008156:	fb0a 330b 	mla	r3, sl, fp, r3
 800815a:	443b      	add	r3, r7
 800815c:	f8d9 7000 	ldr.w	r7, [r9]
 8008160:	0c12      	lsrs	r2, r2, #16
 8008162:	0c3f      	lsrs	r7, r7, #16
 8008164:	fb0a 7202 	mla	r2, sl, r2, r7
 8008168:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800816c:	b29b      	uxth	r3, r3
 800816e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008172:	4565      	cmp	r5, ip
 8008174:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008178:	f849 3b04 	str.w	r3, [r9], #4
 800817c:	d8e4      	bhi.n	8008148 <__multiply+0xa8>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	50e7      	str	r7, [r4, r3]
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	3104      	adds	r1, #4
 8008186:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800818a:	f1b9 0f00 	cmp.w	r9, #0
 800818e:	d020      	beq.n	80081d2 <__multiply+0x132>
 8008190:	4647      	mov	r7, r8
 8008192:	46a4      	mov	ip, r4
 8008194:	f04f 0a00 	mov.w	sl, #0
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	f8b7 b000 	ldrh.w	fp, [r7]
 800819e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	fb09 220b 	mla	r2, r9, fp, r2
 80081a8:	4452      	add	r2, sl
 80081aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ae:	f84c 3b04 	str.w	r3, [ip], #4
 80081b2:	f857 3b04 	ldr.w	r3, [r7], #4
 80081b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081ba:	f8bc 3000 	ldrh.w	r3, [ip]
 80081be:	42bd      	cmp	r5, r7
 80081c0:	fb09 330a 	mla	r3, r9, sl, r3
 80081c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80081c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081cc:	d8e5      	bhi.n	800819a <__multiply+0xfa>
 80081ce:	9a01      	ldr	r2, [sp, #4]
 80081d0:	50a3      	str	r3, [r4, r2]
 80081d2:	3404      	adds	r4, #4
 80081d4:	e79f      	b.n	8008116 <__multiply+0x76>
 80081d6:	3e01      	subs	r6, #1
 80081d8:	e7a1      	b.n	800811e <__multiply+0x7e>
 80081da:	bf00      	nop
 80081dc:	0800a1ee 	.word	0x0800a1ee
 80081e0:	0800a1ff 	.word	0x0800a1ff

080081e4 <__pow5mult>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	4615      	mov	r5, r2
 80081ea:	f012 0203 	ands.w	r2, r2, #3
 80081ee:	4607      	mov	r7, r0
 80081f0:	460e      	mov	r6, r1
 80081f2:	d007      	beq.n	8008204 <__pow5mult+0x20>
 80081f4:	4c25      	ldr	r4, [pc, #148]	@ (800828c <__pow5mult+0xa8>)
 80081f6:	3a01      	subs	r2, #1
 80081f8:	2300      	movs	r3, #0
 80081fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081fe:	f7ff fea7 	bl	8007f50 <__multadd>
 8008202:	4606      	mov	r6, r0
 8008204:	10ad      	asrs	r5, r5, #2
 8008206:	d03d      	beq.n	8008284 <__pow5mult+0xa0>
 8008208:	69fc      	ldr	r4, [r7, #28]
 800820a:	b97c      	cbnz	r4, 800822c <__pow5mult+0x48>
 800820c:	2010      	movs	r0, #16
 800820e:	f7ff fd87 	bl	8007d20 <malloc>
 8008212:	4602      	mov	r2, r0
 8008214:	61f8      	str	r0, [r7, #28]
 8008216:	b928      	cbnz	r0, 8008224 <__pow5mult+0x40>
 8008218:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800821c:	4b1c      	ldr	r3, [pc, #112]	@ (8008290 <__pow5mult+0xac>)
 800821e:	481d      	ldr	r0, [pc, #116]	@ (8008294 <__pow5mult+0xb0>)
 8008220:	f000 fbd8 	bl	80089d4 <__assert_func>
 8008224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008228:	6004      	str	r4, [r0, #0]
 800822a:	60c4      	str	r4, [r0, #12]
 800822c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008234:	b94c      	cbnz	r4, 800824a <__pow5mult+0x66>
 8008236:	f240 2171 	movw	r1, #625	@ 0x271
 800823a:	4638      	mov	r0, r7
 800823c:	f7ff ff1a 	bl	8008074 <__i2b>
 8008240:	2300      	movs	r3, #0
 8008242:	4604      	mov	r4, r0
 8008244:	f8c8 0008 	str.w	r0, [r8, #8]
 8008248:	6003      	str	r3, [r0, #0]
 800824a:	f04f 0900 	mov.w	r9, #0
 800824e:	07eb      	lsls	r3, r5, #31
 8008250:	d50a      	bpl.n	8008268 <__pow5mult+0x84>
 8008252:	4631      	mov	r1, r6
 8008254:	4622      	mov	r2, r4
 8008256:	4638      	mov	r0, r7
 8008258:	f7ff ff22 	bl	80080a0 <__multiply>
 800825c:	4680      	mov	r8, r0
 800825e:	4631      	mov	r1, r6
 8008260:	4638      	mov	r0, r7
 8008262:	f7ff fe53 	bl	8007f0c <_Bfree>
 8008266:	4646      	mov	r6, r8
 8008268:	106d      	asrs	r5, r5, #1
 800826a:	d00b      	beq.n	8008284 <__pow5mult+0xa0>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	b938      	cbnz	r0, 8008280 <__pow5mult+0x9c>
 8008270:	4622      	mov	r2, r4
 8008272:	4621      	mov	r1, r4
 8008274:	4638      	mov	r0, r7
 8008276:	f7ff ff13 	bl	80080a0 <__multiply>
 800827a:	6020      	str	r0, [r4, #0]
 800827c:	f8c0 9000 	str.w	r9, [r0]
 8008280:	4604      	mov	r4, r0
 8008282:	e7e4      	b.n	800824e <__pow5mult+0x6a>
 8008284:	4630      	mov	r0, r6
 8008286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828a:	bf00      	nop
 800828c:	0800a2b0 	.word	0x0800a2b0
 8008290:	0800a17f 	.word	0x0800a17f
 8008294:	0800a1ff 	.word	0x0800a1ff

08008298 <__lshift>:
 8008298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800829c:	460c      	mov	r4, r1
 800829e:	4607      	mov	r7, r0
 80082a0:	4691      	mov	r9, r2
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	6849      	ldr	r1, [r1, #4]
 80082a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082b0:	f108 0601 	add.w	r6, r8, #1
 80082b4:	42b3      	cmp	r3, r6
 80082b6:	db0b      	blt.n	80082d0 <__lshift+0x38>
 80082b8:	4638      	mov	r0, r7
 80082ba:	f7ff fde7 	bl	8007e8c <_Balloc>
 80082be:	4605      	mov	r5, r0
 80082c0:	b948      	cbnz	r0, 80082d6 <__lshift+0x3e>
 80082c2:	4602      	mov	r2, r0
 80082c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082c8:	4b27      	ldr	r3, [pc, #156]	@ (8008368 <__lshift+0xd0>)
 80082ca:	4828      	ldr	r0, [pc, #160]	@ (800836c <__lshift+0xd4>)
 80082cc:	f000 fb82 	bl	80089d4 <__assert_func>
 80082d0:	3101      	adds	r1, #1
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	e7ee      	b.n	80082b4 <__lshift+0x1c>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f100 0114 	add.w	r1, r0, #20
 80082dc:	f100 0210 	add.w	r2, r0, #16
 80082e0:	4618      	mov	r0, r3
 80082e2:	4553      	cmp	r3, sl
 80082e4:	db33      	blt.n	800834e <__lshift+0xb6>
 80082e6:	6920      	ldr	r0, [r4, #16]
 80082e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082ec:	f104 0314 	add.w	r3, r4, #20
 80082f0:	f019 091f 	ands.w	r9, r9, #31
 80082f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082fc:	d02b      	beq.n	8008356 <__lshift+0xbe>
 80082fe:	468a      	mov	sl, r1
 8008300:	2200      	movs	r2, #0
 8008302:	f1c9 0e20 	rsb	lr, r9, #32
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	fa00 f009 	lsl.w	r0, r0, r9
 800830c:	4310      	orrs	r0, r2
 800830e:	f84a 0b04 	str.w	r0, [sl], #4
 8008312:	f853 2b04 	ldr.w	r2, [r3], #4
 8008316:	459c      	cmp	ip, r3
 8008318:	fa22 f20e 	lsr.w	r2, r2, lr
 800831c:	d8f3      	bhi.n	8008306 <__lshift+0x6e>
 800831e:	ebac 0304 	sub.w	r3, ip, r4
 8008322:	3b15      	subs	r3, #21
 8008324:	f023 0303 	bic.w	r3, r3, #3
 8008328:	3304      	adds	r3, #4
 800832a:	f104 0015 	add.w	r0, r4, #21
 800832e:	4560      	cmp	r0, ip
 8008330:	bf88      	it	hi
 8008332:	2304      	movhi	r3, #4
 8008334:	50ca      	str	r2, [r1, r3]
 8008336:	b10a      	cbz	r2, 800833c <__lshift+0xa4>
 8008338:	f108 0602 	add.w	r6, r8, #2
 800833c:	3e01      	subs	r6, #1
 800833e:	4638      	mov	r0, r7
 8008340:	4621      	mov	r1, r4
 8008342:	612e      	str	r6, [r5, #16]
 8008344:	f7ff fde2 	bl	8007f0c <_Bfree>
 8008348:	4628      	mov	r0, r5
 800834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008352:	3301      	adds	r3, #1
 8008354:	e7c5      	b.n	80082e2 <__lshift+0x4a>
 8008356:	3904      	subs	r1, #4
 8008358:	f853 2b04 	ldr.w	r2, [r3], #4
 800835c:	459c      	cmp	ip, r3
 800835e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008362:	d8f9      	bhi.n	8008358 <__lshift+0xc0>
 8008364:	e7ea      	b.n	800833c <__lshift+0xa4>
 8008366:	bf00      	nop
 8008368:	0800a1ee 	.word	0x0800a1ee
 800836c:	0800a1ff 	.word	0x0800a1ff

08008370 <__mcmp>:
 8008370:	4603      	mov	r3, r0
 8008372:	690a      	ldr	r2, [r1, #16]
 8008374:	6900      	ldr	r0, [r0, #16]
 8008376:	b530      	push	{r4, r5, lr}
 8008378:	1a80      	subs	r0, r0, r2
 800837a:	d10e      	bne.n	800839a <__mcmp+0x2a>
 800837c:	3314      	adds	r3, #20
 800837e:	3114      	adds	r1, #20
 8008380:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008384:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008388:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800838c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008390:	4295      	cmp	r5, r2
 8008392:	d003      	beq.n	800839c <__mcmp+0x2c>
 8008394:	d205      	bcs.n	80083a2 <__mcmp+0x32>
 8008396:	f04f 30ff 	mov.w	r0, #4294967295
 800839a:	bd30      	pop	{r4, r5, pc}
 800839c:	42a3      	cmp	r3, r4
 800839e:	d3f3      	bcc.n	8008388 <__mcmp+0x18>
 80083a0:	e7fb      	b.n	800839a <__mcmp+0x2a>
 80083a2:	2001      	movs	r0, #1
 80083a4:	e7f9      	b.n	800839a <__mcmp+0x2a>
	...

080083a8 <__mdiff>:
 80083a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4689      	mov	r9, r1
 80083ae:	4606      	mov	r6, r0
 80083b0:	4611      	mov	r1, r2
 80083b2:	4648      	mov	r0, r9
 80083b4:	4614      	mov	r4, r2
 80083b6:	f7ff ffdb 	bl	8008370 <__mcmp>
 80083ba:	1e05      	subs	r5, r0, #0
 80083bc:	d112      	bne.n	80083e4 <__mdiff+0x3c>
 80083be:	4629      	mov	r1, r5
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff fd63 	bl	8007e8c <_Balloc>
 80083c6:	4602      	mov	r2, r0
 80083c8:	b928      	cbnz	r0, 80083d6 <__mdiff+0x2e>
 80083ca:	f240 2137 	movw	r1, #567	@ 0x237
 80083ce:	4b3e      	ldr	r3, [pc, #248]	@ (80084c8 <__mdiff+0x120>)
 80083d0:	483e      	ldr	r0, [pc, #248]	@ (80084cc <__mdiff+0x124>)
 80083d2:	f000 faff 	bl	80089d4 <__assert_func>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083dc:	4610      	mov	r0, r2
 80083de:	b003      	add	sp, #12
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	bfbc      	itt	lt
 80083e6:	464b      	movlt	r3, r9
 80083e8:	46a1      	movlt	r9, r4
 80083ea:	4630      	mov	r0, r6
 80083ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083f0:	bfba      	itte	lt
 80083f2:	461c      	movlt	r4, r3
 80083f4:	2501      	movlt	r5, #1
 80083f6:	2500      	movge	r5, #0
 80083f8:	f7ff fd48 	bl	8007e8c <_Balloc>
 80083fc:	4602      	mov	r2, r0
 80083fe:	b918      	cbnz	r0, 8008408 <__mdiff+0x60>
 8008400:	f240 2145 	movw	r1, #581	@ 0x245
 8008404:	4b30      	ldr	r3, [pc, #192]	@ (80084c8 <__mdiff+0x120>)
 8008406:	e7e3      	b.n	80083d0 <__mdiff+0x28>
 8008408:	f100 0b14 	add.w	fp, r0, #20
 800840c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008410:	f109 0310 	add.w	r3, r9, #16
 8008414:	60c5      	str	r5, [r0, #12]
 8008416:	f04f 0c00 	mov.w	ip, #0
 800841a:	f109 0514 	add.w	r5, r9, #20
 800841e:	46d9      	mov	r9, fp
 8008420:	6926      	ldr	r6, [r4, #16]
 8008422:	f104 0e14 	add.w	lr, r4, #20
 8008426:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800842a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008436:	f853 af04 	ldr.w	sl, [r3, #4]!
 800843a:	b281      	uxth	r1, r0
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	fa1f f38a 	uxth.w	r3, sl
 8008442:	1a5b      	subs	r3, r3, r1
 8008444:	0c00      	lsrs	r0, r0, #16
 8008446:	4463      	add	r3, ip
 8008448:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800844c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008450:	b29b      	uxth	r3, r3
 8008452:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008456:	4576      	cmp	r6, lr
 8008458:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800845c:	f849 3b04 	str.w	r3, [r9], #4
 8008460:	d8e6      	bhi.n	8008430 <__mdiff+0x88>
 8008462:	1b33      	subs	r3, r6, r4
 8008464:	3b15      	subs	r3, #21
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	3415      	adds	r4, #21
 800846c:	3304      	adds	r3, #4
 800846e:	42a6      	cmp	r6, r4
 8008470:	bf38      	it	cc
 8008472:	2304      	movcc	r3, #4
 8008474:	441d      	add	r5, r3
 8008476:	445b      	add	r3, fp
 8008478:	461e      	mov	r6, r3
 800847a:	462c      	mov	r4, r5
 800847c:	4544      	cmp	r4, r8
 800847e:	d30e      	bcc.n	800849e <__mdiff+0xf6>
 8008480:	f108 0103 	add.w	r1, r8, #3
 8008484:	1b49      	subs	r1, r1, r5
 8008486:	f021 0103 	bic.w	r1, r1, #3
 800848a:	3d03      	subs	r5, #3
 800848c:	45a8      	cmp	r8, r5
 800848e:	bf38      	it	cc
 8008490:	2100      	movcc	r1, #0
 8008492:	440b      	add	r3, r1
 8008494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008498:	b199      	cbz	r1, 80084c2 <__mdiff+0x11a>
 800849a:	6117      	str	r7, [r2, #16]
 800849c:	e79e      	b.n	80083dc <__mdiff+0x34>
 800849e:	46e6      	mov	lr, ip
 80084a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80084a4:	fa1f fc81 	uxth.w	ip, r1
 80084a8:	44f4      	add	ip, lr
 80084aa:	0c08      	lsrs	r0, r1, #16
 80084ac:	4471      	add	r1, lr
 80084ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80084b2:	b289      	uxth	r1, r1
 80084b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084bc:	f846 1b04 	str.w	r1, [r6], #4
 80084c0:	e7dc      	b.n	800847c <__mdiff+0xd4>
 80084c2:	3f01      	subs	r7, #1
 80084c4:	e7e6      	b.n	8008494 <__mdiff+0xec>
 80084c6:	bf00      	nop
 80084c8:	0800a1ee 	.word	0x0800a1ee
 80084cc:	0800a1ff 	.word	0x0800a1ff

080084d0 <__d2b>:
 80084d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80084d4:	2101      	movs	r1, #1
 80084d6:	4690      	mov	r8, r2
 80084d8:	4699      	mov	r9, r3
 80084da:	9e08      	ldr	r6, [sp, #32]
 80084dc:	f7ff fcd6 	bl	8007e8c <_Balloc>
 80084e0:	4604      	mov	r4, r0
 80084e2:	b930      	cbnz	r0, 80084f2 <__d2b+0x22>
 80084e4:	4602      	mov	r2, r0
 80084e6:	f240 310f 	movw	r1, #783	@ 0x30f
 80084ea:	4b23      	ldr	r3, [pc, #140]	@ (8008578 <__d2b+0xa8>)
 80084ec:	4823      	ldr	r0, [pc, #140]	@ (800857c <__d2b+0xac>)
 80084ee:	f000 fa71 	bl	80089d4 <__assert_func>
 80084f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084fa:	b10d      	cbz	r5, 8008500 <__d2b+0x30>
 80084fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	f1b8 0300 	subs.w	r3, r8, #0
 8008506:	d024      	beq.n	8008552 <__d2b+0x82>
 8008508:	4668      	mov	r0, sp
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	f7ff fd85 	bl	800801a <__lo0bits>
 8008510:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008514:	b1d8      	cbz	r0, 800854e <__d2b+0x7e>
 8008516:	f1c0 0320 	rsb	r3, r0, #32
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	430b      	orrs	r3, r1
 8008520:	40c2      	lsrs	r2, r0
 8008522:	6163      	str	r3, [r4, #20]
 8008524:	9201      	str	r2, [sp, #4]
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf0c      	ite	eq
 800852c:	2201      	moveq	r2, #1
 800852e:	2202      	movne	r2, #2
 8008530:	61a3      	str	r3, [r4, #24]
 8008532:	6122      	str	r2, [r4, #16]
 8008534:	b1ad      	cbz	r5, 8008562 <__d2b+0x92>
 8008536:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800853a:	4405      	add	r5, r0
 800853c:	6035      	str	r5, [r6, #0]
 800853e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008544:	6018      	str	r0, [r3, #0]
 8008546:	4620      	mov	r0, r4
 8008548:	b002      	add	sp, #8
 800854a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800854e:	6161      	str	r1, [r4, #20]
 8008550:	e7e9      	b.n	8008526 <__d2b+0x56>
 8008552:	a801      	add	r0, sp, #4
 8008554:	f7ff fd61 	bl	800801a <__lo0bits>
 8008558:	9b01      	ldr	r3, [sp, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	6163      	str	r3, [r4, #20]
 800855e:	3020      	adds	r0, #32
 8008560:	e7e7      	b.n	8008532 <__d2b+0x62>
 8008562:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008566:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800856a:	6030      	str	r0, [r6, #0]
 800856c:	6918      	ldr	r0, [r3, #16]
 800856e:	f7ff fd35 	bl	8007fdc <__hi0bits>
 8008572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008576:	e7e4      	b.n	8008542 <__d2b+0x72>
 8008578:	0800a1ee 	.word	0x0800a1ee
 800857c:	0800a1ff 	.word	0x0800a1ff

08008580 <__ssputs_r>:
 8008580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	461f      	mov	r7, r3
 8008586:	688e      	ldr	r6, [r1, #8]
 8008588:	4682      	mov	sl, r0
 800858a:	42be      	cmp	r6, r7
 800858c:	460c      	mov	r4, r1
 800858e:	4690      	mov	r8, r2
 8008590:	680b      	ldr	r3, [r1, #0]
 8008592:	d82d      	bhi.n	80085f0 <__ssputs_r+0x70>
 8008594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008598:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800859c:	d026      	beq.n	80085ec <__ssputs_r+0x6c>
 800859e:	6965      	ldr	r5, [r4, #20]
 80085a0:	6909      	ldr	r1, [r1, #16]
 80085a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085a6:	eba3 0901 	sub.w	r9, r3, r1
 80085aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085ae:	1c7b      	adds	r3, r7, #1
 80085b0:	444b      	add	r3, r9
 80085b2:	106d      	asrs	r5, r5, #1
 80085b4:	429d      	cmp	r5, r3
 80085b6:	bf38      	it	cc
 80085b8:	461d      	movcc	r5, r3
 80085ba:	0553      	lsls	r3, r2, #21
 80085bc:	d527      	bpl.n	800860e <__ssputs_r+0x8e>
 80085be:	4629      	mov	r1, r5
 80085c0:	f7ff fbd8 	bl	8007d74 <_malloc_r>
 80085c4:	4606      	mov	r6, r0
 80085c6:	b360      	cbz	r0, 8008622 <__ssputs_r+0xa2>
 80085c8:	464a      	mov	r2, r9
 80085ca:	6921      	ldr	r1, [r4, #16]
 80085cc:	f7fe fcf1 	bl	8006fb2 <memcpy>
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	6126      	str	r6, [r4, #16]
 80085de:	444e      	add	r6, r9
 80085e0:	6026      	str	r6, [r4, #0]
 80085e2:	463e      	mov	r6, r7
 80085e4:	6165      	str	r5, [r4, #20]
 80085e6:	eba5 0509 	sub.w	r5, r5, r9
 80085ea:	60a5      	str	r5, [r4, #8]
 80085ec:	42be      	cmp	r6, r7
 80085ee:	d900      	bls.n	80085f2 <__ssputs_r+0x72>
 80085f0:	463e      	mov	r6, r7
 80085f2:	4632      	mov	r2, r6
 80085f4:	4641      	mov	r1, r8
 80085f6:	6820      	ldr	r0, [r4, #0]
 80085f8:	f000 f9c2 	bl	8008980 <memmove>
 80085fc:	2000      	movs	r0, #0
 80085fe:	68a3      	ldr	r3, [r4, #8]
 8008600:	1b9b      	subs	r3, r3, r6
 8008602:	60a3      	str	r3, [r4, #8]
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	4433      	add	r3, r6
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860e:	462a      	mov	r2, r5
 8008610:	f000 fa24 	bl	8008a5c <_realloc_r>
 8008614:	4606      	mov	r6, r0
 8008616:	2800      	cmp	r0, #0
 8008618:	d1e0      	bne.n	80085dc <__ssputs_r+0x5c>
 800861a:	4650      	mov	r0, sl
 800861c:	6921      	ldr	r1, [r4, #16]
 800861e:	f7ff fb37 	bl	8007c90 <_free_r>
 8008622:	230c      	movs	r3, #12
 8008624:	f8ca 3000 	str.w	r3, [sl]
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008632:	81a3      	strh	r3, [r4, #12]
 8008634:	e7e9      	b.n	800860a <__ssputs_r+0x8a>
	...

08008638 <_svfiprintf_r>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	4698      	mov	r8, r3
 800863e:	898b      	ldrh	r3, [r1, #12]
 8008640:	4607      	mov	r7, r0
 8008642:	061b      	lsls	r3, r3, #24
 8008644:	460d      	mov	r5, r1
 8008646:	4614      	mov	r4, r2
 8008648:	b09d      	sub	sp, #116	@ 0x74
 800864a:	d510      	bpl.n	800866e <_svfiprintf_r+0x36>
 800864c:	690b      	ldr	r3, [r1, #16]
 800864e:	b973      	cbnz	r3, 800866e <_svfiprintf_r+0x36>
 8008650:	2140      	movs	r1, #64	@ 0x40
 8008652:	f7ff fb8f 	bl	8007d74 <_malloc_r>
 8008656:	6028      	str	r0, [r5, #0]
 8008658:	6128      	str	r0, [r5, #16]
 800865a:	b930      	cbnz	r0, 800866a <_svfiprintf_r+0x32>
 800865c:	230c      	movs	r3, #12
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	b01d      	add	sp, #116	@ 0x74
 8008666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866a:	2340      	movs	r3, #64	@ 0x40
 800866c:	616b      	str	r3, [r5, #20]
 800866e:	2300      	movs	r3, #0
 8008670:	9309      	str	r3, [sp, #36]	@ 0x24
 8008672:	2320      	movs	r3, #32
 8008674:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008678:	2330      	movs	r3, #48	@ 0x30
 800867a:	f04f 0901 	mov.w	r9, #1
 800867e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008682:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800881c <_svfiprintf_r+0x1e4>
 8008686:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800868a:	4623      	mov	r3, r4
 800868c:	469a      	mov	sl, r3
 800868e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008692:	b10a      	cbz	r2, 8008698 <_svfiprintf_r+0x60>
 8008694:	2a25      	cmp	r2, #37	@ 0x25
 8008696:	d1f9      	bne.n	800868c <_svfiprintf_r+0x54>
 8008698:	ebba 0b04 	subs.w	fp, sl, r4
 800869c:	d00b      	beq.n	80086b6 <_svfiprintf_r+0x7e>
 800869e:	465b      	mov	r3, fp
 80086a0:	4622      	mov	r2, r4
 80086a2:	4629      	mov	r1, r5
 80086a4:	4638      	mov	r0, r7
 80086a6:	f7ff ff6b 	bl	8008580 <__ssputs_r>
 80086aa:	3001      	adds	r0, #1
 80086ac:	f000 80a7 	beq.w	80087fe <_svfiprintf_r+0x1c6>
 80086b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086b2:	445a      	add	r2, fp
 80086b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80086b6:	f89a 3000 	ldrb.w	r3, [sl]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 809f 	beq.w	80087fe <_svfiprintf_r+0x1c6>
 80086c0:	2300      	movs	r3, #0
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ca:	f10a 0a01 	add.w	sl, sl, #1
 80086ce:	9304      	str	r3, [sp, #16]
 80086d0:	9307      	str	r3, [sp, #28]
 80086d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80086d8:	4654      	mov	r4, sl
 80086da:	2205      	movs	r2, #5
 80086dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e0:	484e      	ldr	r0, [pc, #312]	@ (800881c <_svfiprintf_r+0x1e4>)
 80086e2:	f7fe fc58 	bl	8006f96 <memchr>
 80086e6:	9a04      	ldr	r2, [sp, #16]
 80086e8:	b9d8      	cbnz	r0, 8008722 <_svfiprintf_r+0xea>
 80086ea:	06d0      	lsls	r0, r2, #27
 80086ec:	bf44      	itt	mi
 80086ee:	2320      	movmi	r3, #32
 80086f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086f4:	0711      	lsls	r1, r2, #28
 80086f6:	bf44      	itt	mi
 80086f8:	232b      	movmi	r3, #43	@ 0x2b
 80086fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008702:	2b2a      	cmp	r3, #42	@ 0x2a
 8008704:	d015      	beq.n	8008732 <_svfiprintf_r+0xfa>
 8008706:	4654      	mov	r4, sl
 8008708:	2000      	movs	r0, #0
 800870a:	f04f 0c0a 	mov.w	ip, #10
 800870e:	9a07      	ldr	r2, [sp, #28]
 8008710:	4621      	mov	r1, r4
 8008712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008716:	3b30      	subs	r3, #48	@ 0x30
 8008718:	2b09      	cmp	r3, #9
 800871a:	d94b      	bls.n	80087b4 <_svfiprintf_r+0x17c>
 800871c:	b1b0      	cbz	r0, 800874c <_svfiprintf_r+0x114>
 800871e:	9207      	str	r2, [sp, #28]
 8008720:	e014      	b.n	800874c <_svfiprintf_r+0x114>
 8008722:	eba0 0308 	sub.w	r3, r0, r8
 8008726:	fa09 f303 	lsl.w	r3, r9, r3
 800872a:	4313      	orrs	r3, r2
 800872c:	46a2      	mov	sl, r4
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	e7d2      	b.n	80086d8 <_svfiprintf_r+0xa0>
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	1d19      	adds	r1, r3, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	9103      	str	r1, [sp, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfbb      	ittet	lt
 800873e:	425b      	neglt	r3, r3
 8008740:	f042 0202 	orrlt.w	r2, r2, #2
 8008744:	9307      	strge	r3, [sp, #28]
 8008746:	9307      	strlt	r3, [sp, #28]
 8008748:	bfb8      	it	lt
 800874a:	9204      	strlt	r2, [sp, #16]
 800874c:	7823      	ldrb	r3, [r4, #0]
 800874e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008750:	d10a      	bne.n	8008768 <_svfiprintf_r+0x130>
 8008752:	7863      	ldrb	r3, [r4, #1]
 8008754:	2b2a      	cmp	r3, #42	@ 0x2a
 8008756:	d132      	bne.n	80087be <_svfiprintf_r+0x186>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	3402      	adds	r4, #2
 800875c:	1d1a      	adds	r2, r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	9203      	str	r2, [sp, #12]
 8008762:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008820 <_svfiprintf_r+0x1e8>
 800876c:	2203      	movs	r2, #3
 800876e:	4650      	mov	r0, sl
 8008770:	7821      	ldrb	r1, [r4, #0]
 8008772:	f7fe fc10 	bl	8006f96 <memchr>
 8008776:	b138      	cbz	r0, 8008788 <_svfiprintf_r+0x150>
 8008778:	2240      	movs	r2, #64	@ 0x40
 800877a:	9b04      	ldr	r3, [sp, #16]
 800877c:	eba0 000a 	sub.w	r0, r0, sl
 8008780:	4082      	lsls	r2, r0
 8008782:	4313      	orrs	r3, r2
 8008784:	3401      	adds	r4, #1
 8008786:	9304      	str	r3, [sp, #16]
 8008788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878c:	2206      	movs	r2, #6
 800878e:	4825      	ldr	r0, [pc, #148]	@ (8008824 <_svfiprintf_r+0x1ec>)
 8008790:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008794:	f7fe fbff 	bl	8006f96 <memchr>
 8008798:	2800      	cmp	r0, #0
 800879a:	d036      	beq.n	800880a <_svfiprintf_r+0x1d2>
 800879c:	4b22      	ldr	r3, [pc, #136]	@ (8008828 <_svfiprintf_r+0x1f0>)
 800879e:	bb1b      	cbnz	r3, 80087e8 <_svfiprintf_r+0x1b0>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	3307      	adds	r3, #7
 80087a4:	f023 0307 	bic.w	r3, r3, #7
 80087a8:	3308      	adds	r3, #8
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ae:	4433      	add	r3, r6
 80087b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b2:	e76a      	b.n	800868a <_svfiprintf_r+0x52>
 80087b4:	460c      	mov	r4, r1
 80087b6:	2001      	movs	r0, #1
 80087b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087bc:	e7a8      	b.n	8008710 <_svfiprintf_r+0xd8>
 80087be:	2300      	movs	r3, #0
 80087c0:	f04f 0c0a 	mov.w	ip, #10
 80087c4:	4619      	mov	r1, r3
 80087c6:	3401      	adds	r4, #1
 80087c8:	9305      	str	r3, [sp, #20]
 80087ca:	4620      	mov	r0, r4
 80087cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087d0:	3a30      	subs	r2, #48	@ 0x30
 80087d2:	2a09      	cmp	r2, #9
 80087d4:	d903      	bls.n	80087de <_svfiprintf_r+0x1a6>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0c6      	beq.n	8008768 <_svfiprintf_r+0x130>
 80087da:	9105      	str	r1, [sp, #20]
 80087dc:	e7c4      	b.n	8008768 <_svfiprintf_r+0x130>
 80087de:	4604      	mov	r4, r0
 80087e0:	2301      	movs	r3, #1
 80087e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087e6:	e7f0      	b.n	80087ca <_svfiprintf_r+0x192>
 80087e8:	ab03      	add	r3, sp, #12
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	462a      	mov	r2, r5
 80087ee:	4638      	mov	r0, r7
 80087f0:	4b0e      	ldr	r3, [pc, #56]	@ (800882c <_svfiprintf_r+0x1f4>)
 80087f2:	a904      	add	r1, sp, #16
 80087f4:	f7fd fe58 	bl	80064a8 <_printf_float>
 80087f8:	1c42      	adds	r2, r0, #1
 80087fa:	4606      	mov	r6, r0
 80087fc:	d1d6      	bne.n	80087ac <_svfiprintf_r+0x174>
 80087fe:	89ab      	ldrh	r3, [r5, #12]
 8008800:	065b      	lsls	r3, r3, #25
 8008802:	f53f af2d 	bmi.w	8008660 <_svfiprintf_r+0x28>
 8008806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008808:	e72c      	b.n	8008664 <_svfiprintf_r+0x2c>
 800880a:	ab03      	add	r3, sp, #12
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	462a      	mov	r2, r5
 8008810:	4638      	mov	r0, r7
 8008812:	4b06      	ldr	r3, [pc, #24]	@ (800882c <_svfiprintf_r+0x1f4>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	f7fe f8e5 	bl	80069e4 <_printf_i>
 800881a:	e7ed      	b.n	80087f8 <_svfiprintf_r+0x1c0>
 800881c:	0800a258 	.word	0x0800a258
 8008820:	0800a25e 	.word	0x0800a25e
 8008824:	0800a262 	.word	0x0800a262
 8008828:	080064a9 	.word	0x080064a9
 800882c:	08008581 	.word	0x08008581

08008830 <__sflush_r>:
 8008830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	0716      	lsls	r6, r2, #28
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	d454      	bmi.n	80088e8 <__sflush_r+0xb8>
 800883e:	684b      	ldr	r3, [r1, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	dc02      	bgt.n	800884a <__sflush_r+0x1a>
 8008844:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	dd48      	ble.n	80088dc <__sflush_r+0xac>
 800884a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800884c:	2e00      	cmp	r6, #0
 800884e:	d045      	beq.n	80088dc <__sflush_r+0xac>
 8008850:	2300      	movs	r3, #0
 8008852:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008856:	682f      	ldr	r7, [r5, #0]
 8008858:	6a21      	ldr	r1, [r4, #32]
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	d030      	beq.n	80088c0 <__sflush_r+0x90>
 800885e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	0759      	lsls	r1, r3, #29
 8008864:	d505      	bpl.n	8008872 <__sflush_r+0x42>
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	1ad2      	subs	r2, r2, r3
 800886a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800886c:	b10b      	cbz	r3, 8008872 <__sflush_r+0x42>
 800886e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008870:	1ad2      	subs	r2, r2, r3
 8008872:	2300      	movs	r3, #0
 8008874:	4628      	mov	r0, r5
 8008876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008878:	6a21      	ldr	r1, [r4, #32]
 800887a:	47b0      	blx	r6
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	d106      	bne.n	8008890 <__sflush_r+0x60>
 8008882:	6829      	ldr	r1, [r5, #0]
 8008884:	291d      	cmp	r1, #29
 8008886:	d82b      	bhi.n	80088e0 <__sflush_r+0xb0>
 8008888:	4a28      	ldr	r2, [pc, #160]	@ (800892c <__sflush_r+0xfc>)
 800888a:	40ca      	lsrs	r2, r1
 800888c:	07d6      	lsls	r6, r2, #31
 800888e:	d527      	bpl.n	80088e0 <__sflush_r+0xb0>
 8008890:	2200      	movs	r2, #0
 8008892:	6062      	str	r2, [r4, #4]
 8008894:	6922      	ldr	r2, [r4, #16]
 8008896:	04d9      	lsls	r1, r3, #19
 8008898:	6022      	str	r2, [r4, #0]
 800889a:	d504      	bpl.n	80088a6 <__sflush_r+0x76>
 800889c:	1c42      	adds	r2, r0, #1
 800889e:	d101      	bne.n	80088a4 <__sflush_r+0x74>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b903      	cbnz	r3, 80088a6 <__sflush_r+0x76>
 80088a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80088a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088a8:	602f      	str	r7, [r5, #0]
 80088aa:	b1b9      	cbz	r1, 80088dc <__sflush_r+0xac>
 80088ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088b0:	4299      	cmp	r1, r3
 80088b2:	d002      	beq.n	80088ba <__sflush_r+0x8a>
 80088b4:	4628      	mov	r0, r5
 80088b6:	f7ff f9eb 	bl	8007c90 <_free_r>
 80088ba:	2300      	movs	r3, #0
 80088bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80088be:	e00d      	b.n	80088dc <__sflush_r+0xac>
 80088c0:	2301      	movs	r3, #1
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b0      	blx	r6
 80088c6:	4602      	mov	r2, r0
 80088c8:	1c50      	adds	r0, r2, #1
 80088ca:	d1c9      	bne.n	8008860 <__sflush_r+0x30>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0c6      	beq.n	8008860 <__sflush_r+0x30>
 80088d2:	2b1d      	cmp	r3, #29
 80088d4:	d001      	beq.n	80088da <__sflush_r+0xaa>
 80088d6:	2b16      	cmp	r3, #22
 80088d8:	d11d      	bne.n	8008916 <__sflush_r+0xe6>
 80088da:	602f      	str	r7, [r5, #0]
 80088dc:	2000      	movs	r0, #0
 80088de:	e021      	b.n	8008924 <__sflush_r+0xf4>
 80088e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e4:	b21b      	sxth	r3, r3
 80088e6:	e01a      	b.n	800891e <__sflush_r+0xee>
 80088e8:	690f      	ldr	r7, [r1, #16]
 80088ea:	2f00      	cmp	r7, #0
 80088ec:	d0f6      	beq.n	80088dc <__sflush_r+0xac>
 80088ee:	0793      	lsls	r3, r2, #30
 80088f0:	bf18      	it	ne
 80088f2:	2300      	movne	r3, #0
 80088f4:	680e      	ldr	r6, [r1, #0]
 80088f6:	bf08      	it	eq
 80088f8:	694b      	ldreq	r3, [r1, #20]
 80088fa:	1bf6      	subs	r6, r6, r7
 80088fc:	600f      	str	r7, [r1, #0]
 80088fe:	608b      	str	r3, [r1, #8]
 8008900:	2e00      	cmp	r6, #0
 8008902:	ddeb      	ble.n	80088dc <__sflush_r+0xac>
 8008904:	4633      	mov	r3, r6
 8008906:	463a      	mov	r2, r7
 8008908:	4628      	mov	r0, r5
 800890a:	6a21      	ldr	r1, [r4, #32]
 800890c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008910:	47e0      	blx	ip
 8008912:	2800      	cmp	r0, #0
 8008914:	dc07      	bgt.n	8008926 <__sflush_r+0xf6>
 8008916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008926:	4407      	add	r7, r0
 8008928:	1a36      	subs	r6, r6, r0
 800892a:	e7e9      	b.n	8008900 <__sflush_r+0xd0>
 800892c:	20400001 	.word	0x20400001

08008930 <_fflush_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	690b      	ldr	r3, [r1, #16]
 8008934:	4605      	mov	r5, r0
 8008936:	460c      	mov	r4, r1
 8008938:	b913      	cbnz	r3, 8008940 <_fflush_r+0x10>
 800893a:	2500      	movs	r5, #0
 800893c:	4628      	mov	r0, r5
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	b118      	cbz	r0, 800894a <_fflush_r+0x1a>
 8008942:	6a03      	ldr	r3, [r0, #32]
 8008944:	b90b      	cbnz	r3, 800894a <_fflush_r+0x1a>
 8008946:	f7fe f9f7 	bl	8006d38 <__sinit>
 800894a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0f3      	beq.n	800893a <_fflush_r+0xa>
 8008952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008954:	07d0      	lsls	r0, r2, #31
 8008956:	d404      	bmi.n	8008962 <_fflush_r+0x32>
 8008958:	0599      	lsls	r1, r3, #22
 800895a:	d402      	bmi.n	8008962 <_fflush_r+0x32>
 800895c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800895e:	f7fe fb18 	bl	8006f92 <__retarget_lock_acquire_recursive>
 8008962:	4628      	mov	r0, r5
 8008964:	4621      	mov	r1, r4
 8008966:	f7ff ff63 	bl	8008830 <__sflush_r>
 800896a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800896c:	4605      	mov	r5, r0
 800896e:	07da      	lsls	r2, r3, #31
 8008970:	d4e4      	bmi.n	800893c <_fflush_r+0xc>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	059b      	lsls	r3, r3, #22
 8008976:	d4e1      	bmi.n	800893c <_fflush_r+0xc>
 8008978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800897a:	f7fe fb0b 	bl	8006f94 <__retarget_lock_release_recursive>
 800897e:	e7dd      	b.n	800893c <_fflush_r+0xc>

08008980 <memmove>:
 8008980:	4288      	cmp	r0, r1
 8008982:	b510      	push	{r4, lr}
 8008984:	eb01 0402 	add.w	r4, r1, r2
 8008988:	d902      	bls.n	8008990 <memmove+0x10>
 800898a:	4284      	cmp	r4, r0
 800898c:	4623      	mov	r3, r4
 800898e:	d807      	bhi.n	80089a0 <memmove+0x20>
 8008990:	1e43      	subs	r3, r0, #1
 8008992:	42a1      	cmp	r1, r4
 8008994:	d008      	beq.n	80089a8 <memmove+0x28>
 8008996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800899a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800899e:	e7f8      	b.n	8008992 <memmove+0x12>
 80089a0:	4601      	mov	r1, r0
 80089a2:	4402      	add	r2, r0
 80089a4:	428a      	cmp	r2, r1
 80089a6:	d100      	bne.n	80089aa <memmove+0x2a>
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089b2:	e7f7      	b.n	80089a4 <memmove+0x24>

080089b4 <_sbrk_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	2300      	movs	r3, #0
 80089b8:	4d05      	ldr	r5, [pc, #20]	@ (80089d0 <_sbrk_r+0x1c>)
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	602b      	str	r3, [r5, #0]
 80089c0:	f7fa fe40 	bl	8003644 <_sbrk>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_sbrk_r+0x1a>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_sbrk_r+0x1a>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	20000904 	.word	0x20000904

080089d4 <__assert_func>:
 80089d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089d6:	4614      	mov	r4, r2
 80089d8:	461a      	mov	r2, r3
 80089da:	4b09      	ldr	r3, [pc, #36]	@ (8008a00 <__assert_func+0x2c>)
 80089dc:	4605      	mov	r5, r0
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68d8      	ldr	r0, [r3, #12]
 80089e2:	b14c      	cbz	r4, 80089f8 <__assert_func+0x24>
 80089e4:	4b07      	ldr	r3, [pc, #28]	@ (8008a04 <__assert_func+0x30>)
 80089e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089ea:	9100      	str	r1, [sp, #0]
 80089ec:	462b      	mov	r3, r5
 80089ee:	4906      	ldr	r1, [pc, #24]	@ (8008a08 <__assert_func+0x34>)
 80089f0:	f000 f870 	bl	8008ad4 <fiprintf>
 80089f4:	f000 f880 	bl	8008af8 <abort>
 80089f8:	4b04      	ldr	r3, [pc, #16]	@ (8008a0c <__assert_func+0x38>)
 80089fa:	461c      	mov	r4, r3
 80089fc:	e7f3      	b.n	80089e6 <__assert_func+0x12>
 80089fe:	bf00      	nop
 8008a00:	200000e8 	.word	0x200000e8
 8008a04:	0800a273 	.word	0x0800a273
 8008a08:	0800a280 	.word	0x0800a280
 8008a0c:	0800a2ae 	.word	0x0800a2ae

08008a10 <_calloc_r>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	fba1 5402 	umull	r5, r4, r1, r2
 8008a16:	b934      	cbnz	r4, 8008a26 <_calloc_r+0x16>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7ff f9ab 	bl	8007d74 <_malloc_r>
 8008a1e:	4606      	mov	r6, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <_calloc_r+0x1e>
 8008a22:	4630      	mov	r0, r6
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	220c      	movs	r2, #12
 8008a28:	2600      	movs	r6, #0
 8008a2a:	6002      	str	r2, [r0, #0]
 8008a2c:	e7f9      	b.n	8008a22 <_calloc_r+0x12>
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4621      	mov	r1, r4
 8008a32:	f7fe fa30 	bl	8006e96 <memset>
 8008a36:	e7f4      	b.n	8008a22 <_calloc_r+0x12>

08008a38 <__ascii_mbtowc>:
 8008a38:	b082      	sub	sp, #8
 8008a3a:	b901      	cbnz	r1, 8008a3e <__ascii_mbtowc+0x6>
 8008a3c:	a901      	add	r1, sp, #4
 8008a3e:	b142      	cbz	r2, 8008a52 <__ascii_mbtowc+0x1a>
 8008a40:	b14b      	cbz	r3, 8008a56 <__ascii_mbtowc+0x1e>
 8008a42:	7813      	ldrb	r3, [r2, #0]
 8008a44:	600b      	str	r3, [r1, #0]
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	1e10      	subs	r0, r2, #0
 8008a4a:	bf18      	it	ne
 8008a4c:	2001      	movne	r0, #1
 8008a4e:	b002      	add	sp, #8
 8008a50:	4770      	bx	lr
 8008a52:	4610      	mov	r0, r2
 8008a54:	e7fb      	b.n	8008a4e <__ascii_mbtowc+0x16>
 8008a56:	f06f 0001 	mvn.w	r0, #1
 8008a5a:	e7f8      	b.n	8008a4e <__ascii_mbtowc+0x16>

08008a5c <_realloc_r>:
 8008a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a60:	4607      	mov	r7, r0
 8008a62:	4614      	mov	r4, r2
 8008a64:	460d      	mov	r5, r1
 8008a66:	b921      	cbnz	r1, 8008a72 <_realloc_r+0x16>
 8008a68:	4611      	mov	r1, r2
 8008a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	f7ff b981 	b.w	8007d74 <_malloc_r>
 8008a72:	b92a      	cbnz	r2, 8008a80 <_realloc_r+0x24>
 8008a74:	f7ff f90c 	bl	8007c90 <_free_r>
 8008a78:	4625      	mov	r5, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a80:	f000 f841 	bl	8008b06 <_malloc_usable_size_r>
 8008a84:	4284      	cmp	r4, r0
 8008a86:	4606      	mov	r6, r0
 8008a88:	d802      	bhi.n	8008a90 <_realloc_r+0x34>
 8008a8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a8e:	d8f4      	bhi.n	8008a7a <_realloc_r+0x1e>
 8008a90:	4621      	mov	r1, r4
 8008a92:	4638      	mov	r0, r7
 8008a94:	f7ff f96e 	bl	8007d74 <_malloc_r>
 8008a98:	4680      	mov	r8, r0
 8008a9a:	b908      	cbnz	r0, 8008aa0 <_realloc_r+0x44>
 8008a9c:	4645      	mov	r5, r8
 8008a9e:	e7ec      	b.n	8008a7a <_realloc_r+0x1e>
 8008aa0:	42b4      	cmp	r4, r6
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	bf28      	it	cs
 8008aa8:	4632      	movcs	r2, r6
 8008aaa:	f7fe fa82 	bl	8006fb2 <memcpy>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff f8ed 	bl	8007c90 <_free_r>
 8008ab6:	e7f1      	b.n	8008a9c <_realloc_r+0x40>

08008ab8 <__ascii_wctomb>:
 8008ab8:	4603      	mov	r3, r0
 8008aba:	4608      	mov	r0, r1
 8008abc:	b141      	cbz	r1, 8008ad0 <__ascii_wctomb+0x18>
 8008abe:	2aff      	cmp	r2, #255	@ 0xff
 8008ac0:	d904      	bls.n	8008acc <__ascii_wctomb+0x14>
 8008ac2:	228a      	movs	r2, #138	@ 0x8a
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	4770      	bx	lr
 8008acc:	2001      	movs	r0, #1
 8008ace:	700a      	strb	r2, [r1, #0]
 8008ad0:	4770      	bx	lr
	...

08008ad4 <fiprintf>:
 8008ad4:	b40e      	push	{r1, r2, r3}
 8008ad6:	b503      	push	{r0, r1, lr}
 8008ad8:	4601      	mov	r1, r0
 8008ada:	ab03      	add	r3, sp, #12
 8008adc:	4805      	ldr	r0, [pc, #20]	@ (8008af4 <fiprintf+0x20>)
 8008ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae2:	6800      	ldr	r0, [r0, #0]
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	f000 f83d 	bl	8008b64 <_vfiprintf_r>
 8008aea:	b002      	add	sp, #8
 8008aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008af0:	b003      	add	sp, #12
 8008af2:	4770      	bx	lr
 8008af4:	200000e8 	.word	0x200000e8

08008af8 <abort>:
 8008af8:	2006      	movs	r0, #6
 8008afa:	b508      	push	{r3, lr}
 8008afc:	f000 fa06 	bl	8008f0c <raise>
 8008b00:	2001      	movs	r0, #1
 8008b02:	f7fa fd2a 	bl	800355a <_exit>

08008b06 <_malloc_usable_size_r>:
 8008b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b0a:	1f18      	subs	r0, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	bfbc      	itt	lt
 8008b10:	580b      	ldrlt	r3, [r1, r0]
 8008b12:	18c0      	addlt	r0, r0, r3
 8008b14:	4770      	bx	lr

08008b16 <__sfputc_r>:
 8008b16:	6893      	ldr	r3, [r2, #8]
 8008b18:	b410      	push	{r4}
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	6093      	str	r3, [r2, #8]
 8008b20:	da07      	bge.n	8008b32 <__sfputc_r+0x1c>
 8008b22:	6994      	ldr	r4, [r2, #24]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	db01      	blt.n	8008b2c <__sfputc_r+0x16>
 8008b28:	290a      	cmp	r1, #10
 8008b2a:	d102      	bne.n	8008b32 <__sfputc_r+0x1c>
 8008b2c:	bc10      	pop	{r4}
 8008b2e:	f000 b931 	b.w	8008d94 <__swbuf_r>
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	1c58      	adds	r0, r3, #1
 8008b36:	6010      	str	r0, [r2, #0]
 8008b38:	7019      	strb	r1, [r3, #0]
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	bc10      	pop	{r4}
 8008b3e:	4770      	bx	lr

08008b40 <__sfputs_r>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	4614      	mov	r4, r2
 8008b48:	18d5      	adds	r5, r2, r3
 8008b4a:	42ac      	cmp	r4, r5
 8008b4c:	d101      	bne.n	8008b52 <__sfputs_r+0x12>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e007      	b.n	8008b62 <__sfputs_r+0x22>
 8008b52:	463a      	mov	r2, r7
 8008b54:	4630      	mov	r0, r6
 8008b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5a:	f7ff ffdc 	bl	8008b16 <__sfputc_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	d1f3      	bne.n	8008b4a <__sfputs_r+0xa>
 8008b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b64 <_vfiprintf_r>:
 8008b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	460d      	mov	r5, r1
 8008b6a:	4614      	mov	r4, r2
 8008b6c:	4698      	mov	r8, r3
 8008b6e:	4606      	mov	r6, r0
 8008b70:	b09d      	sub	sp, #116	@ 0x74
 8008b72:	b118      	cbz	r0, 8008b7c <_vfiprintf_r+0x18>
 8008b74:	6a03      	ldr	r3, [r0, #32]
 8008b76:	b90b      	cbnz	r3, 8008b7c <_vfiprintf_r+0x18>
 8008b78:	f7fe f8de 	bl	8006d38 <__sinit>
 8008b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b7e:	07d9      	lsls	r1, r3, #31
 8008b80:	d405      	bmi.n	8008b8e <_vfiprintf_r+0x2a>
 8008b82:	89ab      	ldrh	r3, [r5, #12]
 8008b84:	059a      	lsls	r2, r3, #22
 8008b86:	d402      	bmi.n	8008b8e <_vfiprintf_r+0x2a>
 8008b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b8a:	f7fe fa02 	bl	8006f92 <__retarget_lock_acquire_recursive>
 8008b8e:	89ab      	ldrh	r3, [r5, #12]
 8008b90:	071b      	lsls	r3, r3, #28
 8008b92:	d501      	bpl.n	8008b98 <_vfiprintf_r+0x34>
 8008b94:	692b      	ldr	r3, [r5, #16]
 8008b96:	b99b      	cbnz	r3, 8008bc0 <_vfiprintf_r+0x5c>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f000 f938 	bl	8008e10 <__swsetup_r>
 8008ba0:	b170      	cbz	r0, 8008bc0 <_vfiprintf_r+0x5c>
 8008ba2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ba4:	07dc      	lsls	r4, r3, #31
 8008ba6:	d504      	bpl.n	8008bb2 <_vfiprintf_r+0x4e>
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	b01d      	add	sp, #116	@ 0x74
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	89ab      	ldrh	r3, [r5, #12]
 8008bb4:	0598      	lsls	r0, r3, #22
 8008bb6:	d4f7      	bmi.n	8008ba8 <_vfiprintf_r+0x44>
 8008bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bba:	f7fe f9eb 	bl	8006f94 <__retarget_lock_release_recursive>
 8008bbe:	e7f3      	b.n	8008ba8 <_vfiprintf_r+0x44>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bca:	2330      	movs	r3, #48	@ 0x30
 8008bcc:	f04f 0901 	mov.w	r9, #1
 8008bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008d80 <_vfiprintf_r+0x21c>
 8008bd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bdc:	4623      	mov	r3, r4
 8008bde:	469a      	mov	sl, r3
 8008be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be4:	b10a      	cbz	r2, 8008bea <_vfiprintf_r+0x86>
 8008be6:	2a25      	cmp	r2, #37	@ 0x25
 8008be8:	d1f9      	bne.n	8008bde <_vfiprintf_r+0x7a>
 8008bea:	ebba 0b04 	subs.w	fp, sl, r4
 8008bee:	d00b      	beq.n	8008c08 <_vfiprintf_r+0xa4>
 8008bf0:	465b      	mov	r3, fp
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff ffa2 	bl	8008b40 <__sfputs_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f000 80a7 	beq.w	8008d50 <_vfiprintf_r+0x1ec>
 8008c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c04:	445a      	add	r2, fp
 8008c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c08:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 809f 	beq.w	8008d50 <_vfiprintf_r+0x1ec>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c1c:	f10a 0a01 	add.w	sl, sl, #1
 8008c20:	9304      	str	r3, [sp, #16]
 8008c22:	9307      	str	r3, [sp, #28]
 8008c24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c28:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c2a:	4654      	mov	r4, sl
 8008c2c:	2205      	movs	r2, #5
 8008c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c32:	4853      	ldr	r0, [pc, #332]	@ (8008d80 <_vfiprintf_r+0x21c>)
 8008c34:	f7fe f9af 	bl	8006f96 <memchr>
 8008c38:	9a04      	ldr	r2, [sp, #16]
 8008c3a:	b9d8      	cbnz	r0, 8008c74 <_vfiprintf_r+0x110>
 8008c3c:	06d1      	lsls	r1, r2, #27
 8008c3e:	bf44      	itt	mi
 8008c40:	2320      	movmi	r3, #32
 8008c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c46:	0713      	lsls	r3, r2, #28
 8008c48:	bf44      	itt	mi
 8008c4a:	232b      	movmi	r3, #43	@ 0x2b
 8008c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c50:	f89a 3000 	ldrb.w	r3, [sl]
 8008c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c56:	d015      	beq.n	8008c84 <_vfiprintf_r+0x120>
 8008c58:	4654      	mov	r4, sl
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f04f 0c0a 	mov.w	ip, #10
 8008c60:	9a07      	ldr	r2, [sp, #28]
 8008c62:	4621      	mov	r1, r4
 8008c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c68:	3b30      	subs	r3, #48	@ 0x30
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	d94b      	bls.n	8008d06 <_vfiprintf_r+0x1a2>
 8008c6e:	b1b0      	cbz	r0, 8008c9e <_vfiprintf_r+0x13a>
 8008c70:	9207      	str	r2, [sp, #28]
 8008c72:	e014      	b.n	8008c9e <_vfiprintf_r+0x13a>
 8008c74:	eba0 0308 	sub.w	r3, r0, r8
 8008c78:	fa09 f303 	lsl.w	r3, r9, r3
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	46a2      	mov	sl, r4
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	e7d2      	b.n	8008c2a <_vfiprintf_r+0xc6>
 8008c84:	9b03      	ldr	r3, [sp, #12]
 8008c86:	1d19      	adds	r1, r3, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	9103      	str	r1, [sp, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bfbb      	ittet	lt
 8008c90:	425b      	neglt	r3, r3
 8008c92:	f042 0202 	orrlt.w	r2, r2, #2
 8008c96:	9307      	strge	r3, [sp, #28]
 8008c98:	9307      	strlt	r3, [sp, #28]
 8008c9a:	bfb8      	it	lt
 8008c9c:	9204      	strlt	r2, [sp, #16]
 8008c9e:	7823      	ldrb	r3, [r4, #0]
 8008ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ca2:	d10a      	bne.n	8008cba <_vfiprintf_r+0x156>
 8008ca4:	7863      	ldrb	r3, [r4, #1]
 8008ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca8:	d132      	bne.n	8008d10 <_vfiprintf_r+0x1ac>
 8008caa:	9b03      	ldr	r3, [sp, #12]
 8008cac:	3402      	adds	r4, #2
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	9203      	str	r2, [sp, #12]
 8008cb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008d84 <_vfiprintf_r+0x220>
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	7821      	ldrb	r1, [r4, #0]
 8008cc4:	f7fe f967 	bl	8006f96 <memchr>
 8008cc8:	b138      	cbz	r0, 8008cda <_vfiprintf_r+0x176>
 8008cca:	2240      	movs	r2, #64	@ 0x40
 8008ccc:	9b04      	ldr	r3, [sp, #16]
 8008cce:	eba0 000a 	sub.w	r0, r0, sl
 8008cd2:	4082      	lsls	r2, r0
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	3401      	adds	r4, #1
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cde:	2206      	movs	r2, #6
 8008ce0:	4829      	ldr	r0, [pc, #164]	@ (8008d88 <_vfiprintf_r+0x224>)
 8008ce2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ce6:	f7fe f956 	bl	8006f96 <memchr>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d03f      	beq.n	8008d6e <_vfiprintf_r+0x20a>
 8008cee:	4b27      	ldr	r3, [pc, #156]	@ (8008d8c <_vfiprintf_r+0x228>)
 8008cf0:	bb1b      	cbnz	r3, 8008d3a <_vfiprintf_r+0x1d6>
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	3307      	adds	r3, #7
 8008cf6:	f023 0307 	bic.w	r3, r3, #7
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	9303      	str	r3, [sp, #12]
 8008cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d00:	443b      	add	r3, r7
 8008d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d04:	e76a      	b.n	8008bdc <_vfiprintf_r+0x78>
 8008d06:	460c      	mov	r4, r1
 8008d08:	2001      	movs	r0, #1
 8008d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d0e:	e7a8      	b.n	8008c62 <_vfiprintf_r+0xfe>
 8008d10:	2300      	movs	r3, #0
 8008d12:	f04f 0c0a 	mov.w	ip, #10
 8008d16:	4619      	mov	r1, r3
 8008d18:	3401      	adds	r4, #1
 8008d1a:	9305      	str	r3, [sp, #20]
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d22:	3a30      	subs	r2, #48	@ 0x30
 8008d24:	2a09      	cmp	r2, #9
 8008d26:	d903      	bls.n	8008d30 <_vfiprintf_r+0x1cc>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0c6      	beq.n	8008cba <_vfiprintf_r+0x156>
 8008d2c:	9105      	str	r1, [sp, #20]
 8008d2e:	e7c4      	b.n	8008cba <_vfiprintf_r+0x156>
 8008d30:	4604      	mov	r4, r0
 8008d32:	2301      	movs	r3, #1
 8008d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d38:	e7f0      	b.n	8008d1c <_vfiprintf_r+0x1b8>
 8008d3a:	ab03      	add	r3, sp, #12
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4630      	mov	r0, r6
 8008d42:	4b13      	ldr	r3, [pc, #76]	@ (8008d90 <_vfiprintf_r+0x22c>)
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	f7fd fbaf 	bl	80064a8 <_printf_float>
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	1c78      	adds	r0, r7, #1
 8008d4e:	d1d6      	bne.n	8008cfe <_vfiprintf_r+0x19a>
 8008d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d52:	07d9      	lsls	r1, r3, #31
 8008d54:	d405      	bmi.n	8008d62 <_vfiprintf_r+0x1fe>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	059a      	lsls	r2, r3, #22
 8008d5a:	d402      	bmi.n	8008d62 <_vfiprintf_r+0x1fe>
 8008d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d5e:	f7fe f919 	bl	8006f94 <__retarget_lock_release_recursive>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	065b      	lsls	r3, r3, #25
 8008d66:	f53f af1f 	bmi.w	8008ba8 <_vfiprintf_r+0x44>
 8008d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d6c:	e71e      	b.n	8008bac <_vfiprintf_r+0x48>
 8008d6e:	ab03      	add	r3, sp, #12
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	462a      	mov	r2, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	4b06      	ldr	r3, [pc, #24]	@ (8008d90 <_vfiprintf_r+0x22c>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	f7fd fe33 	bl	80069e4 <_printf_i>
 8008d7e:	e7e4      	b.n	8008d4a <_vfiprintf_r+0x1e6>
 8008d80:	0800a258 	.word	0x0800a258
 8008d84:	0800a25e 	.word	0x0800a25e
 8008d88:	0800a262 	.word	0x0800a262
 8008d8c:	080064a9 	.word	0x080064a9
 8008d90:	08008b41 	.word	0x08008b41

08008d94 <__swbuf_r>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	460e      	mov	r6, r1
 8008d98:	4614      	mov	r4, r2
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	b118      	cbz	r0, 8008da6 <__swbuf_r+0x12>
 8008d9e:	6a03      	ldr	r3, [r0, #32]
 8008da0:	b90b      	cbnz	r3, 8008da6 <__swbuf_r+0x12>
 8008da2:	f7fd ffc9 	bl	8006d38 <__sinit>
 8008da6:	69a3      	ldr	r3, [r4, #24]
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	071a      	lsls	r2, r3, #28
 8008dae:	d501      	bpl.n	8008db4 <__swbuf_r+0x20>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	b943      	cbnz	r3, 8008dc6 <__swbuf_r+0x32>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 f82a 	bl	8008e10 <__swsetup_r>
 8008dbc:	b118      	cbz	r0, 8008dc6 <__swbuf_r+0x32>
 8008dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	6922      	ldr	r2, [r4, #16]
 8008dca:	b2f6      	uxtb	r6, r6
 8008dcc:	1a98      	subs	r0, r3, r2
 8008dce:	6963      	ldr	r3, [r4, #20]
 8008dd0:	4637      	mov	r7, r6
 8008dd2:	4283      	cmp	r3, r0
 8008dd4:	dc05      	bgt.n	8008de2 <__swbuf_r+0x4e>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f7ff fda9 	bl	8008930 <_fflush_r>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d1ed      	bne.n	8008dbe <__swbuf_r+0x2a>
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	60a3      	str	r3, [r4, #8]
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	6022      	str	r2, [r4, #0]
 8008dee:	701e      	strb	r6, [r3, #0]
 8008df0:	6962      	ldr	r2, [r4, #20]
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d004      	beq.n	8008e02 <__swbuf_r+0x6e>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	07db      	lsls	r3, r3, #31
 8008dfc:	d5e1      	bpl.n	8008dc2 <__swbuf_r+0x2e>
 8008dfe:	2e0a      	cmp	r6, #10
 8008e00:	d1df      	bne.n	8008dc2 <__swbuf_r+0x2e>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f7ff fd93 	bl	8008930 <_fflush_r>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0d9      	beq.n	8008dc2 <__swbuf_r+0x2e>
 8008e0e:	e7d6      	b.n	8008dbe <__swbuf_r+0x2a>

08008e10 <__swsetup_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4b29      	ldr	r3, [pc, #164]	@ (8008eb8 <__swsetup_r+0xa8>)
 8008e14:	4605      	mov	r5, r0
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	460c      	mov	r4, r1
 8008e1a:	b118      	cbz	r0, 8008e24 <__swsetup_r+0x14>
 8008e1c:	6a03      	ldr	r3, [r0, #32]
 8008e1e:	b90b      	cbnz	r3, 8008e24 <__swsetup_r+0x14>
 8008e20:	f7fd ff8a 	bl	8006d38 <__sinit>
 8008e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e28:	0719      	lsls	r1, r3, #28
 8008e2a:	d422      	bmi.n	8008e72 <__swsetup_r+0x62>
 8008e2c:	06da      	lsls	r2, r3, #27
 8008e2e:	d407      	bmi.n	8008e40 <__swsetup_r+0x30>
 8008e30:	2209      	movs	r2, #9
 8008e32:	602a      	str	r2, [r5, #0]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	e033      	b.n	8008ea8 <__swsetup_r+0x98>
 8008e40:	0758      	lsls	r0, r3, #29
 8008e42:	d512      	bpl.n	8008e6a <__swsetup_r+0x5a>
 8008e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e46:	b141      	cbz	r1, 8008e5a <__swsetup_r+0x4a>
 8008e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d002      	beq.n	8008e56 <__swsetup_r+0x46>
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7fe ff1d 	bl	8007c90 <_free_r>
 8008e56:	2300      	movs	r3, #0
 8008e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	2300      	movs	r3, #0
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f043 0308 	orr.w	r3, r3, #8
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	b94b      	cbnz	r3, 8008e8a <__swsetup_r+0x7a>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e80:	d003      	beq.n	8008e8a <__swsetup_r+0x7a>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4628      	mov	r0, r5
 8008e86:	f000 f882 	bl	8008f8e <__smakebuf_r>
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	f013 0201 	ands.w	r2, r3, #1
 8008e92:	d00a      	beq.n	8008eaa <__swsetup_r+0x9a>
 8008e94:	2200      	movs	r2, #0
 8008e96:	60a2      	str	r2, [r4, #8]
 8008e98:	6962      	ldr	r2, [r4, #20]
 8008e9a:	4252      	negs	r2, r2
 8008e9c:	61a2      	str	r2, [r4, #24]
 8008e9e:	6922      	ldr	r2, [r4, #16]
 8008ea0:	b942      	cbnz	r2, 8008eb4 <__swsetup_r+0xa4>
 8008ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ea6:	d1c5      	bne.n	8008e34 <__swsetup_r+0x24>
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	0799      	lsls	r1, r3, #30
 8008eac:	bf58      	it	pl
 8008eae:	6962      	ldrpl	r2, [r4, #20]
 8008eb0:	60a2      	str	r2, [r4, #8]
 8008eb2:	e7f4      	b.n	8008e9e <__swsetup_r+0x8e>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e7f7      	b.n	8008ea8 <__swsetup_r+0x98>
 8008eb8:	200000e8 	.word	0x200000e8

08008ebc <_raise_r>:
 8008ebc:	291f      	cmp	r1, #31
 8008ebe:	b538      	push	{r3, r4, r5, lr}
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	d904      	bls.n	8008ed0 <_raise_r+0x14>
 8008ec6:	2316      	movs	r3, #22
 8008ec8:	6003      	str	r3, [r0, #0]
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ed2:	b112      	cbz	r2, 8008eda <_raise_r+0x1e>
 8008ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ed8:	b94b      	cbnz	r3, 8008eee <_raise_r+0x32>
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f830 	bl	8008f40 <_getpid_r>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eea:	f000 b817 	b.w	8008f1c <_kill_r>
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d00a      	beq.n	8008f08 <_raise_r+0x4c>
 8008ef2:	1c59      	adds	r1, r3, #1
 8008ef4:	d103      	bne.n	8008efe <_raise_r+0x42>
 8008ef6:	2316      	movs	r3, #22
 8008ef8:	6003      	str	r3, [r0, #0]
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7e7      	b.n	8008ece <_raise_r+0x12>
 8008efe:	2100      	movs	r1, #0
 8008f00:	4620      	mov	r0, r4
 8008f02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f06:	4798      	blx	r3
 8008f08:	2000      	movs	r0, #0
 8008f0a:	e7e0      	b.n	8008ece <_raise_r+0x12>

08008f0c <raise>:
 8008f0c:	4b02      	ldr	r3, [pc, #8]	@ (8008f18 <raise+0xc>)
 8008f0e:	4601      	mov	r1, r0
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	f7ff bfd3 	b.w	8008ebc <_raise_r>
 8008f16:	bf00      	nop
 8008f18:	200000e8 	.word	0x200000e8

08008f1c <_kill_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4d06      	ldr	r5, [pc, #24]	@ (8008f3c <_kill_r+0x20>)
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	4611      	mov	r1, r2
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	f7fa fb06 	bl	800353a <_kill>
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	d102      	bne.n	8008f38 <_kill_r+0x1c>
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	b103      	cbz	r3, 8008f38 <_kill_r+0x1c>
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000904 	.word	0x20000904

08008f40 <_getpid_r>:
 8008f40:	f7fa baf4 	b.w	800352c <_getpid>

08008f44 <__swhatbuf_r>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	460c      	mov	r4, r1
 8008f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4c:	4615      	mov	r5, r2
 8008f4e:	2900      	cmp	r1, #0
 8008f50:	461e      	mov	r6, r3
 8008f52:	b096      	sub	sp, #88	@ 0x58
 8008f54:	da0c      	bge.n	8008f70 <__swhatbuf_r+0x2c>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f5e:	bf14      	ite	ne
 8008f60:	2340      	movne	r3, #64	@ 0x40
 8008f62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f66:	2000      	movs	r0, #0
 8008f68:	6031      	str	r1, [r6, #0]
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	b016      	add	sp, #88	@ 0x58
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	466a      	mov	r2, sp
 8008f72:	f000 f849 	bl	8009008 <_fstat_r>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	dbed      	blt.n	8008f56 <__swhatbuf_r+0x12>
 8008f7a:	9901      	ldr	r1, [sp, #4]
 8008f7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f84:	4259      	negs	r1, r3
 8008f86:	4159      	adcs	r1, r3
 8008f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f8c:	e7eb      	b.n	8008f66 <__swhatbuf_r+0x22>

08008f8e <__smakebuf_r>:
 8008f8e:	898b      	ldrh	r3, [r1, #12]
 8008f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f92:	079d      	lsls	r5, r3, #30
 8008f94:	4606      	mov	r6, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	d507      	bpl.n	8008faa <__smakebuf_r+0x1c>
 8008f9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	6123      	str	r3, [r4, #16]
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	6163      	str	r3, [r4, #20]
 8008fa6:	b003      	add	sp, #12
 8008fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008faa:	466a      	mov	r2, sp
 8008fac:	ab01      	add	r3, sp, #4
 8008fae:	f7ff ffc9 	bl	8008f44 <__swhatbuf_r>
 8008fb2:	9f00      	ldr	r7, [sp, #0]
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7fe fedb 	bl	8007d74 <_malloc_r>
 8008fbe:	b948      	cbnz	r0, 8008fd4 <__smakebuf_r+0x46>
 8008fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc4:	059a      	lsls	r2, r3, #22
 8008fc6:	d4ee      	bmi.n	8008fa6 <__smakebuf_r+0x18>
 8008fc8:	f023 0303 	bic.w	r3, r3, #3
 8008fcc:	f043 0302 	orr.w	r3, r3, #2
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	e7e2      	b.n	8008f9a <__smakebuf_r+0xc>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	6020      	str	r0, [r4, #0]
 8008fe4:	b15b      	cbz	r3, 8008ffe <__smakebuf_r+0x70>
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fec:	f000 f81e 	bl	800902c <_isatty_r>
 8008ff0:	b128      	cbz	r0, 8008ffe <__smakebuf_r+0x70>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f023 0303 	bic.w	r3, r3, #3
 8008ff8:	f043 0301 	orr.w	r3, r3, #1
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	431d      	orrs	r5, r3
 8009002:	81a5      	strh	r5, [r4, #12]
 8009004:	e7cf      	b.n	8008fa6 <__smakebuf_r+0x18>
	...

08009008 <_fstat_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	2300      	movs	r3, #0
 800900c:	4d06      	ldr	r5, [pc, #24]	@ (8009028 <_fstat_r+0x20>)
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	4611      	mov	r1, r2
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f7fa faef 	bl	80035f8 <_fstat>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d102      	bne.n	8009024 <_fstat_r+0x1c>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	b103      	cbz	r3, 8009024 <_fstat_r+0x1c>
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	20000904 	.word	0x20000904

0800902c <_isatty_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	2300      	movs	r3, #0
 8009030:	4d05      	ldr	r5, [pc, #20]	@ (8009048 <_isatty_r+0x1c>)
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7fa faed 	bl	8003616 <_isatty>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_isatty_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_isatty_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	20000904 	.word	0x20000904

0800904c <expf>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4605      	mov	r5, r0
 8009050:	f000 f9d6 	bl	8009400 <__ieee754_expf>
 8009054:	4604      	mov	r4, r0
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f890 	bl	800917c <finitef>
 800905c:	b150      	cbz	r0, 8009074 <expf+0x28>
 800905e:	4628      	mov	r0, r5
 8009060:	490b      	ldr	r1, [pc, #44]	@ (8009090 <expf+0x44>)
 8009062:	f7f8 f84b 	bl	80010fc <__aeabi_fcmpgt>
 8009066:	b138      	cbz	r0, 8009078 <expf+0x2c>
 8009068:	f7fd ff68 	bl	8006f3c <__errno>
 800906c:	2322      	movs	r3, #34	@ 0x22
 800906e:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 8009072:	6003      	str	r3, [r0, #0]
 8009074:	4620      	mov	r0, r4
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	4628      	mov	r0, r5
 800907a:	4906      	ldr	r1, [pc, #24]	@ (8009094 <expf+0x48>)
 800907c:	f7f8 f820 	bl	80010c0 <__aeabi_fcmplt>
 8009080:	2800      	cmp	r0, #0
 8009082:	d0f7      	beq.n	8009074 <expf+0x28>
 8009084:	f7fd ff5a 	bl	8006f3c <__errno>
 8009088:	2322      	movs	r3, #34	@ 0x22
 800908a:	2400      	movs	r4, #0
 800908c:	6003      	str	r3, [r0, #0]
 800908e:	e7f1      	b.n	8009074 <expf+0x28>
 8009090:	42b17217 	.word	0x42b17217
 8009094:	c2cff1b5 	.word	0xc2cff1b5

08009098 <cosf>:
 8009098:	b507      	push	{r0, r1, r2, lr}
 800909a:	4a1a      	ldr	r2, [pc, #104]	@ (8009104 <cosf+0x6c>)
 800909c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80090a0:	4293      	cmp	r3, r2
 80090a2:	4601      	mov	r1, r0
 80090a4:	d805      	bhi.n	80090b2 <cosf+0x1a>
 80090a6:	2100      	movs	r1, #0
 80090a8:	b003      	add	sp, #12
 80090aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ae:	f000 b8b1 	b.w	8009214 <__kernel_cosf>
 80090b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80090b6:	d304      	bcc.n	80090c2 <cosf+0x2a>
 80090b8:	f7f7 fd5a 	bl	8000b70 <__aeabi_fsub>
 80090bc:	b003      	add	sp, #12
 80090be:	f85d fb04 	ldr.w	pc, [sp], #4
 80090c2:	4669      	mov	r1, sp
 80090c4:	f000 fa94 	bl	80095f0 <__ieee754_rem_pio2f>
 80090c8:	f000 0203 	and.w	r2, r0, #3
 80090cc:	2a01      	cmp	r2, #1
 80090ce:	d007      	beq.n	80090e0 <cosf+0x48>
 80090d0:	2a02      	cmp	r2, #2
 80090d2:	d00c      	beq.n	80090ee <cosf+0x56>
 80090d4:	b982      	cbnz	r2, 80090f8 <cosf+0x60>
 80090d6:	9901      	ldr	r1, [sp, #4]
 80090d8:	9800      	ldr	r0, [sp, #0]
 80090da:	f000 f89b 	bl	8009214 <__kernel_cosf>
 80090de:	e7ed      	b.n	80090bc <cosf+0x24>
 80090e0:	9901      	ldr	r1, [sp, #4]
 80090e2:	9800      	ldr	r0, [sp, #0]
 80090e4:	f000 f916 	bl	8009314 <__kernel_sinf>
 80090e8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80090ec:	e7e6      	b.n	80090bc <cosf+0x24>
 80090ee:	9901      	ldr	r1, [sp, #4]
 80090f0:	9800      	ldr	r0, [sp, #0]
 80090f2:	f000 f88f 	bl	8009214 <__kernel_cosf>
 80090f6:	e7f7      	b.n	80090e8 <cosf+0x50>
 80090f8:	2201      	movs	r2, #1
 80090fa:	9901      	ldr	r1, [sp, #4]
 80090fc:	9800      	ldr	r0, [sp, #0]
 80090fe:	f000 f909 	bl	8009314 <__kernel_sinf>
 8009102:	e7db      	b.n	80090bc <cosf+0x24>
 8009104:	3f490fd8 	.word	0x3f490fd8

08009108 <sinf>:
 8009108:	b507      	push	{r0, r1, r2, lr}
 800910a:	4a1b      	ldr	r2, [pc, #108]	@ (8009178 <sinf+0x70>)
 800910c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009110:	4293      	cmp	r3, r2
 8009112:	4601      	mov	r1, r0
 8009114:	d806      	bhi.n	8009124 <sinf+0x1c>
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	b003      	add	sp, #12
 800911c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009120:	f000 b8f8 	b.w	8009314 <__kernel_sinf>
 8009124:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009128:	d304      	bcc.n	8009134 <sinf+0x2c>
 800912a:	f7f7 fd21 	bl	8000b70 <__aeabi_fsub>
 800912e:	b003      	add	sp, #12
 8009130:	f85d fb04 	ldr.w	pc, [sp], #4
 8009134:	4669      	mov	r1, sp
 8009136:	f000 fa5b 	bl	80095f0 <__ieee754_rem_pio2f>
 800913a:	f000 0003 	and.w	r0, r0, #3
 800913e:	2801      	cmp	r0, #1
 8009140:	d008      	beq.n	8009154 <sinf+0x4c>
 8009142:	2802      	cmp	r0, #2
 8009144:	d00b      	beq.n	800915e <sinf+0x56>
 8009146:	b990      	cbnz	r0, 800916e <sinf+0x66>
 8009148:	2201      	movs	r2, #1
 800914a:	9901      	ldr	r1, [sp, #4]
 800914c:	9800      	ldr	r0, [sp, #0]
 800914e:	f000 f8e1 	bl	8009314 <__kernel_sinf>
 8009152:	e7ec      	b.n	800912e <sinf+0x26>
 8009154:	9901      	ldr	r1, [sp, #4]
 8009156:	9800      	ldr	r0, [sp, #0]
 8009158:	f000 f85c 	bl	8009214 <__kernel_cosf>
 800915c:	e7e7      	b.n	800912e <sinf+0x26>
 800915e:	2201      	movs	r2, #1
 8009160:	9901      	ldr	r1, [sp, #4]
 8009162:	9800      	ldr	r0, [sp, #0]
 8009164:	f000 f8d6 	bl	8009314 <__kernel_sinf>
 8009168:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800916c:	e7df      	b.n	800912e <sinf+0x26>
 800916e:	9901      	ldr	r1, [sp, #4]
 8009170:	9800      	ldr	r0, [sp, #0]
 8009172:	f000 f84f 	bl	8009214 <__kernel_cosf>
 8009176:	e7f7      	b.n	8009168 <sinf+0x60>
 8009178:	3f490fd8 	.word	0x3f490fd8

0800917c <finitef>:
 800917c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009180:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009184:	bfac      	ite	ge
 8009186:	2000      	movge	r0, #0
 8009188:	2001      	movlt	r0, #1
 800918a:	4770      	bx	lr

0800918c <fmaxf>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4604      	mov	r4, r0
 8009190:	460d      	mov	r5, r1
 8009192:	f000 f825 	bl	80091e0 <__fpclassifyf>
 8009196:	b910      	cbnz	r0, 800919e <fmaxf+0x12>
 8009198:	462c      	mov	r4, r5
 800919a:	4620      	mov	r0, r4
 800919c:	bd38      	pop	{r3, r4, r5, pc}
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 f81e 	bl	80091e0 <__fpclassifyf>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d0f8      	beq.n	800919a <fmaxf+0xe>
 80091a8:	4629      	mov	r1, r5
 80091aa:	4620      	mov	r0, r4
 80091ac:	f7f7 ffa6 	bl	80010fc <__aeabi_fcmpgt>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0f1      	beq.n	8009198 <fmaxf+0xc>
 80091b4:	e7f1      	b.n	800919a <fmaxf+0xe>

080091b6 <fminf>:
 80091b6:	b538      	push	{r3, r4, r5, lr}
 80091b8:	4604      	mov	r4, r0
 80091ba:	460d      	mov	r5, r1
 80091bc:	f000 f810 	bl	80091e0 <__fpclassifyf>
 80091c0:	b910      	cbnz	r0, 80091c8 <fminf+0x12>
 80091c2:	462c      	mov	r4, r5
 80091c4:	4620      	mov	r0, r4
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	4628      	mov	r0, r5
 80091ca:	f000 f809 	bl	80091e0 <__fpclassifyf>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d0f8      	beq.n	80091c4 <fminf+0xe>
 80091d2:	4629      	mov	r1, r5
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7f7 ff73 	bl	80010c0 <__aeabi_fcmplt>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0f1      	beq.n	80091c2 <fminf+0xc>
 80091de:	e7f1      	b.n	80091c4 <fminf+0xe>

080091e0 <__fpclassifyf>:
 80091e0:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 80091e4:	d00d      	beq.n	8009202 <__fpclassifyf+0x22>
 80091e6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80091ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80091ee:	d30a      	bcc.n	8009206 <__fpclassifyf+0x26>
 80091f0:	4b07      	ldr	r3, [pc, #28]	@ (8009210 <__fpclassifyf+0x30>)
 80091f2:	1e42      	subs	r2, r0, #1
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d908      	bls.n	800920a <__fpclassifyf+0x2a>
 80091f8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80091fc:	4258      	negs	r0, r3
 80091fe:	4158      	adcs	r0, r3
 8009200:	4770      	bx	lr
 8009202:	2002      	movs	r0, #2
 8009204:	4770      	bx	lr
 8009206:	2004      	movs	r0, #4
 8009208:	4770      	bx	lr
 800920a:	2003      	movs	r0, #3
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	007ffffe 	.word	0x007ffffe

08009214 <__kernel_cosf>:
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800921c:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8009220:	4606      	mov	r6, r0
 8009222:	4688      	mov	r8, r1
 8009224:	d203      	bcs.n	800922e <__kernel_cosf+0x1a>
 8009226:	f7f7 ff73 	bl	8001110 <__aeabi_f2iz>
 800922a:	2800      	cmp	r0, #0
 800922c:	d05c      	beq.n	80092e8 <__kernel_cosf+0xd4>
 800922e:	4631      	mov	r1, r6
 8009230:	4630      	mov	r0, r6
 8009232:	f7f7 fda7 	bl	8000d84 <__aeabi_fmul>
 8009236:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800923a:	4604      	mov	r4, r0
 800923c:	f7f7 fda2 	bl	8000d84 <__aeabi_fmul>
 8009240:	492b      	ldr	r1, [pc, #172]	@ (80092f0 <__kernel_cosf+0xdc>)
 8009242:	4607      	mov	r7, r0
 8009244:	4620      	mov	r0, r4
 8009246:	f7f7 fd9d 	bl	8000d84 <__aeabi_fmul>
 800924a:	492a      	ldr	r1, [pc, #168]	@ (80092f4 <__kernel_cosf+0xe0>)
 800924c:	f7f7 fc92 	bl	8000b74 <__addsf3>
 8009250:	4621      	mov	r1, r4
 8009252:	f7f7 fd97 	bl	8000d84 <__aeabi_fmul>
 8009256:	4928      	ldr	r1, [pc, #160]	@ (80092f8 <__kernel_cosf+0xe4>)
 8009258:	f7f7 fc8a 	bl	8000b70 <__aeabi_fsub>
 800925c:	4621      	mov	r1, r4
 800925e:	f7f7 fd91 	bl	8000d84 <__aeabi_fmul>
 8009262:	4926      	ldr	r1, [pc, #152]	@ (80092fc <__kernel_cosf+0xe8>)
 8009264:	f7f7 fc86 	bl	8000b74 <__addsf3>
 8009268:	4621      	mov	r1, r4
 800926a:	f7f7 fd8b 	bl	8000d84 <__aeabi_fmul>
 800926e:	4924      	ldr	r1, [pc, #144]	@ (8009300 <__kernel_cosf+0xec>)
 8009270:	f7f7 fc7e 	bl	8000b70 <__aeabi_fsub>
 8009274:	4621      	mov	r1, r4
 8009276:	f7f7 fd85 	bl	8000d84 <__aeabi_fmul>
 800927a:	4922      	ldr	r1, [pc, #136]	@ (8009304 <__kernel_cosf+0xf0>)
 800927c:	f7f7 fc7a 	bl	8000b74 <__addsf3>
 8009280:	4621      	mov	r1, r4
 8009282:	f7f7 fd7f 	bl	8000d84 <__aeabi_fmul>
 8009286:	4621      	mov	r1, r4
 8009288:	f7f7 fd7c 	bl	8000d84 <__aeabi_fmul>
 800928c:	4641      	mov	r1, r8
 800928e:	4604      	mov	r4, r0
 8009290:	4630      	mov	r0, r6
 8009292:	f7f7 fd77 	bl	8000d84 <__aeabi_fmul>
 8009296:	4601      	mov	r1, r0
 8009298:	4620      	mov	r0, r4
 800929a:	f7f7 fc69 	bl	8000b70 <__aeabi_fsub>
 800929e:	4b1a      	ldr	r3, [pc, #104]	@ (8009308 <__kernel_cosf+0xf4>)
 80092a0:	4604      	mov	r4, r0
 80092a2:	429d      	cmp	r5, r3
 80092a4:	d80a      	bhi.n	80092bc <__kernel_cosf+0xa8>
 80092a6:	4601      	mov	r1, r0
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7f7 fc61 	bl	8000b70 <__aeabi_fsub>
 80092ae:	4601      	mov	r1, r0
 80092b0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80092b4:	f7f7 fc5c 	bl	8000b70 <__aeabi_fsub>
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	4b13      	ldr	r3, [pc, #76]	@ (800930c <__kernel_cosf+0xf8>)
 80092be:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80092c2:	429d      	cmp	r5, r3
 80092c4:	bf8c      	ite	hi
 80092c6:	4d12      	ldrhi	r5, [pc, #72]	@ (8009310 <__kernel_cosf+0xfc>)
 80092c8:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80092cc:	4629      	mov	r1, r5
 80092ce:	f7f7 fc4f 	bl	8000b70 <__aeabi_fsub>
 80092d2:	4629      	mov	r1, r5
 80092d4:	4606      	mov	r6, r0
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7f7 fc4a 	bl	8000b70 <__aeabi_fsub>
 80092dc:	4621      	mov	r1, r4
 80092de:	f7f7 fc47 	bl	8000b70 <__aeabi_fsub>
 80092e2:	4601      	mov	r1, r0
 80092e4:	4630      	mov	r0, r6
 80092e6:	e7e5      	b.n	80092b4 <__kernel_cosf+0xa0>
 80092e8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80092ec:	e7e4      	b.n	80092b8 <__kernel_cosf+0xa4>
 80092ee:	bf00      	nop
 80092f0:	ad47d74e 	.word	0xad47d74e
 80092f4:	310f74f6 	.word	0x310f74f6
 80092f8:	3493f27c 	.word	0x3493f27c
 80092fc:	37d00d01 	.word	0x37d00d01
 8009300:	3ab60b61 	.word	0x3ab60b61
 8009304:	3d2aaaab 	.word	0x3d2aaaab
 8009308:	3e999999 	.word	0x3e999999
 800930c:	3f480000 	.word	0x3f480000
 8009310:	3e900000 	.word	0x3e900000

08009314 <__kernel_sinf>:
 8009314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009318:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800931c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009320:	4604      	mov	r4, r0
 8009322:	460f      	mov	r7, r1
 8009324:	4691      	mov	r9, r2
 8009326:	d203      	bcs.n	8009330 <__kernel_sinf+0x1c>
 8009328:	f7f7 fef2 	bl	8001110 <__aeabi_f2iz>
 800932c:	2800      	cmp	r0, #0
 800932e:	d035      	beq.n	800939c <__kernel_sinf+0x88>
 8009330:	4621      	mov	r1, r4
 8009332:	4620      	mov	r0, r4
 8009334:	f7f7 fd26 	bl	8000d84 <__aeabi_fmul>
 8009338:	4605      	mov	r5, r0
 800933a:	4601      	mov	r1, r0
 800933c:	4620      	mov	r0, r4
 800933e:	f7f7 fd21 	bl	8000d84 <__aeabi_fmul>
 8009342:	4929      	ldr	r1, [pc, #164]	@ (80093e8 <__kernel_sinf+0xd4>)
 8009344:	4606      	mov	r6, r0
 8009346:	4628      	mov	r0, r5
 8009348:	f7f7 fd1c 	bl	8000d84 <__aeabi_fmul>
 800934c:	4927      	ldr	r1, [pc, #156]	@ (80093ec <__kernel_sinf+0xd8>)
 800934e:	f7f7 fc0f 	bl	8000b70 <__aeabi_fsub>
 8009352:	4629      	mov	r1, r5
 8009354:	f7f7 fd16 	bl	8000d84 <__aeabi_fmul>
 8009358:	4925      	ldr	r1, [pc, #148]	@ (80093f0 <__kernel_sinf+0xdc>)
 800935a:	f7f7 fc0b 	bl	8000b74 <__addsf3>
 800935e:	4629      	mov	r1, r5
 8009360:	f7f7 fd10 	bl	8000d84 <__aeabi_fmul>
 8009364:	4923      	ldr	r1, [pc, #140]	@ (80093f4 <__kernel_sinf+0xe0>)
 8009366:	f7f7 fc03 	bl	8000b70 <__aeabi_fsub>
 800936a:	4629      	mov	r1, r5
 800936c:	f7f7 fd0a 	bl	8000d84 <__aeabi_fmul>
 8009370:	4921      	ldr	r1, [pc, #132]	@ (80093f8 <__kernel_sinf+0xe4>)
 8009372:	f7f7 fbff 	bl	8000b74 <__addsf3>
 8009376:	4680      	mov	r8, r0
 8009378:	f1b9 0f00 	cmp.w	r9, #0
 800937c:	d111      	bne.n	80093a2 <__kernel_sinf+0x8e>
 800937e:	4601      	mov	r1, r0
 8009380:	4628      	mov	r0, r5
 8009382:	f7f7 fcff 	bl	8000d84 <__aeabi_fmul>
 8009386:	491d      	ldr	r1, [pc, #116]	@ (80093fc <__kernel_sinf+0xe8>)
 8009388:	f7f7 fbf2 	bl	8000b70 <__aeabi_fsub>
 800938c:	4631      	mov	r1, r6
 800938e:	f7f7 fcf9 	bl	8000d84 <__aeabi_fmul>
 8009392:	4601      	mov	r1, r0
 8009394:	4620      	mov	r0, r4
 8009396:	f7f7 fbed 	bl	8000b74 <__addsf3>
 800939a:	4604      	mov	r4, r0
 800939c:	4620      	mov	r0, r4
 800939e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80093a6:	4638      	mov	r0, r7
 80093a8:	f7f7 fcec 	bl	8000d84 <__aeabi_fmul>
 80093ac:	4641      	mov	r1, r8
 80093ae:	4681      	mov	r9, r0
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7f7 fce7 	bl	8000d84 <__aeabi_fmul>
 80093b6:	4601      	mov	r1, r0
 80093b8:	4648      	mov	r0, r9
 80093ba:	f7f7 fbd9 	bl	8000b70 <__aeabi_fsub>
 80093be:	4629      	mov	r1, r5
 80093c0:	f7f7 fce0 	bl	8000d84 <__aeabi_fmul>
 80093c4:	4639      	mov	r1, r7
 80093c6:	f7f7 fbd3 	bl	8000b70 <__aeabi_fsub>
 80093ca:	490c      	ldr	r1, [pc, #48]	@ (80093fc <__kernel_sinf+0xe8>)
 80093cc:	4605      	mov	r5, r0
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7f7 fcd8 	bl	8000d84 <__aeabi_fmul>
 80093d4:	4601      	mov	r1, r0
 80093d6:	4628      	mov	r0, r5
 80093d8:	f7f7 fbcc 	bl	8000b74 <__addsf3>
 80093dc:	4601      	mov	r1, r0
 80093de:	4620      	mov	r0, r4
 80093e0:	f7f7 fbc6 	bl	8000b70 <__aeabi_fsub>
 80093e4:	e7d9      	b.n	800939a <__kernel_sinf+0x86>
 80093e6:	bf00      	nop
 80093e8:	2f2ec9d3 	.word	0x2f2ec9d3
 80093ec:	32d72f34 	.word	0x32d72f34
 80093f0:	3638ef1b 	.word	0x3638ef1b
 80093f4:	39500d01 	.word	0x39500d01
 80093f8:	3c088889 	.word	0x3c088889
 80093fc:	3e2aaaab 	.word	0x3e2aaaab

08009400 <__ieee754_expf>:
 8009400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009404:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009408:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800940c:	4604      	mov	r4, r0
 800940e:	d904      	bls.n	800941a <__ieee754_expf+0x1a>
 8009410:	4601      	mov	r1, r0
 8009412:	f7f7 fbaf 	bl	8000b74 <__addsf3>
 8009416:	4604      	mov	r4, r0
 8009418:	e005      	b.n	8009426 <__ieee754_expf+0x26>
 800941a:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800941e:	d105      	bne.n	800942c <__ieee754_expf+0x2c>
 8009420:	2e00      	cmp	r6, #0
 8009422:	f040 80c3 	bne.w	80095ac <__ieee754_expf+0x1ac>
 8009426:	4620      	mov	r0, r4
 8009428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942c:	4960      	ldr	r1, [pc, #384]	@ (80095b0 <__ieee754_expf+0x1b0>)
 800942e:	4288      	cmp	r0, r1
 8009430:	dd04      	ble.n	800943c <__ieee754_expf+0x3c>
 8009432:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009436:	2000      	movs	r0, #0
 8009438:	f000 ba5c 	b.w	80098f4 <__math_oflowf>
 800943c:	2800      	cmp	r0, #0
 800943e:	da07      	bge.n	8009450 <__ieee754_expf+0x50>
 8009440:	4a5c      	ldr	r2, [pc, #368]	@ (80095b4 <__ieee754_expf+0x1b4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d904      	bls.n	8009450 <__ieee754_expf+0x50>
 8009446:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800944a:	2000      	movs	r0, #0
 800944c:	f000 ba4e 	b.w	80098ec <__math_uflowf>
 8009450:	4a59      	ldr	r2, [pc, #356]	@ (80095b8 <__ieee754_expf+0x1b8>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d971      	bls.n	800953a <__ieee754_expf+0x13a>
 8009456:	4a59      	ldr	r2, [pc, #356]	@ (80095bc <__ieee754_expf+0x1bc>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d851      	bhi.n	8009500 <__ieee754_expf+0x100>
 800945c:	4b58      	ldr	r3, [pc, #352]	@ (80095c0 <__ieee754_expf+0x1c0>)
 800945e:	4620      	mov	r0, r4
 8009460:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009464:	f7f7 fb84 	bl	8000b70 <__aeabi_fsub>
 8009468:	4605      	mov	r5, r0
 800946a:	4b56      	ldr	r3, [pc, #344]	@ (80095c4 <__ieee754_expf+0x1c4>)
 800946c:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8009470:	f086 0301 	eor.w	r3, r6, #1
 8009474:	eba3 0806 	sub.w	r8, r3, r6
 8009478:	4639      	mov	r1, r7
 800947a:	4628      	mov	r0, r5
 800947c:	f7f7 fb78 	bl	8000b70 <__aeabi_fsub>
 8009480:	4604      	mov	r4, r0
 8009482:	4621      	mov	r1, r4
 8009484:	4620      	mov	r0, r4
 8009486:	f7f7 fc7d 	bl	8000d84 <__aeabi_fmul>
 800948a:	4606      	mov	r6, r0
 800948c:	494e      	ldr	r1, [pc, #312]	@ (80095c8 <__ieee754_expf+0x1c8>)
 800948e:	f7f7 fc79 	bl	8000d84 <__aeabi_fmul>
 8009492:	494e      	ldr	r1, [pc, #312]	@ (80095cc <__ieee754_expf+0x1cc>)
 8009494:	f7f7 fb6c 	bl	8000b70 <__aeabi_fsub>
 8009498:	4631      	mov	r1, r6
 800949a:	f7f7 fc73 	bl	8000d84 <__aeabi_fmul>
 800949e:	494c      	ldr	r1, [pc, #304]	@ (80095d0 <__ieee754_expf+0x1d0>)
 80094a0:	f7f7 fb68 	bl	8000b74 <__addsf3>
 80094a4:	4631      	mov	r1, r6
 80094a6:	f7f7 fc6d 	bl	8000d84 <__aeabi_fmul>
 80094aa:	494a      	ldr	r1, [pc, #296]	@ (80095d4 <__ieee754_expf+0x1d4>)
 80094ac:	f7f7 fb60 	bl	8000b70 <__aeabi_fsub>
 80094b0:	4631      	mov	r1, r6
 80094b2:	f7f7 fc67 	bl	8000d84 <__aeabi_fmul>
 80094b6:	4948      	ldr	r1, [pc, #288]	@ (80095d8 <__ieee754_expf+0x1d8>)
 80094b8:	f7f7 fb5c 	bl	8000b74 <__addsf3>
 80094bc:	4631      	mov	r1, r6
 80094be:	f7f7 fc61 	bl	8000d84 <__aeabi_fmul>
 80094c2:	4601      	mov	r1, r0
 80094c4:	4620      	mov	r0, r4
 80094c6:	f7f7 fb53 	bl	8000b70 <__aeabi_fsub>
 80094ca:	4601      	mov	r1, r0
 80094cc:	4606      	mov	r6, r0
 80094ce:	4620      	mov	r0, r4
 80094d0:	f7f7 fc58 	bl	8000d84 <__aeabi_fmul>
 80094d4:	4681      	mov	r9, r0
 80094d6:	f1b8 0f00 	cmp.w	r8, #0
 80094da:	d143      	bne.n	8009564 <__ieee754_expf+0x164>
 80094dc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7f7 fb45 	bl	8000b70 <__aeabi_fsub>
 80094e6:	4601      	mov	r1, r0
 80094e8:	4648      	mov	r0, r9
 80094ea:	f7f7 fcff 	bl	8000eec <__aeabi_fdiv>
 80094ee:	4621      	mov	r1, r4
 80094f0:	f7f7 fb3e 	bl	8000b70 <__aeabi_fsub>
 80094f4:	4601      	mov	r1, r0
 80094f6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80094fa:	f7f7 fb39 	bl	8000b70 <__aeabi_fsub>
 80094fe:	e78a      	b.n	8009416 <__ieee754_expf+0x16>
 8009500:	4936      	ldr	r1, [pc, #216]	@ (80095dc <__ieee754_expf+0x1dc>)
 8009502:	4620      	mov	r0, r4
 8009504:	f7f7 fc3e 	bl	8000d84 <__aeabi_fmul>
 8009508:	4b35      	ldr	r3, [pc, #212]	@ (80095e0 <__ieee754_expf+0x1e0>)
 800950a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800950e:	f7f7 fb31 	bl	8000b74 <__addsf3>
 8009512:	f7f7 fdfd 	bl	8001110 <__aeabi_f2iz>
 8009516:	4680      	mov	r8, r0
 8009518:	f7f7 fbe0 	bl	8000cdc <__aeabi_i2f>
 800951c:	4931      	ldr	r1, [pc, #196]	@ (80095e4 <__ieee754_expf+0x1e4>)
 800951e:	4606      	mov	r6, r0
 8009520:	f7f7 fc30 	bl	8000d84 <__aeabi_fmul>
 8009524:	4601      	mov	r1, r0
 8009526:	4620      	mov	r0, r4
 8009528:	f7f7 fb22 	bl	8000b70 <__aeabi_fsub>
 800952c:	492e      	ldr	r1, [pc, #184]	@ (80095e8 <__ieee754_expf+0x1e8>)
 800952e:	4605      	mov	r5, r0
 8009530:	4630      	mov	r0, r6
 8009532:	f7f7 fc27 	bl	8000d84 <__aeabi_fmul>
 8009536:	4607      	mov	r7, r0
 8009538:	e79e      	b.n	8009478 <__ieee754_expf+0x78>
 800953a:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800953e:	d20c      	bcs.n	800955a <__ieee754_expf+0x15a>
 8009540:	492a      	ldr	r1, [pc, #168]	@ (80095ec <__ieee754_expf+0x1ec>)
 8009542:	4620      	mov	r0, r4
 8009544:	f7f7 fb16 	bl	8000b74 <__addsf3>
 8009548:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800954c:	f7f7 fdd6 	bl	80010fc <__aeabi_fcmpgt>
 8009550:	b130      	cbz	r0, 8009560 <__ieee754_expf+0x160>
 8009552:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009556:	4620      	mov	r0, r4
 8009558:	e75b      	b.n	8009412 <__ieee754_expf+0x12>
 800955a:	f04f 0800 	mov.w	r8, #0
 800955e:	e790      	b.n	8009482 <__ieee754_expf+0x82>
 8009560:	4680      	mov	r8, r0
 8009562:	e78e      	b.n	8009482 <__ieee754_expf+0x82>
 8009564:	4631      	mov	r1, r6
 8009566:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800956a:	f7f7 fb01 	bl	8000b70 <__aeabi_fsub>
 800956e:	4601      	mov	r1, r0
 8009570:	4648      	mov	r0, r9
 8009572:	f7f7 fcbb 	bl	8000eec <__aeabi_fdiv>
 8009576:	4601      	mov	r1, r0
 8009578:	4638      	mov	r0, r7
 800957a:	f7f7 faf9 	bl	8000b70 <__aeabi_fsub>
 800957e:	4629      	mov	r1, r5
 8009580:	f7f7 faf6 	bl	8000b70 <__aeabi_fsub>
 8009584:	4601      	mov	r1, r0
 8009586:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800958a:	f7f7 faf1 	bl	8000b70 <__aeabi_fsub>
 800958e:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 8009592:	db02      	blt.n	800959a <__ieee754_expf+0x19a>
 8009594:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 8009598:	e745      	b.n	8009426 <__ieee754_expf+0x26>
 800959a:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800959e:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 80095a2:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 80095a6:	f7f7 fbed 	bl	8000d84 <__aeabi_fmul>
 80095aa:	e734      	b.n	8009416 <__ieee754_expf+0x16>
 80095ac:	2400      	movs	r4, #0
 80095ae:	e73a      	b.n	8009426 <__ieee754_expf+0x26>
 80095b0:	42b17217 	.word	0x42b17217
 80095b4:	42cff1b5 	.word	0x42cff1b5
 80095b8:	3eb17218 	.word	0x3eb17218
 80095bc:	3f851591 	.word	0x3f851591
 80095c0:	0800a4bc 	.word	0x0800a4bc
 80095c4:	0800a4b4 	.word	0x0800a4b4
 80095c8:	3331bb4c 	.word	0x3331bb4c
 80095cc:	35ddea0e 	.word	0x35ddea0e
 80095d0:	388ab355 	.word	0x388ab355
 80095d4:	3b360b61 	.word	0x3b360b61
 80095d8:	3e2aaaab 	.word	0x3e2aaaab
 80095dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80095e0:	0800a4c4 	.word	0x0800a4c4
 80095e4:	3f317180 	.word	0x3f317180
 80095e8:	3717f7d1 	.word	0x3717f7d1
 80095ec:	7149f2ca 	.word	0x7149f2ca

080095f0 <__ieee754_rem_pio2f>:
 80095f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f4:	4aa4      	ldr	r2, [pc, #656]	@ (8009888 <__ieee754_rem_pio2f+0x298>)
 80095f6:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80095fa:	4590      	cmp	r8, r2
 80095fc:	460c      	mov	r4, r1
 80095fe:	4682      	mov	sl, r0
 8009600:	b087      	sub	sp, #28
 8009602:	d804      	bhi.n	800960e <__ieee754_rem_pio2f+0x1e>
 8009604:	2300      	movs	r3, #0
 8009606:	6008      	str	r0, [r1, #0]
 8009608:	604b      	str	r3, [r1, #4]
 800960a:	2500      	movs	r5, #0
 800960c:	e01d      	b.n	800964a <__ieee754_rem_pio2f+0x5a>
 800960e:	4a9f      	ldr	r2, [pc, #636]	@ (800988c <__ieee754_rem_pio2f+0x29c>)
 8009610:	4590      	cmp	r8, r2
 8009612:	d84f      	bhi.n	80096b4 <__ieee754_rem_pio2f+0xc4>
 8009614:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8009618:	2800      	cmp	r0, #0
 800961a:	499d      	ldr	r1, [pc, #628]	@ (8009890 <__ieee754_rem_pio2f+0x2a0>)
 800961c:	4f9d      	ldr	r7, [pc, #628]	@ (8009894 <__ieee754_rem_pio2f+0x2a4>)
 800961e:	f025 050f 	bic.w	r5, r5, #15
 8009622:	dd24      	ble.n	800966e <__ieee754_rem_pio2f+0x7e>
 8009624:	f7f7 faa4 	bl	8000b70 <__aeabi_fsub>
 8009628:	42bd      	cmp	r5, r7
 800962a:	4606      	mov	r6, r0
 800962c:	d011      	beq.n	8009652 <__ieee754_rem_pio2f+0x62>
 800962e:	499a      	ldr	r1, [pc, #616]	@ (8009898 <__ieee754_rem_pio2f+0x2a8>)
 8009630:	f7f7 fa9e 	bl	8000b70 <__aeabi_fsub>
 8009634:	4601      	mov	r1, r0
 8009636:	4605      	mov	r5, r0
 8009638:	4630      	mov	r0, r6
 800963a:	f7f7 fa99 	bl	8000b70 <__aeabi_fsub>
 800963e:	4996      	ldr	r1, [pc, #600]	@ (8009898 <__ieee754_rem_pio2f+0x2a8>)
 8009640:	f7f7 fa96 	bl	8000b70 <__aeabi_fsub>
 8009644:	6025      	str	r5, [r4, #0]
 8009646:	2501      	movs	r5, #1
 8009648:	6060      	str	r0, [r4, #4]
 800964a:	4628      	mov	r0, r5
 800964c:	b007      	add	sp, #28
 800964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009652:	4992      	ldr	r1, [pc, #584]	@ (800989c <__ieee754_rem_pio2f+0x2ac>)
 8009654:	f7f7 fa8c 	bl	8000b70 <__aeabi_fsub>
 8009658:	4991      	ldr	r1, [pc, #580]	@ (80098a0 <__ieee754_rem_pio2f+0x2b0>)
 800965a:	4606      	mov	r6, r0
 800965c:	f7f7 fa88 	bl	8000b70 <__aeabi_fsub>
 8009660:	4601      	mov	r1, r0
 8009662:	4605      	mov	r5, r0
 8009664:	4630      	mov	r0, r6
 8009666:	f7f7 fa83 	bl	8000b70 <__aeabi_fsub>
 800966a:	498d      	ldr	r1, [pc, #564]	@ (80098a0 <__ieee754_rem_pio2f+0x2b0>)
 800966c:	e7e8      	b.n	8009640 <__ieee754_rem_pio2f+0x50>
 800966e:	f7f7 fa81 	bl	8000b74 <__addsf3>
 8009672:	42bd      	cmp	r5, r7
 8009674:	4606      	mov	r6, r0
 8009676:	d00f      	beq.n	8009698 <__ieee754_rem_pio2f+0xa8>
 8009678:	4987      	ldr	r1, [pc, #540]	@ (8009898 <__ieee754_rem_pio2f+0x2a8>)
 800967a:	f7f7 fa7b 	bl	8000b74 <__addsf3>
 800967e:	4601      	mov	r1, r0
 8009680:	4605      	mov	r5, r0
 8009682:	4630      	mov	r0, r6
 8009684:	f7f7 fa74 	bl	8000b70 <__aeabi_fsub>
 8009688:	4983      	ldr	r1, [pc, #524]	@ (8009898 <__ieee754_rem_pio2f+0x2a8>)
 800968a:	f7f7 fa73 	bl	8000b74 <__addsf3>
 800968e:	6025      	str	r5, [r4, #0]
 8009690:	6060      	str	r0, [r4, #4]
 8009692:	f04f 35ff 	mov.w	r5, #4294967295
 8009696:	e7d8      	b.n	800964a <__ieee754_rem_pio2f+0x5a>
 8009698:	4980      	ldr	r1, [pc, #512]	@ (800989c <__ieee754_rem_pio2f+0x2ac>)
 800969a:	f7f7 fa6b 	bl	8000b74 <__addsf3>
 800969e:	4980      	ldr	r1, [pc, #512]	@ (80098a0 <__ieee754_rem_pio2f+0x2b0>)
 80096a0:	4606      	mov	r6, r0
 80096a2:	f7f7 fa67 	bl	8000b74 <__addsf3>
 80096a6:	4601      	mov	r1, r0
 80096a8:	4605      	mov	r5, r0
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7f7 fa60 	bl	8000b70 <__aeabi_fsub>
 80096b0:	497b      	ldr	r1, [pc, #492]	@ (80098a0 <__ieee754_rem_pio2f+0x2b0>)
 80096b2:	e7ea      	b.n	800968a <__ieee754_rem_pio2f+0x9a>
 80096b4:	4a7b      	ldr	r2, [pc, #492]	@ (80098a4 <__ieee754_rem_pio2f+0x2b4>)
 80096b6:	4590      	cmp	r8, r2
 80096b8:	f200 8095 	bhi.w	80097e6 <__ieee754_rem_pio2f+0x1f6>
 80096bc:	f000 f8fe 	bl	80098bc <fabsf>
 80096c0:	4979      	ldr	r1, [pc, #484]	@ (80098a8 <__ieee754_rem_pio2f+0x2b8>)
 80096c2:	4606      	mov	r6, r0
 80096c4:	f7f7 fb5e 	bl	8000d84 <__aeabi_fmul>
 80096c8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80096cc:	f7f7 fa52 	bl	8000b74 <__addsf3>
 80096d0:	f7f7 fd1e 	bl	8001110 <__aeabi_f2iz>
 80096d4:	4605      	mov	r5, r0
 80096d6:	f7f7 fb01 	bl	8000cdc <__aeabi_i2f>
 80096da:	496d      	ldr	r1, [pc, #436]	@ (8009890 <__ieee754_rem_pio2f+0x2a0>)
 80096dc:	4681      	mov	r9, r0
 80096de:	f7f7 fb51 	bl	8000d84 <__aeabi_fmul>
 80096e2:	4601      	mov	r1, r0
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7f7 fa43 	bl	8000b70 <__aeabi_fsub>
 80096ea:	496b      	ldr	r1, [pc, #428]	@ (8009898 <__ieee754_rem_pio2f+0x2a8>)
 80096ec:	4607      	mov	r7, r0
 80096ee:	4648      	mov	r0, r9
 80096f0:	f7f7 fb48 	bl	8000d84 <__aeabi_fmul>
 80096f4:	2d1f      	cmp	r5, #31
 80096f6:	4606      	mov	r6, r0
 80096f8:	dc0e      	bgt.n	8009718 <__ieee754_rem_pio2f+0x128>
 80096fa:	4a6c      	ldr	r2, [pc, #432]	@ (80098ac <__ieee754_rem_pio2f+0x2bc>)
 80096fc:	1e69      	subs	r1, r5, #1
 80096fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009702:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8009706:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800970a:	4293      	cmp	r3, r2
 800970c:	d004      	beq.n	8009718 <__ieee754_rem_pio2f+0x128>
 800970e:	4631      	mov	r1, r6
 8009710:	4638      	mov	r0, r7
 8009712:	f7f7 fa2d 	bl	8000b70 <__aeabi_fsub>
 8009716:	e00b      	b.n	8009730 <__ieee754_rem_pio2f+0x140>
 8009718:	4631      	mov	r1, r6
 800971a:	4638      	mov	r0, r7
 800971c:	f7f7 fa28 	bl	8000b70 <__aeabi_fsub>
 8009720:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009724:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8009728:	2b08      	cmp	r3, #8
 800972a:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800972e:	dc01      	bgt.n	8009734 <__ieee754_rem_pio2f+0x144>
 8009730:	6020      	str	r0, [r4, #0]
 8009732:	e026      	b.n	8009782 <__ieee754_rem_pio2f+0x192>
 8009734:	4959      	ldr	r1, [pc, #356]	@ (800989c <__ieee754_rem_pio2f+0x2ac>)
 8009736:	4648      	mov	r0, r9
 8009738:	f7f7 fb24 	bl	8000d84 <__aeabi_fmul>
 800973c:	4606      	mov	r6, r0
 800973e:	4601      	mov	r1, r0
 8009740:	4638      	mov	r0, r7
 8009742:	f7f7 fa15 	bl	8000b70 <__aeabi_fsub>
 8009746:	4601      	mov	r1, r0
 8009748:	4680      	mov	r8, r0
 800974a:	4638      	mov	r0, r7
 800974c:	f7f7 fa10 	bl	8000b70 <__aeabi_fsub>
 8009750:	4631      	mov	r1, r6
 8009752:	f7f7 fa0d 	bl	8000b70 <__aeabi_fsub>
 8009756:	4606      	mov	r6, r0
 8009758:	4951      	ldr	r1, [pc, #324]	@ (80098a0 <__ieee754_rem_pio2f+0x2b0>)
 800975a:	4648      	mov	r0, r9
 800975c:	f7f7 fb12 	bl	8000d84 <__aeabi_fmul>
 8009760:	4631      	mov	r1, r6
 8009762:	f7f7 fa05 	bl	8000b70 <__aeabi_fsub>
 8009766:	4601      	mov	r1, r0
 8009768:	4606      	mov	r6, r0
 800976a:	4640      	mov	r0, r8
 800976c:	f7f7 fa00 	bl	8000b70 <__aeabi_fsub>
 8009770:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009774:	ebab 0b03 	sub.w	fp, fp, r3
 8009778:	f1bb 0f19 	cmp.w	fp, #25
 800977c:	dc18      	bgt.n	80097b0 <__ieee754_rem_pio2f+0x1c0>
 800977e:	4647      	mov	r7, r8
 8009780:	6020      	str	r0, [r4, #0]
 8009782:	f8d4 8000 	ldr.w	r8, [r4]
 8009786:	4638      	mov	r0, r7
 8009788:	4641      	mov	r1, r8
 800978a:	f7f7 f9f1 	bl	8000b70 <__aeabi_fsub>
 800978e:	4631      	mov	r1, r6
 8009790:	f7f7 f9ee 	bl	8000b70 <__aeabi_fsub>
 8009794:	f1ba 0f00 	cmp.w	sl, #0
 8009798:	6060      	str	r0, [r4, #4]
 800979a:	f6bf af56 	bge.w	800964a <__ieee754_rem_pio2f+0x5a>
 800979e:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80097a2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80097a6:	f8c4 8000 	str.w	r8, [r4]
 80097aa:	6060      	str	r0, [r4, #4]
 80097ac:	426d      	negs	r5, r5
 80097ae:	e74c      	b.n	800964a <__ieee754_rem_pio2f+0x5a>
 80097b0:	493f      	ldr	r1, [pc, #252]	@ (80098b0 <__ieee754_rem_pio2f+0x2c0>)
 80097b2:	4648      	mov	r0, r9
 80097b4:	f7f7 fae6 	bl	8000d84 <__aeabi_fmul>
 80097b8:	4606      	mov	r6, r0
 80097ba:	4601      	mov	r1, r0
 80097bc:	4640      	mov	r0, r8
 80097be:	f7f7 f9d7 	bl	8000b70 <__aeabi_fsub>
 80097c2:	4601      	mov	r1, r0
 80097c4:	4607      	mov	r7, r0
 80097c6:	4640      	mov	r0, r8
 80097c8:	f7f7 f9d2 	bl	8000b70 <__aeabi_fsub>
 80097cc:	4631      	mov	r1, r6
 80097ce:	f7f7 f9cf 	bl	8000b70 <__aeabi_fsub>
 80097d2:	4606      	mov	r6, r0
 80097d4:	4937      	ldr	r1, [pc, #220]	@ (80098b4 <__ieee754_rem_pio2f+0x2c4>)
 80097d6:	4648      	mov	r0, r9
 80097d8:	f7f7 fad4 	bl	8000d84 <__aeabi_fmul>
 80097dc:	4631      	mov	r1, r6
 80097de:	f7f7 f9c7 	bl	8000b70 <__aeabi_fsub>
 80097e2:	4606      	mov	r6, r0
 80097e4:	e793      	b.n	800970e <__ieee754_rem_pio2f+0x11e>
 80097e6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80097ea:	d305      	bcc.n	80097f8 <__ieee754_rem_pio2f+0x208>
 80097ec:	4601      	mov	r1, r0
 80097ee:	f7f7 f9bf 	bl	8000b70 <__aeabi_fsub>
 80097f2:	6060      	str	r0, [r4, #4]
 80097f4:	6020      	str	r0, [r4, #0]
 80097f6:	e708      	b.n	800960a <__ieee754_rem_pio2f+0x1a>
 80097f8:	ea4f 56e8 	mov.w	r6, r8, asr #23
 80097fc:	3e86      	subs	r6, #134	@ 0x86
 80097fe:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8009802:	4640      	mov	r0, r8
 8009804:	f7f7 fc84 	bl	8001110 <__aeabi_f2iz>
 8009808:	f7f7 fa68 	bl	8000cdc <__aeabi_i2f>
 800980c:	4601      	mov	r1, r0
 800980e:	9003      	str	r0, [sp, #12]
 8009810:	4640      	mov	r0, r8
 8009812:	f7f7 f9ad 	bl	8000b70 <__aeabi_fsub>
 8009816:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800981a:	f7f7 fab3 	bl	8000d84 <__aeabi_fmul>
 800981e:	4607      	mov	r7, r0
 8009820:	f7f7 fc76 	bl	8001110 <__aeabi_f2iz>
 8009824:	f7f7 fa5a 	bl	8000cdc <__aeabi_i2f>
 8009828:	4601      	mov	r1, r0
 800982a:	9004      	str	r0, [sp, #16]
 800982c:	4605      	mov	r5, r0
 800982e:	4638      	mov	r0, r7
 8009830:	f7f7 f99e 	bl	8000b70 <__aeabi_fsub>
 8009834:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009838:	f7f7 faa4 	bl	8000d84 <__aeabi_fmul>
 800983c:	2100      	movs	r1, #0
 800983e:	9005      	str	r0, [sp, #20]
 8009840:	f7f7 fc34 	bl	80010ac <__aeabi_fcmpeq>
 8009844:	b1f0      	cbz	r0, 8009884 <__ieee754_rem_pio2f+0x294>
 8009846:	2100      	movs	r1, #0
 8009848:	4628      	mov	r0, r5
 800984a:	f7f7 fc2f 	bl	80010ac <__aeabi_fcmpeq>
 800984e:	2800      	cmp	r0, #0
 8009850:	bf14      	ite	ne
 8009852:	2301      	movne	r3, #1
 8009854:	2302      	moveq	r3, #2
 8009856:	4a18      	ldr	r2, [pc, #96]	@ (80098b8 <__ieee754_rem_pio2f+0x2c8>)
 8009858:	4621      	mov	r1, r4
 800985a:	9201      	str	r2, [sp, #4]
 800985c:	2202      	movs	r2, #2
 800985e:	a803      	add	r0, sp, #12
 8009860:	9200      	str	r2, [sp, #0]
 8009862:	4632      	mov	r2, r6
 8009864:	f000 f84a 	bl	80098fc <__kernel_rem_pio2f>
 8009868:	f1ba 0f00 	cmp.w	sl, #0
 800986c:	4605      	mov	r5, r0
 800986e:	f6bf aeec 	bge.w	800964a <__ieee754_rem_pio2f+0x5a>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	e793      	b.n	80097ac <__ieee754_rem_pio2f+0x1bc>
 8009884:	2303      	movs	r3, #3
 8009886:	e7e6      	b.n	8009856 <__ieee754_rem_pio2f+0x266>
 8009888:	3f490fd8 	.word	0x3f490fd8
 800988c:	4016cbe3 	.word	0x4016cbe3
 8009890:	3fc90f80 	.word	0x3fc90f80
 8009894:	3fc90fd0 	.word	0x3fc90fd0
 8009898:	37354443 	.word	0x37354443
 800989c:	37354400 	.word	0x37354400
 80098a0:	2e85a308 	.word	0x2e85a308
 80098a4:	43490f80 	.word	0x43490f80
 80098a8:	3f22f984 	.word	0x3f22f984
 80098ac:	0800a4cc 	.word	0x0800a4cc
 80098b0:	2e85a300 	.word	0x2e85a300
 80098b4:	248d3132 	.word	0x248d3132
 80098b8:	0800a54c 	.word	0x0800a54c

080098bc <fabsf>:
 80098bc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80098c0:	4770      	bx	lr

080098c2 <with_errnof>:
 80098c2:	b538      	push	{r3, r4, r5, lr}
 80098c4:	4604      	mov	r4, r0
 80098c6:	460d      	mov	r5, r1
 80098c8:	f7fd fb38 	bl	8006f3c <__errno>
 80098cc:	6005      	str	r5, [r0, #0]
 80098ce:	4620      	mov	r0, r4
 80098d0:	bd38      	pop	{r3, r4, r5, pc}

080098d2 <xflowf>:
 80098d2:	b508      	push	{r3, lr}
 80098d4:	b140      	cbz	r0, 80098e8 <xflowf+0x16>
 80098d6:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80098da:	f7f7 fa53 	bl	8000d84 <__aeabi_fmul>
 80098de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80098e2:	2122      	movs	r1, #34	@ 0x22
 80098e4:	f7ff bfed 	b.w	80098c2 <with_errnof>
 80098e8:	4608      	mov	r0, r1
 80098ea:	e7f6      	b.n	80098da <xflowf+0x8>

080098ec <__math_uflowf>:
 80098ec:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80098f0:	f7ff bfef 	b.w	80098d2 <xflowf>

080098f4 <__math_oflowf>:
 80098f4:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80098f8:	f7ff bfeb 	b.w	80098d2 <xflowf>

080098fc <__kernel_rem_pio2f>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	b0db      	sub	sp, #364	@ 0x16c
 8009902:	9202      	str	r2, [sp, #8]
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8009908:	4bac      	ldr	r3, [pc, #688]	@ (8009bbc <__kernel_rem_pio2f+0x2c0>)
 800990a:	9005      	str	r0, [sp, #20]
 800990c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009910:	9100      	str	r1, [sp, #0]
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	9b04      	ldr	r3, [sp, #16]
 8009916:	3b01      	subs	r3, #1
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	1d1a      	adds	r2, r3, #4
 800991e:	f2c0 8099 	blt.w	8009a54 <__kernel_rem_pio2f+0x158>
 8009922:	1edc      	subs	r4, r3, #3
 8009924:	bf48      	it	mi
 8009926:	1d1c      	addmi	r4, r3, #4
 8009928:	10e4      	asrs	r4, r4, #3
 800992a:	2500      	movs	r5, #0
 800992c:	f04f 0b00 	mov.w	fp, #0
 8009930:	1c67      	adds	r7, r4, #1
 8009932:	00fb      	lsls	r3, r7, #3
 8009934:	9306      	str	r3, [sp, #24]
 8009936:	9b02      	ldr	r3, [sp, #8]
 8009938:	9a03      	ldr	r2, [sp, #12]
 800993a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	eba4 0802 	sub.w	r8, r4, r2
 8009944:	eb03 0902 	add.w	r9, r3, r2
 8009948:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800994a:	ae1e      	add	r6, sp, #120	@ 0x78
 800994c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8009950:	454d      	cmp	r5, r9
 8009952:	f340 8081 	ble.w	8009a58 <__kernel_rem_pio2f+0x15c>
 8009956:	9a04      	ldr	r2, [sp, #16]
 8009958:	ab1e      	add	r3, sp, #120	@ 0x78
 800995a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800995e:	f04f 0900 	mov.w	r9, #0
 8009962:	2300      	movs	r3, #0
 8009964:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8009968:	9a01      	ldr	r2, [sp, #4]
 800996a:	4591      	cmp	r9, r2
 800996c:	f340 809a 	ble.w	8009aa4 <__kernel_rem_pio2f+0x1a8>
 8009970:	4613      	mov	r3, r2
 8009972:	aa0a      	add	r2, sp, #40	@ 0x28
 8009974:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009978:	9308      	str	r3, [sp, #32]
 800997a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800997c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009980:	9c01      	ldr	r4, [sp, #4]
 8009982:	9307      	str	r3, [sp, #28]
 8009984:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8009988:	4646      	mov	r6, r8
 800998a:	4625      	mov	r5, r4
 800998c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8009990:	ab5a      	add	r3, sp, #360	@ 0x168
 8009992:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009996:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800999a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800999e:	2d00      	cmp	r5, #0
 80099a0:	f300 8085 	bgt.w	8009aae <__kernel_rem_pio2f+0x1b2>
 80099a4:	4639      	mov	r1, r7
 80099a6:	4658      	mov	r0, fp
 80099a8:	f000 fa46 	bl	8009e38 <scalbnf>
 80099ac:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80099b0:	4605      	mov	r5, r0
 80099b2:	f7f7 f9e7 	bl	8000d84 <__aeabi_fmul>
 80099b6:	f000 fa8b 	bl	8009ed0 <floorf>
 80099ba:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80099be:	f7f7 f9e1 	bl	8000d84 <__aeabi_fmul>
 80099c2:	4601      	mov	r1, r0
 80099c4:	4628      	mov	r0, r5
 80099c6:	f7f7 f8d3 	bl	8000b70 <__aeabi_fsub>
 80099ca:	4605      	mov	r5, r0
 80099cc:	f7f7 fba0 	bl	8001110 <__aeabi_f2iz>
 80099d0:	4606      	mov	r6, r0
 80099d2:	f7f7 f983 	bl	8000cdc <__aeabi_i2f>
 80099d6:	4601      	mov	r1, r0
 80099d8:	4628      	mov	r0, r5
 80099da:	f7f7 f8c9 	bl	8000b70 <__aeabi_fsub>
 80099de:	2f00      	cmp	r7, #0
 80099e0:	4681      	mov	r9, r0
 80099e2:	f340 8081 	ble.w	8009ae8 <__kernel_rem_pio2f+0x1ec>
 80099e6:	1e62      	subs	r2, r4, #1
 80099e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80099ea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80099ee:	f1c7 0108 	rsb	r1, r7, #8
 80099f2:	fa45 f301 	asr.w	r3, r5, r1
 80099f6:	441e      	add	r6, r3
 80099f8:	408b      	lsls	r3, r1
 80099fa:	1aed      	subs	r5, r5, r3
 80099fc:	ab0a      	add	r3, sp, #40	@ 0x28
 80099fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a02:	f1c7 0307 	rsb	r3, r7, #7
 8009a06:	411d      	asrs	r5, r3
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	dd7a      	ble.n	8009b02 <__kernel_rem_pio2f+0x206>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4692      	mov	sl, r2
 8009a10:	3601      	adds	r6, #1
 8009a12:	4294      	cmp	r4, r2
 8009a14:	f300 80aa 	bgt.w	8009b6c <__kernel_rem_pio2f+0x270>
 8009a18:	2f00      	cmp	r7, #0
 8009a1a:	dd05      	ble.n	8009a28 <__kernel_rem_pio2f+0x12c>
 8009a1c:	2f01      	cmp	r7, #1
 8009a1e:	f000 80b6 	beq.w	8009b8e <__kernel_rem_pio2f+0x292>
 8009a22:	2f02      	cmp	r7, #2
 8009a24:	f000 80bd 	beq.w	8009ba2 <__kernel_rem_pio2f+0x2a6>
 8009a28:	2d02      	cmp	r5, #2
 8009a2a:	d16a      	bne.n	8009b02 <__kernel_rem_pio2f+0x206>
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009a32:	f7f7 f89d 	bl	8000b70 <__aeabi_fsub>
 8009a36:	4681      	mov	r9, r0
 8009a38:	f1ba 0f00 	cmp.w	sl, #0
 8009a3c:	d061      	beq.n	8009b02 <__kernel_rem_pio2f+0x206>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009a44:	f000 f9f8 	bl	8009e38 <scalbnf>
 8009a48:	4601      	mov	r1, r0
 8009a4a:	4648      	mov	r0, r9
 8009a4c:	f7f7 f890 	bl	8000b70 <__aeabi_fsub>
 8009a50:	4681      	mov	r9, r0
 8009a52:	e056      	b.n	8009b02 <__kernel_rem_pio2f+0x206>
 8009a54:	2400      	movs	r4, #0
 8009a56:	e768      	b.n	800992a <__kernel_rem_pio2f+0x2e>
 8009a58:	eb18 0f05 	cmn.w	r8, r5
 8009a5c:	d407      	bmi.n	8009a6e <__kernel_rem_pio2f+0x172>
 8009a5e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8009a62:	f7f7 f93b 	bl	8000cdc <__aeabi_i2f>
 8009a66:	f846 0b04 	str.w	r0, [r6], #4
 8009a6a:	3501      	adds	r5, #1
 8009a6c:	e770      	b.n	8009950 <__kernel_rem_pio2f+0x54>
 8009a6e:	4658      	mov	r0, fp
 8009a70:	e7f9      	b.n	8009a66 <__kernel_rem_pio2f+0x16a>
 8009a72:	9307      	str	r3, [sp, #28]
 8009a74:	9b05      	ldr	r3, [sp, #20]
 8009a76:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8009a7a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009a7e:	f7f7 f981 	bl	8000d84 <__aeabi_fmul>
 8009a82:	4601      	mov	r1, r0
 8009a84:	4630      	mov	r0, r6
 8009a86:	f7f7 f875 	bl	8000b74 <__addsf3>
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	9b07      	ldr	r3, [sp, #28]
 8009a8e:	f108 0801 	add.w	r8, r8, #1
 8009a92:	9a03      	ldr	r2, [sp, #12]
 8009a94:	4590      	cmp	r8, r2
 8009a96:	ddec      	ble.n	8009a72 <__kernel_rem_pio2f+0x176>
 8009a98:	f84a 6b04 	str.w	r6, [sl], #4
 8009a9c:	f109 0901 	add.w	r9, r9, #1
 8009aa0:	3504      	adds	r5, #4
 8009aa2:	e761      	b.n	8009968 <__kernel_rem_pio2f+0x6c>
 8009aa4:	46ab      	mov	fp, r5
 8009aa6:	461e      	mov	r6, r3
 8009aa8:	f04f 0800 	mov.w	r8, #0
 8009aac:	e7f1      	b.n	8009a92 <__kernel_rem_pio2f+0x196>
 8009aae:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8009ab2:	4658      	mov	r0, fp
 8009ab4:	f7f7 f966 	bl	8000d84 <__aeabi_fmul>
 8009ab8:	f7f7 fb2a 	bl	8001110 <__aeabi_f2iz>
 8009abc:	f7f7 f90e 	bl	8000cdc <__aeabi_i2f>
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	9009      	str	r0, [sp, #36]	@ 0x24
 8009ac4:	f7f7 f95e 	bl	8000d84 <__aeabi_fmul>
 8009ac8:	4601      	mov	r1, r0
 8009aca:	4658      	mov	r0, fp
 8009acc:	f7f7 f850 	bl	8000b70 <__aeabi_fsub>
 8009ad0:	f7f7 fb1e 	bl	8001110 <__aeabi_f2iz>
 8009ad4:	3d01      	subs	r5, #1
 8009ad6:	f846 0b04 	str.w	r0, [r6], #4
 8009ada:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8009ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ae0:	f7f7 f848 	bl	8000b74 <__addsf3>
 8009ae4:	4683      	mov	fp, r0
 8009ae6:	e75a      	b.n	800999e <__kernel_rem_pio2f+0xa2>
 8009ae8:	d105      	bne.n	8009af6 <__kernel_rem_pio2f+0x1fa>
 8009aea:	1e63      	subs	r3, r4, #1
 8009aec:	aa0a      	add	r2, sp, #40	@ 0x28
 8009aee:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009af2:	11ed      	asrs	r5, r5, #7
 8009af4:	e788      	b.n	8009a08 <__kernel_rem_pio2f+0x10c>
 8009af6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009afa:	f7f7 faf5 	bl	80010e8 <__aeabi_fcmpge>
 8009afe:	4605      	mov	r5, r0
 8009b00:	bb90      	cbnz	r0, 8009b68 <__kernel_rem_pio2f+0x26c>
 8009b02:	2100      	movs	r1, #0
 8009b04:	4648      	mov	r0, r9
 8009b06:	f7f7 fad1 	bl	80010ac <__aeabi_fcmpeq>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f000 8090 	beq.w	8009c30 <__kernel_rem_pio2f+0x334>
 8009b10:	2200      	movs	r2, #0
 8009b12:	1e63      	subs	r3, r4, #1
 8009b14:	9901      	ldr	r1, [sp, #4]
 8009b16:	428b      	cmp	r3, r1
 8009b18:	da4a      	bge.n	8009bb0 <__kernel_rem_pio2f+0x2b4>
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d076      	beq.n	8009c0c <__kernel_rem_pio2f+0x310>
 8009b1e:	3c01      	subs	r4, #1
 8009b20:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b22:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009b26:	3f08      	subs	r7, #8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0f8      	beq.n	8009b1e <__kernel_rem_pio2f+0x222>
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009b32:	f000 f981 	bl	8009e38 <scalbnf>
 8009b36:	46a2      	mov	sl, r4
 8009b38:	4607      	mov	r7, r0
 8009b3a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8009b3e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8009b42:	f1ba 0f00 	cmp.w	sl, #0
 8009b46:	f280 80a1 	bge.w	8009c8c <__kernel_rem_pio2f+0x390>
 8009b4a:	4627      	mov	r7, r4
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2f00      	cmp	r7, #0
 8009b50:	f2c0 80cb 	blt.w	8009cea <__kernel_rem_pio2f+0x3ee>
 8009b54:	a946      	add	r1, sp, #280	@ 0x118
 8009b56:	4690      	mov	r8, r2
 8009b58:	f04f 0a00 	mov.w	sl, #0
 8009b5c:	4b18      	ldr	r3, [pc, #96]	@ (8009bc0 <__kernel_rem_pio2f+0x2c4>)
 8009b5e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8009b62:	eba4 0907 	sub.w	r9, r4, r7
 8009b66:	e0b4      	b.n	8009cd2 <__kernel_rem_pio2f+0x3d6>
 8009b68:	2502      	movs	r5, #2
 8009b6a:	e74f      	b.n	8009a0c <__kernel_rem_pio2f+0x110>
 8009b6c:	f858 3b04 	ldr.w	r3, [r8], #4
 8009b70:	f1ba 0f00 	cmp.w	sl, #0
 8009b74:	d108      	bne.n	8009b88 <__kernel_rem_pio2f+0x28c>
 8009b76:	b123      	cbz	r3, 8009b82 <__kernel_rem_pio2f+0x286>
 8009b78:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8009b7c:	f848 3c04 	str.w	r3, [r8, #-4]
 8009b80:	2301      	movs	r3, #1
 8009b82:	469a      	mov	sl, r3
 8009b84:	3201      	adds	r2, #1
 8009b86:	e744      	b.n	8009a12 <__kernel_rem_pio2f+0x116>
 8009b88:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8009b8c:	e7f6      	b.n	8009b7c <__kernel_rem_pio2f+0x280>
 8009b8e:	1e62      	subs	r2, r4, #1
 8009b90:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9a:	a90a      	add	r1, sp, #40	@ 0x28
 8009b9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009ba0:	e742      	b.n	8009a28 <__kernel_rem_pio2f+0x12c>
 8009ba2:	1e62      	subs	r2, r4, #1
 8009ba4:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009baa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bae:	e7f4      	b.n	8009b9a <__kernel_rem_pio2f+0x29e>
 8009bb0:	a90a      	add	r1, sp, #40	@ 0x28
 8009bb2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	e7ab      	b.n	8009b14 <__kernel_rem_pio2f+0x218>
 8009bbc:	0800a890 	.word	0x0800a890
 8009bc0:	0800a864 	.word	0x0800a864
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009bca:	2900      	cmp	r1, #0
 8009bcc:	d0fa      	beq.n	8009bc4 <__kernel_rem_pio2f+0x2c8>
 8009bce:	9a04      	ldr	r2, [sp, #16]
 8009bd0:	a91e      	add	r1, sp, #120	@ 0x78
 8009bd2:	18a2      	adds	r2, r4, r2
 8009bd4:	1c66      	adds	r6, r4, #1
 8009bd6:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8009bda:	441c      	add	r4, r3
 8009bdc:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8009be0:	42b4      	cmp	r4, r6
 8009be2:	f6ff aecf 	blt.w	8009984 <__kernel_rem_pio2f+0x88>
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	46ab      	mov	fp, r5
 8009bea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bee:	f7f7 f875 	bl	8000cdc <__aeabi_i2f>
 8009bf2:	f04f 0a00 	mov.w	sl, #0
 8009bf6:	f04f 0800 	mov.w	r8, #0
 8009bfa:	6028      	str	r0, [r5, #0]
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	459a      	cmp	sl, r3
 8009c00:	dd07      	ble.n	8009c12 <__kernel_rem_pio2f+0x316>
 8009c02:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8009c06:	3504      	adds	r5, #4
 8009c08:	3601      	adds	r6, #1
 8009c0a:	e7e9      	b.n	8009be0 <__kernel_rem_pio2f+0x2e4>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	9a08      	ldr	r2, [sp, #32]
 8009c10:	e7d9      	b.n	8009bc6 <__kernel_rem_pio2f+0x2ca>
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	f85b 0904 	ldr.w	r0, [fp], #-4
 8009c18:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8009c1c:	f7f7 f8b2 	bl	8000d84 <__aeabi_fmul>
 8009c20:	4601      	mov	r1, r0
 8009c22:	4640      	mov	r0, r8
 8009c24:	f7f6 ffa6 	bl	8000b74 <__addsf3>
 8009c28:	f10a 0a01 	add.w	sl, sl, #1
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	e7e5      	b.n	8009bfc <__kernel_rem_pio2f+0x300>
 8009c30:	9b06      	ldr	r3, [sp, #24]
 8009c32:	9a02      	ldr	r2, [sp, #8]
 8009c34:	4648      	mov	r0, r9
 8009c36:	1a99      	subs	r1, r3, r2
 8009c38:	f000 f8fe 	bl	8009e38 <scalbnf>
 8009c3c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009c40:	4680      	mov	r8, r0
 8009c42:	f7f7 fa51 	bl	80010e8 <__aeabi_fcmpge>
 8009c46:	b1f8      	cbz	r0, 8009c88 <__kernel_rem_pio2f+0x38c>
 8009c48:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	f7f7 f899 	bl	8000d84 <__aeabi_fmul>
 8009c52:	f7f7 fa5d 	bl	8001110 <__aeabi_f2iz>
 8009c56:	f7f7 f841 	bl	8000cdc <__aeabi_i2f>
 8009c5a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009c5e:	4681      	mov	r9, r0
 8009c60:	f7f7 f890 	bl	8000d84 <__aeabi_fmul>
 8009c64:	4601      	mov	r1, r0
 8009c66:	4640      	mov	r0, r8
 8009c68:	f7f6 ff82 	bl	8000b70 <__aeabi_fsub>
 8009c6c:	f7f7 fa50 	bl	8001110 <__aeabi_f2iz>
 8009c70:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c76:	4648      	mov	r0, r9
 8009c78:	3401      	adds	r4, #1
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	f7f7 fa48 	bl	8001110 <__aeabi_f2iz>
 8009c80:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c86:	e751      	b.n	8009b2c <__kernel_rem_pio2f+0x230>
 8009c88:	4640      	mov	r0, r8
 8009c8a:	e7f7      	b.n	8009c7c <__kernel_rem_pio2f+0x380>
 8009c8c:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c8e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009c92:	f7f7 f823 	bl	8000cdc <__aeabi_i2f>
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f7 f874 	bl	8000d84 <__aeabi_fmul>
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	f7f7 f86e 	bl	8000d84 <__aeabi_fmul>
 8009ca8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cac:	4607      	mov	r7, r0
 8009cae:	e748      	b.n	8009b42 <__kernel_rem_pio2f+0x246>
 8009cb0:	f853 0b04 	ldr.w	r0, [r3], #4
 8009cb4:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009cb8:	9203      	str	r2, [sp, #12]
 8009cba:	9302      	str	r3, [sp, #8]
 8009cbc:	f7f7 f862 	bl	8000d84 <__aeabi_fmul>
 8009cc0:	4601      	mov	r1, r0
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f7f6 ff56 	bl	8000b74 <__addsf3>
 8009cc8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ccc:	4680      	mov	r8, r0
 8009cce:	f10a 0a01 	add.w	sl, sl, #1
 8009cd2:	9901      	ldr	r1, [sp, #4]
 8009cd4:	458a      	cmp	sl, r1
 8009cd6:	dc01      	bgt.n	8009cdc <__kernel_rem_pio2f+0x3e0>
 8009cd8:	45ca      	cmp	sl, r9
 8009cda:	dde9      	ble.n	8009cb0 <__kernel_rem_pio2f+0x3b4>
 8009cdc:	ab5a      	add	r3, sp, #360	@ 0x168
 8009cde:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009ce2:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009ce6:	3f01      	subs	r7, #1
 8009ce8:	e731      	b.n	8009b4e <__kernel_rem_pio2f+0x252>
 8009cea:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	dc07      	bgt.n	8009d00 <__kernel_rem_pio2f+0x404>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	dc4e      	bgt.n	8009d92 <__kernel_rem_pio2f+0x496>
 8009cf4:	d02e      	beq.n	8009d54 <__kernel_rem_pio2f+0x458>
 8009cf6:	f006 0007 	and.w	r0, r6, #7
 8009cfa:	b05b      	add	sp, #364	@ 0x16c
 8009cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d00:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d1f7      	bne.n	8009cf6 <__kernel_rem_pio2f+0x3fa>
 8009d06:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8009d0a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8009d0e:	46b8      	mov	r8, r7
 8009d10:	46a2      	mov	sl, r4
 8009d12:	f1ba 0f00 	cmp.w	sl, #0
 8009d16:	dc49      	bgt.n	8009dac <__kernel_rem_pio2f+0x4b0>
 8009d18:	46a1      	mov	r9, r4
 8009d1a:	f1b9 0f01 	cmp.w	r9, #1
 8009d1e:	dc60      	bgt.n	8009de2 <__kernel_rem_pio2f+0x4e6>
 8009d20:	2000      	movs	r0, #0
 8009d22:	2c01      	cmp	r4, #1
 8009d24:	dc76      	bgt.n	8009e14 <__kernel_rem_pio2f+0x518>
 8009d26:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8009d28:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8009d2a:	2d00      	cmp	r5, #0
 8009d2c:	d178      	bne.n	8009e20 <__kernel_rem_pio2f+0x524>
 8009d2e:	9900      	ldr	r1, [sp, #0]
 8009d30:	600a      	str	r2, [r1, #0]
 8009d32:	460a      	mov	r2, r1
 8009d34:	604b      	str	r3, [r1, #4]
 8009d36:	6090      	str	r0, [r2, #8]
 8009d38:	e7dd      	b.n	8009cf6 <__kernel_rem_pio2f+0x3fa>
 8009d3a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8009d3e:	f7f6 ff19 	bl	8000b74 <__addsf3>
 8009d42:	3c01      	subs	r4, #1
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	daf8      	bge.n	8009d3a <__kernel_rem_pio2f+0x43e>
 8009d48:	b10d      	cbz	r5, 8009d4e <__kernel_rem_pio2f+0x452>
 8009d4a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	6018      	str	r0, [r3, #0]
 8009d52:	e7d0      	b.n	8009cf6 <__kernel_rem_pio2f+0x3fa>
 8009d54:	2000      	movs	r0, #0
 8009d56:	af32      	add	r7, sp, #200	@ 0xc8
 8009d58:	e7f4      	b.n	8009d44 <__kernel_rem_pio2f+0x448>
 8009d5a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8009d5e:	f7f6 ff09 	bl	8000b74 <__addsf3>
 8009d62:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	daf6      	bge.n	8009d5a <__kernel_rem_pio2f+0x45e>
 8009d6c:	b1ad      	cbz	r5, 8009d9a <__kernel_rem_pio2f+0x49e>
 8009d6e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8009d72:	9a00      	ldr	r2, [sp, #0]
 8009d74:	4601      	mov	r1, r0
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8009d7a:	f7f6 fef9 	bl	8000b70 <__aeabi_fsub>
 8009d7e:	f04f 0801 	mov.w	r8, #1
 8009d82:	4544      	cmp	r4, r8
 8009d84:	da0b      	bge.n	8009d9e <__kernel_rem_pio2f+0x4a2>
 8009d86:	b10d      	cbz	r5, 8009d8c <__kernel_rem_pio2f+0x490>
 8009d88:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009d8c:	9b00      	ldr	r3, [sp, #0]
 8009d8e:	6058      	str	r0, [r3, #4]
 8009d90:	e7b1      	b.n	8009cf6 <__kernel_rem_pio2f+0x3fa>
 8009d92:	46a0      	mov	r8, r4
 8009d94:	2000      	movs	r0, #0
 8009d96:	af32      	add	r7, sp, #200	@ 0xc8
 8009d98:	e7e5      	b.n	8009d66 <__kernel_rem_pio2f+0x46a>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	e7e9      	b.n	8009d72 <__kernel_rem_pio2f+0x476>
 8009d9e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8009da2:	f7f6 fee7 	bl	8000b74 <__addsf3>
 8009da6:	f108 0801 	add.w	r8, r8, #1
 8009daa:	e7ea      	b.n	8009d82 <__kernel_rem_pio2f+0x486>
 8009dac:	f8d8 3000 	ldr.w	r3, [r8]
 8009db0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	9302      	str	r3, [sp, #8]
 8009dba:	9201      	str	r2, [sp, #4]
 8009dbc:	f7f6 feda 	bl	8000b74 <__addsf3>
 8009dc0:	9a01      	ldr	r2, [sp, #4]
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	4681      	mov	r9, r0
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	f7f6 fed2 	bl	8000b70 <__aeabi_fsub>
 8009dcc:	9b02      	ldr	r3, [sp, #8]
 8009dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	f7f6 fece 	bl	8000b74 <__addsf3>
 8009dd8:	f848 0904 	str.w	r0, [r8], #-4
 8009ddc:	f8c8 9000 	str.w	r9, [r8]
 8009de0:	e797      	b.n	8009d12 <__kernel_rem_pio2f+0x416>
 8009de2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009de6:	f8d7 a000 	ldr.w	sl, [r7]
 8009dea:	4618      	mov	r0, r3
 8009dec:	4651      	mov	r1, sl
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	f7f6 fec0 	bl	8000b74 <__addsf3>
 8009df4:	9b01      	ldr	r3, [sp, #4]
 8009df6:	4601      	mov	r1, r0
 8009df8:	4680      	mov	r8, r0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7f6 feb8 	bl	8000b70 <__aeabi_fsub>
 8009e00:	4651      	mov	r1, sl
 8009e02:	f7f6 feb7 	bl	8000b74 <__addsf3>
 8009e06:	f847 0904 	str.w	r0, [r7], #-4
 8009e0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e0e:	f8c7 8000 	str.w	r8, [r7]
 8009e12:	e782      	b.n	8009d1a <__kernel_rem_pio2f+0x41e>
 8009e14:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8009e18:	f7f6 feac 	bl	8000b74 <__addsf3>
 8009e1c:	3c01      	subs	r4, #1
 8009e1e:	e780      	b.n	8009d22 <__kernel_rem_pio2f+0x426>
 8009e20:	9900      	ldr	r1, [sp, #0]
 8009e22:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8009e26:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009e2a:	600a      	str	r2, [r1, #0]
 8009e2c:	604b      	str	r3, [r1, #4]
 8009e2e:	460a      	mov	r2, r1
 8009e30:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009e34:	e77f      	b.n	8009d36 <__kernel_rem_pio2f+0x43a>
 8009e36:	bf00      	nop

08009e38 <scalbnf>:
 8009e38:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4603      	mov	r3, r0
 8009e40:	460d      	mov	r5, r1
 8009e42:	4604      	mov	r4, r0
 8009e44:	d02e      	beq.n	8009ea4 <scalbnf+0x6c>
 8009e46:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009e4a:	d304      	bcc.n	8009e56 <scalbnf+0x1e>
 8009e4c:	4601      	mov	r1, r0
 8009e4e:	f7f6 fe91 	bl	8000b74 <__addsf3>
 8009e52:	4603      	mov	r3, r0
 8009e54:	e026      	b.n	8009ea4 <scalbnf+0x6c>
 8009e56:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8009e5a:	d118      	bne.n	8009e8e <scalbnf+0x56>
 8009e5c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8009e60:	f7f6 ff90 	bl	8000d84 <__aeabi_fmul>
 8009e64:	4a17      	ldr	r2, [pc, #92]	@ (8009ec4 <scalbnf+0x8c>)
 8009e66:	4603      	mov	r3, r0
 8009e68:	4295      	cmp	r5, r2
 8009e6a:	db0c      	blt.n	8009e86 <scalbnf+0x4e>
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009e72:	3a19      	subs	r2, #25
 8009e74:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009e78:	428d      	cmp	r5, r1
 8009e7a:	dd0a      	ble.n	8009e92 <scalbnf+0x5a>
 8009e7c:	4912      	ldr	r1, [pc, #72]	@ (8009ec8 <scalbnf+0x90>)
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f361 001e 	bfi	r0, r1, #0, #31
 8009e84:	e000      	b.n	8009e88 <scalbnf+0x50>
 8009e86:	4911      	ldr	r1, [pc, #68]	@ (8009ecc <scalbnf+0x94>)
 8009e88:	f7f6 ff7c 	bl	8000d84 <__aeabi_fmul>
 8009e8c:	e7e1      	b.n	8009e52 <scalbnf+0x1a>
 8009e8e:	0dd2      	lsrs	r2, r2, #23
 8009e90:	e7f0      	b.n	8009e74 <scalbnf+0x3c>
 8009e92:	1951      	adds	r1, r2, r5
 8009e94:	29fe      	cmp	r1, #254	@ 0xfe
 8009e96:	dcf1      	bgt.n	8009e7c <scalbnf+0x44>
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	dd05      	ble.n	8009ea8 <scalbnf+0x70>
 8009e9c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8009ea0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	f111 0f16 	cmn.w	r1, #22
 8009eac:	da01      	bge.n	8009eb2 <scalbnf+0x7a>
 8009eae:	4907      	ldr	r1, [pc, #28]	@ (8009ecc <scalbnf+0x94>)
 8009eb0:	e7e5      	b.n	8009e7e <scalbnf+0x46>
 8009eb2:	f101 0019 	add.w	r0, r1, #25
 8009eb6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8009eba:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8009ebe:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8009ec2:	e7e1      	b.n	8009e88 <scalbnf+0x50>
 8009ec4:	ffff3cb0 	.word	0xffff3cb0
 8009ec8:	7149f2ca 	.word	0x7149f2ca
 8009ecc:	0da24260 	.word	0x0da24260

08009ed0 <floorf>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009ed6:	3d7f      	subs	r5, #127	@ 0x7f
 8009ed8:	2d16      	cmp	r5, #22
 8009eda:	4601      	mov	r1, r0
 8009edc:	4604      	mov	r4, r0
 8009ede:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8009ee2:	dc26      	bgt.n	8009f32 <floorf+0x62>
 8009ee4:	2d00      	cmp	r5, #0
 8009ee6:	da0f      	bge.n	8009f08 <floorf+0x38>
 8009ee8:	4917      	ldr	r1, [pc, #92]	@ (8009f48 <floorf+0x78>)
 8009eea:	f7f6 fe43 	bl	8000b74 <__addsf3>
 8009eee:	2100      	movs	r1, #0
 8009ef0:	f7f7 f904 	bl	80010fc <__aeabi_fcmpgt>
 8009ef4:	b130      	cbz	r0, 8009f04 <floorf+0x34>
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	da23      	bge.n	8009f42 <floorf+0x72>
 8009efa:	2e00      	cmp	r6, #0
 8009efc:	4c13      	ldr	r4, [pc, #76]	@ (8009f4c <floorf+0x7c>)
 8009efe:	bf08      	it	eq
 8009f00:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009f04:	4621      	mov	r1, r4
 8009f06:	e01a      	b.n	8009f3e <floorf+0x6e>
 8009f08:	4e11      	ldr	r6, [pc, #68]	@ (8009f50 <floorf+0x80>)
 8009f0a:	412e      	asrs	r6, r5
 8009f0c:	4230      	tst	r0, r6
 8009f0e:	d016      	beq.n	8009f3e <floorf+0x6e>
 8009f10:	490d      	ldr	r1, [pc, #52]	@ (8009f48 <floorf+0x78>)
 8009f12:	f7f6 fe2f 	bl	8000b74 <__addsf3>
 8009f16:	2100      	movs	r1, #0
 8009f18:	f7f7 f8f0 	bl	80010fc <__aeabi_fcmpgt>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d0f1      	beq.n	8009f04 <floorf+0x34>
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	bfbe      	ittt	lt
 8009f24:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8009f28:	412b      	asrlt	r3, r5
 8009f2a:	18e4      	addlt	r4, r4, r3
 8009f2c:	ea24 0406 	bic.w	r4, r4, r6
 8009f30:	e7e8      	b.n	8009f04 <floorf+0x34>
 8009f32:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8009f36:	d302      	bcc.n	8009f3e <floorf+0x6e>
 8009f38:	f7f6 fe1c 	bl	8000b74 <__addsf3>
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	4608      	mov	r0, r1
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	2400      	movs	r4, #0
 8009f44:	e7de      	b.n	8009f04 <floorf+0x34>
 8009f46:	bf00      	nop
 8009f48:	7149f2ca 	.word	0x7149f2ca
 8009f4c:	bf800000 	.word	0xbf800000
 8009f50:	007fffff 	.word	0x007fffff

08009f54 <_init>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr

08009f60 <_fini>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr
